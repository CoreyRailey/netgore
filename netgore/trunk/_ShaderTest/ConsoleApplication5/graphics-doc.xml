<?xml version="1.0"?>
<doc>
    <assembly>
        <name>sfmlnet2-graphics</name>
    </assembly>
    <members>
        <member name="T:SFML.Graphics.Color">
            <summary>
            Utility class for manipulating 32-bits RGBA colors
            </summary>
        </member>
        <member name="M:SFML.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Construct the color from its red, green and blue components
            </summary>
            <param name="red">Red component</param>
            <param name="green">Green component</param>
            <param name="blue">Blue component</param>
        </member>
        <member name="M:SFML.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Construct the color from its red, green, blue and alpha components
            </summary>
            <param name="red">Red component</param>
            <param name="green">Green component</param>
            <param name="blue">Blue component</param>
            <param name="alpha">Alpha (transparency) component</param>
        </member>
        <member name="M:SFML.Graphics.Color.#ctor(SFML.Graphics.Color)">
            <summary>
            Construct the color from another
            </summary>
            <param name="color">Color to copy</param>
        </member>
        <member name="M:SFML.Graphics.Color.ToString">
            <summary>
            Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="F:SFML.Graphics.Color.R">
            <summary>Red component of the color</summary>
        </member>
        <member name="F:SFML.Graphics.Color.G">
            <summary>Green component of the color</summary>
        </member>
        <member name="F:SFML.Graphics.Color.B">
            <summary>Blue component of the color</summary>
        </member>
        <member name="F:SFML.Graphics.Color.A">
            <summary>Alpha (transparent) component of the color</summary>
        </member>
        <member name="F:SFML.Graphics.Color.Black">
            <summary>Predefined black color</summary>
        </member>
        <member name="F:SFML.Graphics.Color.White">
            <summary>Predefined white color</summary>
        </member>
        <member name="F:SFML.Graphics.Color.Red">
            <summary>Predefined red color</summary>
        </member>
        <member name="F:SFML.Graphics.Color.Green">
            <summary>Predefined green color</summary>
        </member>
        <member name="F:SFML.Graphics.Color.Blue">
            <summary>Predefined blue color</summary>
        </member>
        <member name="F:SFML.Graphics.Color.Yellow">
            <summary>Predefined yellow color</summary>
        </member>
        <member name="F:SFML.Graphics.Color.Magenta">
            <summary>Predefined magenta color</summary>
        </member>
        <member name="F:SFML.Graphics.Color.Cyan">
            <summary>Predefined cyan color</summary>
        </member>
        <member name="T:SFML.Graphics.Context">
            <summary>
            This class defines
            </summary>
        </member>
        <member name="M:SFML.Graphics.Context.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SFML.Graphics.Context.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SFML.Graphics.Context.SetActive(System.Boolean)">
            <summary>
            Activate or deactivate the context
            </summary>
            <param name="active">True to activate, false to deactivate</param>
        </member>
        <member name="M:SFML.Graphics.Context.ToString">
            <summary>
            Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="P:SFML.Graphics.Context.Global">
            <summary>
            Global helper context
            </summary>
        </member>
        <member name="T:SFML.Graphics.BlendMode">
            <summary>
            Enumerate the blending modes available for drawable objects
            </summary>
        </member>
        <member name="F:SFML.Graphics.BlendMode.Alpha">
            <summary>Pixel = Src * a + Dest * (1 - a)</summary>
        </member>
        <member name="F:SFML.Graphics.BlendMode.Add">
            <summary>Pixel = Src + Dest</summary>
        </member>
        <member name="F:SFML.Graphics.BlendMode.Multiply">
            <summary>Pixel = Src * Dest</summary>
        </member>
        <member name="F:SFML.Graphics.BlendMode.None">
            <summary>No blending</summary>
        </member>
        <member name="T:SFML.Graphics.Drawable">
            <summary>
            Abstract base class for every object that can be drawn
            into a render window
            </summary>
        </member>
        <member name="M:SFML.Graphics.Drawable.TransformToLocal(SFML.Graphics.Vector2)">
            <summary>
            Transform a point from global coordinates into local coordinates
            (ie it applies the inverse of object's origin, translation, rotation and scale to the point)
            </summary>
            <param name="point">Point to transform</param>
            <returns>Transformed point</returns>
        </member>
        <member name="M:SFML.Graphics.Drawable.TransformToGlobal(SFML.Graphics.Vector2)">
            <summary>
            Transform a point from local coordinates into global coordinates
            (ie it applies the object's origin, translation, rotation and scale to the point)
            </summary>
            <param name="point">Point to transform</param>
            <returns>Transformed point</returns>
        </member>
        <member name="M:SFML.Graphics.Drawable.Render(SFML.Graphics.RenderWindow,SFML.Graphics.Shader)">
            <summary>
            Render the object into the given render window
            </summary>
            <param name="target">Target render window</param>
            <param name="shader">Shader to apply</param>
        </member>
        <member name="M:SFML.Graphics.Drawable.Render(SFML.Graphics.RenderImage,SFML.Graphics.Shader)">
            <summary>
            Render the object into the given render image
            </summary>
            <param name="target">Target render image</param>
            <param name="shader">Shader to apply</param>
        </member>
        <member name="M:SFML.Graphics.Drawable.#ctor(System.IntPtr)">
            <summary>
            Internal constructor, for derived classes
            </summary>
            <param name="thisPtr">Pointer to the object in C library</param>
        </member>
        <member name="P:SFML.Graphics.Drawable.Position">
            <summary>
            Position of the object on screen
            </summary>
        </member>
        <member name="P:SFML.Graphics.Drawable.Rotation">
            <summary>
            Rotation of the object, defined in degrees
            </summary>
        </member>
        <member name="P:SFML.Graphics.Drawable.Scale">
            <summary>
            Vertical and horizontal scale of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.Drawable.Origin">
            <summary>
            Origin of the transformation of the object
            (center of translation, rotation and scale)
            </summary>
        </member>
        <member name="P:SFML.Graphics.Drawable.Color">
            <summary>
            Global color of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.Drawable.BlendMode">
            <summary>
            Blending mode of the object
            </summary>
        </member>
        <member name="T:SFML.Graphics.Glyph">
            <summary>
            Structure describing a glyph (a visual character)
            </summary>
        </member>
        <member name="F:SFML.Graphics.Glyph.Advance">
            <summary>Offset to move horizontically to the next character</summary>
        </member>
        <member name="F:SFML.Graphics.Glyph.Rectangle">
            <summary>Bounding rectangle of the glyph, in coordinates relative to the baseline</summary>
        </member>
        <member name="F:SFML.Graphics.Glyph.TexCoords">
            <summary>Texture coordinates of the glyph inside the font's image</summary>
        </member>
        <member name="T:SFML.Graphics.Font">
            <summary>
            Font is the low-level class for loading and
            manipulating character fonts. This class is meant to
            be used by String2D
            </summary>
        </member>
        <member name="M:SFML.Graphics.Font.#ctor(System.String)">
            <summary>
            Construct the font from a file
            </summary>
            <param name="filename">Font file to load</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Font.#ctor(System.IO.Stream)">
            <summary>
            Construct the font from a file in a stream
            </summary>
            <param name="stream">Stream containing the file contents</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Font.#ctor(SFML.Graphics.Font)">
            <summary>
            Construct the font from another font
            </summary>
            <param name="copy">Font to copy</param>
        </member>
        <member name="M:SFML.Graphics.Font.GetGlyph(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Get a glyph in the font
            </summary>
            <param name="codePoint">Unicode code point of the character to get</param>
            <param name="characterSize">Character size</param>
            <param name="bold">Retrieve the bold version or the regular one?</param>
            <returns>The glyph corresponding to the character</returns>
        </member>
        <member name="M:SFML.Graphics.Font.GetKerning(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Get the kerning offset between two glyphs
            </summary>
            <param name="first">Unicode code point of the first character</param>
            <param name="second">Unicode code point of the second character</param>
            <param name="characterSize">Character size</param>
            <returns>Kerning offset, in pixels</returns>
        </member>
        <member name="M:SFML.Graphics.Font.GetLineSpacing(System.UInt32)">
            <summary>
            Get spacing between two consecutive lines
            </summary>
            <param name="characterSize">Character size</param>
            <returns>Line spacing, in pixels</returns>
        </member>
        <member name="M:SFML.Graphics.Font.GetImage(System.UInt32)">
            <summary>
            Get the image containing the glyphs of a given size
            </summary>
            <param name="characterSize">Character size</param>
            <returns>Image storing the glyphs for the given size</returns>
        </member>
        <member name="M:SFML.Graphics.Font.ToString">
            <summary>
            Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:SFML.Graphics.Font.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:SFML.Graphics.Font.#ctor(System.IntPtr)">
            <summary>
            Internal constructor
            </summary>
            <param name="thisPtr">Pointer to the object in C library</param>
        </member>
        <member name="P:SFML.Graphics.Font.DefaultFont">
            <summary>
            Default built-in font
            </summary>
        </member>
        <member name="T:SFML.Graphics.Image">
            <summary>
            Image is the low-level class for loading and
            manipulating images
            </summary>
        </member>
        <member name="M:SFML.Graphics.Image.#ctor">
            <summary>
            Default constructor (invalid image)
            </summary>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Image.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Construct the image with black color
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Image.#ctor(System.UInt32,System.UInt32,SFML.Graphics.Color)">
            <summary>
            Construct the image from a single color
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="color">Color to fill the image with</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Image.#ctor(System.String)">
            <summary>
            Construct the image from a file
            </summary>
            <param name="filename">Path of the image file to load</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Image.#ctor(System.IO.Stream)">
            <summary>
            Construct the image from a file in a stream
            </summary>
            <param name="stream">Stream containing the file contents</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Image.#ctor(SFML.Graphics.Color[0:,0:])">
            <summary>
            Construct the image directly from an array of pixels
            </summary>
            <param name="pixels">2 dimensions array containing the pixels</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Image.#ctor(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Construct the image directly from an array of pixels
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="pixels">array containing the pixels</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Image.#ctor(SFML.Graphics.Image)">
            <summary>
            Construct the image from another image
            </summary>
            <param name="copy">Image to copy</param>
        </member>
        <member name="M:SFML.Graphics.Image.SaveToFile(System.String)">
            <summary>
            Save the contents of the image to a file
            </summary>
            <param name="filename">Path of the file to save (overwritten if already exist)</param>
            <returns>True if saving was successful</returns>
        </member>
        <member name="M:SFML.Graphics.Image.CreateMaskFromColor(SFML.Graphics.Color)">
            <summary>
            Create a transparency mask from a specified colorkey
            </summary>
            <param name="color">Color to become transparent</param>
        </member>
        <member name="M:SFML.Graphics.Image.CreateMaskFromColor(SFML.Graphics.Color,System.Byte)">
            <summary>
            Create a transparency mask from a specified colorkey
            </summary>
            <param name="color">Color to become transparent</param>
            <param name="alpha">Alpha value to use for transparent pixels</param>
        </member>
        <member name="M:SFML.Graphics.Image.Copy(SFML.Graphics.Image,System.UInt32,System.UInt32)">
            <summary>
            Copy pixels from another image onto this one.
            This function does a slow pixel copy and should only
            be used at initialization time
            </summary>
            <param name="source">Source image to copy</param>
            <param name="destX">X coordinate of the destination position</param>
            <param name="destY">Y coordinate of the destination position</param>
        </member>
        <member name="M:SFML.Graphics.Image.Copy(SFML.Graphics.Image,System.UInt32,System.UInt32,SFML.Graphics.IntRect)">
            <summary>
            Copy pixels from another image onto this one.
            This function does a slow pixel copy and should only
            be used at initialization time
            </summary>
            <param name="source">Source image to copy</param>
            <param name="destX">X coordinate of the destination position</param>
            <param name="destY">Y coordinate of the destination position</param>
            <param name="sourceRect">Sub-rectangle of the source image to copy</param>
        </member>
        <member name="M:SFML.Graphics.Image.CopyScreen(SFML.Graphics.RenderWindow)">
            <summary>
            Create the image from the current contents of the
            given window
            </summary>
            <param name="window">Window to capture</param>
            <returns>True if copy has been successful</returns>
        </member>
        <member name="M:SFML.Graphics.Image.CopyScreen(SFML.Graphics.RenderWindow,SFML.Graphics.IntRect)">
            <summary>
            Create the image from the current contents of the
            given window
            </summary>
            <param name="window">Window to capture</param>
            <param name="sourceRect">Sub-rectangle of the screen to copy</param>
            <returns>True if copy has been successful</returns>
        </member>
        <member name="M:SFML.Graphics.Image.GetPixel(System.UInt32,System.UInt32)">
            <summary>
            Get a pixel from the image
            </summary>
            <param name="x">X coordinate of pixel in the image</param>
            <param name="y">Y coordinate of pixel in the image</param>
            <returns>Color of pixel (x, y)</returns>
        </member>
        <member name="M:SFML.Graphics.Image.SetPixel(System.UInt32,System.UInt32,SFML.Graphics.Color)">
            <summary>
            Change the color of a pixel
            </summary>
            <param name="x">X coordinate of pixel in the image</param>
            <param name="y">Y coordinate of pixel in the image</param>
            <param name="color">New color for pixel (x, y)</param>
        </member>
        <member name="M:SFML.Graphics.Image.UpdatePixels(SFML.Graphics.Color[0:,0:])">
            <summary>
            Update the pixels of the image
            </summary>
            <param name="pixels">2 dimensions array containing the pixels</param>
        </member>
        <member name="M:SFML.Graphics.Image.UpdatePixels(SFML.Graphics.Color[0:,0:],System.UInt32,System.UInt32)">
            <summary>
            Update the pixels of the image
            </summary>
            <param name="pixels">2 dimensions array containing the pixels</param>
            <param name="x">X position of the rectangle to update</param>
            <param name="y">Y position of the rectangle to update</param>
        </member>
        <member name="M:SFML.Graphics.Image.Bind">
            <summary>
            Bind the image for rendering
            </summary>
        </member>
        <member name="M:SFML.Graphics.Image.ToString">
            <summary>
            Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:SFML.Graphics.Image.#ctor(System.IntPtr)">
            <summary>
            Internal constructor
            </summary>
            <param name="thisPtr">Pointer to the object in C library</param>
        </member>
        <member name="M:SFML.Graphics.Image.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="P:SFML.Graphics.Image.Pixels">
            <summary>
            Get a copy of the array of pixels (RGBA 8 bits integers components)
            Array size is Width x Height x 4
            </summary>
            <returns>Array of pixels</returns>
        </member>
        <member name="P:SFML.Graphics.Image.Smooth">
            <summary>
            Control the smooth filter
            </summary>
        </member>
        <member name="P:SFML.Graphics.Image.Width">
            <summary>
            Width of the image, in pixels
            </summary>
        </member>
        <member name="P:SFML.Graphics.Image.Height">
            <summary>
            Height of the image, in pixels
            </summary>
        </member>
        <member name="T:SFML.Graphics.IntRect">
            <summary>
            IntRect is an utility class for manipulating 2D rectangles
            with integer coordinates
            </summary>
        </member>
        <member name="M:SFML.Graphics.IntRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct the rectangle from its coordinates
            </summary>
            <param name="left">Left coordinate of the rectangle</param>
            <param name="top">Top coordinate of the rectangle</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:SFML.Graphics.IntRect.Contains(System.Int32,System.Int32)">
            <summary>
            Check if a point is inside the rectangle's area
            </summary>
            <param name="x">X coordinate of the point to test</param>
            <param name="y">Y coordinate of the point to test</param>
            <returns>True if the point is inside</returns>
        </member>
        <member name="M:SFML.Graphics.IntRect.Intersects(SFML.Graphics.IntRect)">
            <summary>
            Check intersection between two rectangles
            </summary>
            <param name="rect"> Rectangle to test</param>
            <returns>True if rectangles overlap</returns>
        </member>
        <member name="M:SFML.Graphics.IntRect.Intersects(SFML.Graphics.IntRect,SFML.Graphics.IntRect@)">
            <summary>
            Check intersection between two rectangles
            </summary>
            <param name="rect"> Rectangle to test</param>
            <param name="overlap">Rectangle to be filled with overlapping rect</param>
            <returns>True if rectangles overlap</returns>
        </member>
        <member name="M:SFML.Graphics.IntRect.ToString">
            <summary>
            Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="F:SFML.Graphics.IntRect.Left">
            <summary>Left coordinate of the rectangle</summary>
        </member>
        <member name="F:SFML.Graphics.IntRect.Top">
            <summary>Top coordinate of the rectangle</summary>
        </member>
        <member name="F:SFML.Graphics.IntRect.Width">
            <summary>Width of the rectangle</summary>
        </member>
        <member name="F:SFML.Graphics.IntRect.Height">
            <summary>Height of the rectangle</summary>
        </member>
        <member name="T:SFML.Graphics.FloatRect">
            <summary>
            IntRect is an utility class for manipulating 2D rectangles
            with float coordinates
            </summary>
        </member>
        <member name="M:SFML.Graphics.FloatRect.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct the rectangle from its coordinates
            </summary>
            <param name="left">Left coordinate of the rectangle</param>
            <param name="top">Top coordinate of the rectangle</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:SFML.Graphics.FloatRect.Contains(System.Single,System.Single)">
            <summary>
            Check if a point is inside the rectangle's area
            </summary>
            <param name="x">X coordinate of the point to test</param>
            <param name="y">Y coordinate of the point to test</param>
            <returns>True if the point is inside</returns>
        </member>
        <member name="M:SFML.Graphics.FloatRect.Intersects(SFML.Graphics.FloatRect)">
            <summary>
            Check intersection between two rectangles
            </summary>
            <param name="rect"> Rectangle to test</param>
            <returns>True if rectangles overlap</returns>
        </member>
        <member name="M:SFML.Graphics.FloatRect.Intersects(SFML.Graphics.FloatRect,SFML.Graphics.FloatRect@)">
            <summary>
            Check intersection between two rectangles
            </summary>
            <param name="rect"> Rectangle to test</param>
            <param name="overlap">Rectangle to be filled with overlapping rect</param>
            <returns>True if rectangles overlap</returns>
        </member>
        <member name="M:SFML.Graphics.FloatRect.ToString">
            <summary>
            Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="F:SFML.Graphics.FloatRect.Left">
            <summary>Left coordinate of the rectangle</summary>
        </member>
        <member name="F:SFML.Graphics.FloatRect.Top">
            <summary>Top coordinate of the rectangle</summary>
        </member>
        <member name="F:SFML.Graphics.FloatRect.Width">
            <summary>Width of the rectangle</summary>
        </member>
        <member name="F:SFML.Graphics.FloatRect.Height">
            <summary>Height of the rectangle</summary>
        </member>
        <member name="T:SFML.Graphics.RenderImage">
            <summary>
            Simple wrapper for Window that allows easy
            2D rendering
            </summary>
        </member>
        <member name="T:SFML.Graphics.RenderTarget">
            <summary>
            Abstract base class for render targets (renderwindow, renderimage)
            </summary>
        </member>
        <member name="M:SFML.Graphics.RenderTarget.GetViewport(SFML.Graphics.View)">
            <summary>
            Get the viewport of a view applied to this target
            </summary>
            <param name="view">Target view</param>
            <returns>Viewport rectangle, expressed in pixels in the current target</returns>
        </member>
        <member name="M:SFML.Graphics.RenderTarget.ConvertCoords(System.UInt32,System.UInt32)">
            <summary>
            Convert a point in target coordinates into view coordinates
            This version uses the current view of the window
            </summary>
            <param name="x">X coordinate of the point to convert, relative to the target</param>
            <param name="y">Y coordinate of the point to convert, relative to the target</param>
            <returns>Converted point</returns>
        </member>
        <member name="M:SFML.Graphics.RenderTarget.ConvertCoords(System.UInt32,System.UInt32,SFML.Graphics.View)">
            <summary>
            Convert a point in target coordinates into view coordinates
            This version uses the given view
            </summary>
            <param name="x">X coordinate of the point to convert, relative to the target</param>
            <param name="y">Y coordinate of the point to convert, relative to the target</param>
            <param name="view">Target view to convert the point to</param>
            <returns>Converted point</returns>
        </member>
        <member name="M:SFML.Graphics.RenderTarget.Clear">
            <summary>
            Clear the entire window with black color
            </summary>
        </member>
        <member name="M:SFML.Graphics.RenderTarget.Clear(SFML.Graphics.Color)">
            <summary>
            Clear the entire window with a single color
            </summary>
            <param name="color">Color to use to clear the window</param>
        </member>
        <member name="M:SFML.Graphics.RenderTarget.Draw(SFML.Graphics.Drawable)">
            <summary>
            Draw something into the window
            </summary>
            <param name="objectToDraw">Object to draw</param>
        </member>
        <member name="M:SFML.Graphics.RenderTarget.Draw(SFML.Graphics.Drawable,SFML.Graphics.Shader)">
            <summary>
            Draw something into the render image with a shader
            </summary>
            <param name="objectToDraw">Object to draw</param>
            <param name="shader">Shader to apply</param>
        </member>
        <member name="M:SFML.Graphics.RenderTarget.SaveGLStates">
            <summary>
            Save the current OpenGL render states and matrices
            </summary>
        </member>
        <member name="M:SFML.Graphics.RenderTarget.RestoreGLStates">
            <summary>
            Restore the previously saved OpenGL render states and matrices
            </summary>
        </member>
        <member name="P:SFML.Graphics.RenderTarget.Width">
            <summary>
            Width of the rendering region of the window
            </summary>
        </member>
        <member name="P:SFML.Graphics.RenderTarget.Height">
            <summary>
            Height of the rendering region of the window
            </summary>
        </member>
        <member name="P:SFML.Graphics.RenderTarget.DefaultView">
            <summary>
            Default view of the window
            </summary>
        </member>
        <member name="P:SFML.Graphics.RenderTarget.CurrentView">
            <summary>
            Current view active in the window
            </summary>
        </member>
        <member name="M:SFML.Graphics.RenderImage.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Create the render image with the given dimensions
            </summary>
            <param name="width">Width of the render image</param>
            <param name="height">Height of the render image</param>
        </member>
        <member name="M:SFML.Graphics.RenderImage.#ctor(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Create the render image with the given dimensions and
            an optional depth-buffer attached
            </summary>
            <param name="width">Width of the render image</param>
            <param name="height">Height of the render image</param>
            <param name="depthBuffer">Do you want a depth-buffer attached?</param>
        </member>
        <member name="M:SFML.Graphics.RenderImage.SetActive(System.Boolean)">
            <summary>
            Activate of deactivate the render image as the current target
            for rendering
            </summary>
            <param name="active">True to activate, false to deactivate (true by default)</param>
            <returns>True if operation was successful, false otherwise</returns>
        </member>
        <member name="M:SFML.Graphics.RenderImage.GetViewport(SFML.Graphics.View)">
            <summary>
            Get the viewport of a view applied to this target
            </summary>
            <param name="view">Target view</param>
            <returns>Viewport rectangle, expressed in pixels in the current target</returns>
        </member>
        <member name="M:SFML.Graphics.RenderImage.ConvertCoords(System.UInt32,System.UInt32)">
             <summary>
             Convert a point in target coordinates into view coordinates
             This version uses the current view of the window
             </summary>
             <param name="x">X coordinate of the point to convert, relative to the target</param>
             <param name="y">Y coordinate of the point to convert, relative to the target</param>
             <returns>Converted point</returns>
            
        </member>
        <member name="M:SFML.Graphics.RenderImage.ConvertCoords(System.UInt32,System.UInt32,SFML.Graphics.View)">
             <summary>
             Convert a point in target coordinates into view coordinates
             This version uses the given view
             </summary>
             <param name="x">X coordinate of the point to convert, relative to the target</param>
             <param name="y">Y coordinate of the point to convert, relative to the target</param>
             <param name="view">Target view to convert the point to</param>
             <returns>Converted point</returns>
            
        </member>
        <member name="M:SFML.Graphics.RenderImage.Clear">
            <summary>
            Clear the entire render image with black color
            </summary>
        </member>
        <member name="M:SFML.Graphics.RenderImage.Clear(SFML.Graphics.Color)">
            <summary>
            Clear the entire render image with a single color
            </summary>
            <param name="color">Color to use to clear the image</param>
        </member>
        <member name="M:SFML.Graphics.RenderImage.Draw(SFML.Graphics.Drawable)">
            <summary>
            Draw something into the render image
            </summary>
            <param name="objectToDraw">Object to draw</param>
        </member>
        <member name="M:SFML.Graphics.RenderImage.Draw(SFML.Graphics.Drawable,SFML.Graphics.Shader)">
            <summary>
            Draw something into the render image with a shader
            </summary>
            <param name="objectToDraw">Object to draw</param>
            <param name="shader">Shader to apply</param>
        </member>
        <member name="M:SFML.Graphics.RenderImage.SaveGLStates">
            <summary>
            Save the current OpenGL render states and matrices
            </summary>
        </member>
        <member name="M:SFML.Graphics.RenderImage.RestoreGLStates">
            <summary>
            Restore the previously saved OpenGL render states and matrices
            </summary>
        </member>
        <member name="M:SFML.Graphics.RenderImage.Display">
            <summary>
            Update the contents of the target image
            </summary>
        </member>
        <member name="M:SFML.Graphics.RenderImage.ToString">
            <summary>
            Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:SFML.Graphics.RenderImage.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="P:SFML.Graphics.RenderImage.Width">
            <summary>
            Width of the rendering region of the image
            </summary>
        </member>
        <member name="P:SFML.Graphics.RenderImage.Height">
            <summary>
            Height of the rendering region of the image
            </summary>
        </member>
        <member name="P:SFML.Graphics.RenderImage.DefaultView">
            <summary>
            Default view of the render image
            </summary>
        </member>
        <member name="P:SFML.Graphics.RenderImage.CurrentView">
            <summary>
            Current view active in the render image
            </summary>
        </member>
        <member name="P:SFML.Graphics.RenderImage.Image">
            <summary>
            Target image of the render image
            </summary>
        </member>
        <member name="P:SFML.Graphics.RenderImage.IsAvailable">
            <summary>
            Tell whether or not the system supports render images
            </summary>
        </member>
        <member name="T:SFML.Graphics.RenderWindow">
            <summary>
            Simple wrapper for Window that allows easy
            2D rendering
            </summary>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.#ctor(SFML.Window.VideoMode,System.String)">
            <summary>
            Create the window with default style and creation settings
            </summary>
            <param name="mode">Video mode to use</param>
            <param name="title">Title of the window</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.#ctor(SFML.Window.VideoMode,System.String,SFML.Window.Styles)">
            <summary>
            Create the window with default creation settings
            </summary>
            <param name="mode">Video mode to use</param>
            <param name="title">Title of the window</param>
            <param name="style">Window style (Resize | Close by default)</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.#ctor(SFML.Window.VideoMode,System.String,SFML.Window.Styles,SFML.Window.ContextSettings)">
            <summary>
            Create the window
            </summary>
            <param name="mode">Video mode to use</param>
            <param name="title">Title of the window</param>
            <param name="style">Window style (Resize | Close by default)</param>
            <param name="settings">Creation parameters</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.#ctor(System.IntPtr)">
            <summary>
            Create the window from an existing control with default creation settings
            </summary>
            <param name="handle">Platform-specific handle of the control</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.#ctor(System.IntPtr,SFML.Window.ContextSettings)">
            <summary>
            Create the window from an existing control
            </summary>
            <param name="handle">Platform-specific handle of the control</param>
            <param name="settings">Creation parameters</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.IsOpened">
            <summary>
            Tell whether or not the window is opened (ie. has been created).
            Note that a hidden window (Show(false))
            will still return true
            </summary>
            <returns>True if the window is opened</returns>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.Close">
            <summary>
            Close (destroy) the window.
            The Window instance remains valid and you can call
            Create to recreate the window
            </summary>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.Display">
            <summary>
            Display the window on screen
            </summary>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.UseVerticalSync(System.Boolean)">
            <summary>
            Enable / disable vertical synchronization
            </summary>
            <param name="enable">True to enable v-sync, false to deactivate</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.ShowMouseCursor(System.Boolean)">
            <summary>
            Show or hide the mouse cursor
            </summary>
            <param name="show">True to show, false to hide</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.SetCursorPosition(System.UInt32,System.UInt32)">
            <summary>
            Change the position of the mouse cursor
            </summary>
            <param name="x">Left coordinate of the cursor, relative to the window</param>
            <param name="y">Top coordinate of the cursor, relative to the window</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.SetPosition(System.Int32,System.Int32)">
            <summary>
            Change the position of the window on screen.
            Only works for top-level windows
            </summary>
            <param name="x">Left position</param>
            <param name="y">Top position</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.SetSize(System.UInt32,System.UInt32)">
            <summary>
            Change the size of the rendering region of the window
            </summary>
            <param name="width">New width</param>
            <param name="height">New height</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.Show(System.Boolean)">
            <summary>
            Show or hide the window
            </summary>
            <param name="show">True to show, false to hide</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.EnableKeyRepeat(System.Boolean)">
            <summary>
            Enable or disable automatic key-repeat.
            Automatic key-repeat is enabled by default
            </summary>
            <param name="enable">True to enable, false to disable</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.SetIcon(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Change the window's icon
            </summary>
            <param name="width">Icon's width, in pixels</param>
            <param name="height">Icon's height, in pixels</param>
            <param name="pixels">Array of pixels, format must be RGBA 32 bits</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.SetActive(System.Boolean)">
            <summary>
            Activate of deactivate the window as the current target
            for rendering
            </summary>
            <param name="active">True to activate, false to deactivate (true by default)</param>
            <returns>True if operation was successful, false otherwise</returns>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.SetFramerateLimit(System.UInt32)">
            <summary>
            Limit the framerate to a maximum fixed frequency
            </summary>
            <param name="limit">Framerate limit, in frames per seconds (use 0 to disable limit)</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.GetFrameTime">
            <summary>
            Get time elapsed since last frame
            </summary>
            <returns>Time elapsed, in seconds</returns>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.SetJoystickThreshold(System.Single)">
            <summary>
            Change the joystick threshold, ie. the value below which
            no move event will be generated
            </summary>
            <param name="threshold">New threshold, in range [0, 100]</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.GetViewport(SFML.Graphics.View)">
            <summary>
            Get the viewport of a view applied to this target
            </summary>
            <param name="view">Target view</param>
            <returns>Viewport rectangle, expressed in pixels in the current target</returns>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.ConvertCoords(System.UInt32,System.UInt32)">
             <summary>
             Convert a point in target coordinates into view coordinates
             This version uses the current view of the window
             </summary>
             <param name="x">X coordinate of the point to convert, relative to the target</param>
             <param name="y">Y coordinate of the point to convert, relative to the target</param>
             <returns>Converted point</returns>
            
        </member>
        <member name="M:SFML.Graphics.RenderWindow.ConvertCoords(System.UInt32,System.UInt32,SFML.Graphics.View)">
             <summary>
             Convert a point in target coordinates into view coordinates
             This version uses the given view
             </summary>
             <param name="x">X coordinate of the point to convert, relative to the target</param>
             <param name="y">Y coordinate of the point to convert, relative to the target</param>
             <param name="view">Target view to convert the point to</param>
             <returns>Converted point</returns>
            
        </member>
        <member name="M:SFML.Graphics.RenderWindow.Clear">
            <summary>
            Clear the entire window with black color
            </summary>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.Clear(SFML.Graphics.Color)">
            <summary>
            Clear the entire window with a single color
            </summary>
            <param name="color">Color to use to clear the window</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.Draw(SFML.Graphics.Drawable)">
            <summary>
            Draw something into the window
            </summary>
            <param name="objectToDraw">Object to draw</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.Draw(SFML.Graphics.Drawable,SFML.Graphics.Shader)">
            <summary>
            Draw something into the window with a shader
            </summary>
            <param name="objectToDraw">Object to draw</param>
            <param name="shader">Shader to apply</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.SaveGLStates">
            <summary>
            Save the current OpenGL render states and matrices
            </summary>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.RestoreGLStates">
            <summary>
            Restore the previously saved OpenGL render states and matrices
            </summary>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.ToString">
            <summary>
            Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.GetEvent(SFML.Window.Event@)">
            <summary>
            Internal function to get the next event
            </summary>
            <param name="eventToFill">Variable to fill with the raw pointer to the event structure</param>
            <returns>True if there was an event, false otherwise</returns>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.WaitEvent(SFML.Window.Event@)">
            <summary>
            Internal function to get the next event (blocking)
            </summary>
            <param name="eventToFill">Variable to fill with the raw pointer to the event structure</param>
            <returns>False if any error occured</returns>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.Initialize">
            <summary>
            Do common initializations
            </summary>
        </member>
        <member name="P:SFML.Graphics.RenderWindow.Width">
            <summary>
            Width of the rendering region of the window
            </summary>
        </member>
        <member name="P:SFML.Graphics.RenderWindow.Height">
            <summary>
            Height of the rendering region of the window
            </summary>
        </member>
        <member name="P:SFML.Graphics.RenderWindow.Settings">
            <summary>
            Creation settings of the window
            </summary>
        </member>
        <member name="P:SFML.Graphics.RenderWindow.SystemHandle">
            <summary>
            OS-specific handle of the window
            </summary>
        </member>
        <member name="P:SFML.Graphics.RenderWindow.DefaultView">
            <summary>
            Default view of the window
            </summary>
        </member>
        <member name="P:SFML.Graphics.RenderWindow.CurrentView">
            <summary>
            Current view active in the window
            </summary>
        </member>
        <member name="T:SFML.Graphics.Shader">
            <summary>
            Wrapper for pixel shaders
            </summary>
        </member>
        <member name="M:SFML.Graphics.Shader.#ctor">
            <summary>
            Default constructor (invalid shader)
            </summary>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Shader.#ctor(System.String)">
            <summary>
            Load the shader from a file
            </summary>
            <param name="filename">Path of the shader file to load</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Shader.#ctor(SFML.Graphics.Shader)">
            <summary>
            Construct the shader from another shader
            </summary>
            <param name="copy">Shader to copy</param>
        </member>
        <member name="M:SFML.Graphics.Shader.LoadFromString(System.String)">
            <summary>
            Load the shader from a text in memory
            </summary>
            <param name="shader">String containing the shader code</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Shader.SetParameter(System.String,SFML.Graphics.Vector2)">
            <summary>
            Change a vector2 parameter of the shader
            </summary>
            <param name="name">Name of the parameter in the shader</param>
            <param name="v">Value of the parameter</param>
        </member>
        <member name="M:SFML.Graphics.Shader.SetParameter(System.String,System.Single)">
            <summary>
            Change a 1-component parameter of the shader
            </summary>
            <param name="name">Name of the parameter in the shader</param>
            <param name="x">Value of the parameter</param>
        </member>
        <member name="M:SFML.Graphics.Shader.SetParameter(System.String,System.Single,System.Single)">
            <summary>
            Change a 2-component parameter of the shader
            </summary>
            <param name="name">Name of the parameter in the shader</param>
            <param name="x">X component of the value</param>
            <param name="y">Y component of the value</param>
        </member>
        <member name="M:SFML.Graphics.Shader.SetParameter(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Change a 3-component parameter of the shader
            </summary>
            <param name="name">Name of the parameter in the shader</param>
            <param name="x">X component of the value</param>
            <param name="y">Y component of the value</param>
            <param name="z">Z component of the value</param>
        </member>
        <member name="M:SFML.Graphics.Shader.SetParameter(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Change a 4-component parameter of the shader
            </summary>
            <param name="name">Name of the parameter in the shader</param>
            <param name="x">X component of the value</param>
            <param name="y">Y component of the value</param>
            <param name="z">Z component of the value</param>
            <param name="w">W component of the value</param>
        </member>
        <member name="M:SFML.Graphics.Shader.SetTexture(System.String,SFML.Graphics.Image)">
            <summary>
            Set a texture parameter
            </summary>
            <param name="name">Name of the texture in the shader</param>
            <param name="texture">Image to set (pass null to use the texture of the object being drawn)</param>
        </member>
        <member name="M:SFML.Graphics.Shader.Bind">
            <summary>
            Bind the shader for rendering
            </summary>
        </member>
        <member name="M:SFML.Graphics.Shader.Unbind">
            <summary>
            Unbind the shader
            </summary>
        </member>
        <member name="M:SFML.Graphics.Shader.ToString">
            <summary>
            Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:SFML.Graphics.Shader.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="P:SFML.Graphics.Shader.IsAvailable">
            <summary>
            Tell whether or not the system supports shaders
            </summary>
        </member>
        <member name="P:SFML.Graphics.Shader.CurrentTexture">
            <summary>
            Special image representing the texture used by the object being drawn
            </summary>
        </member>
        <member name="T:SFML.Graphics.Shape">
            <summary>
            Shape defines a drawable convex shape ; it also defines
            helper functions to draw simple shapes like
            lines, rectangles, circles, etc.
            </summary>
        </member>
        <member name="M:SFML.Graphics.Shape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SFML.Graphics.Shape.#ctor(SFML.Graphics.Shape)">
            <summary>
            Construct the shape from another shape
            </summary>
            <param name="copy">Shape to copy</param>
        </member>
        <member name="M:SFML.Graphics.Shape.TransformToLocal(SFML.Graphics.Vector2)">
            <summary>
            Transform a point from global coordinates into local coordinates
            (ie it applies the inverse of object's origin, translation, rotation and scale to the point)
            </summary>
            <param name="point">Point to transform</param>
            <returns>Transformed point</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.TransformToGlobal(SFML.Graphics.Vector2)">
            <summary>
            Transform a point from local coordinates into global coordinates
            (ie it applies the object's origin, translation, rotation and scale to the point)
            </summary>
            <param name="point">Point to transform</param>
            <returns>Transformed point</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.AddPoint(SFML.Graphics.Vector2,SFML.Graphics.Color)">
            <summary>
            Add a point to the shape
            </summary>
            <param name="position">Position of the point</param>
            <param name="color">Color of the point</param>
        </member>
        <member name="M:SFML.Graphics.Shape.AddPoint(SFML.Graphics.Vector2,SFML.Graphics.Color,SFML.Graphics.Color)">
            <summary>
            Add a point to the shape
            </summary>
            <param name="position">Position of the point</param>
            <param name="color">Color of the point</param>
            <param name="outlineColor">Outline color of the point</param>
        </member>
        <member name="M:SFML.Graphics.Shape.EnableFill(System.Boolean)">
            <summary>
            Enable or disable filling the shape.
            Fill is enabled by default
            </summary>
            <param name="enable">True to enable, false to disable</param>
        </member>
        <member name="M:SFML.Graphics.Shape.EnableOutline(System.Boolean)">
            <summary>
            Enable or disable drawing the shape outline.
            Outline is enabled by default
            </summary>
            <param name="enable">True to enable, false to disable</param>
        </member>
        <member name="M:SFML.Graphics.Shape.SetPointPosition(System.UInt32,SFML.Graphics.Vector2)">
            <summary>
            Set the position of a point
            </summary>
            <param name="index">Index of the point, in range [0, NbPoints - 1]</param>
            <param name="position">New position of the index-th point</param>
        </member>
        <member name="M:SFML.Graphics.Shape.GetPointPosition(System.UInt32)">
            <summary>
            Get the position of a point
            </summary>
            <param name="index">Index of the point, in range [0, NbPoints - 1]</param>
            <returns>Position of the index-th point</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.SetPointColor(System.UInt32,SFML.Graphics.Color)">
            <summary>
            Set the color of a point
            </summary>
            <param name="index">Index of the point, in range [0, NbPoints - 1]</param>
            <param name="color">New color of the index-th point</param>
        </member>
        <member name="M:SFML.Graphics.Shape.GetPointColor(System.UInt32)">
            <summary>
            Get the color of a point
            </summary>
            <param name="index">Index of the point, in range [0, NbPoints - 1]</param>
            <returns>Color of the index-th point</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.SetPointOutlineColor(System.UInt32,SFML.Graphics.Color)">
            <summary>
            Set the outline color of a point
            </summary>
            <param name="index">Index of the point, in range [0, NbPoints - 1]</param>
            <param name="color">New outline color of the index-th point</param>
        </member>
        <member name="M:SFML.Graphics.Shape.GetPointOutlineColor(System.UInt32)">
            <summary>
            Get the outline color of a point
            </summary>
            <param name="index">Index of the point, in range [0, NbPoints - 1]</param>
            <returns>Outline color of the index-th point</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.Line(SFML.Graphics.Vector2,SFML.Graphics.Vector2,System.Single,SFML.Graphics.Color)">
            <summary>
            Create a shape made of a single line
            </summary>
            <param name="p1">Position of the first point</param>
            <param name="p2">Position of the second point</param>
            <param name="thickness">Line thickness</param>
            <param name="color">Color used to draw the line</param>
            <returns>New line shape built with the given parameters</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.Line(SFML.Graphics.Vector2,SFML.Graphics.Vector2,System.Single,SFML.Graphics.Color,System.Single,SFML.Graphics.Color)">
            <summary>
            Create a shape made of a single line
            </summary>
            <param name="p1">Position of the first point</param>
            <param name="p2">Position of the second point</param>
            <param name="thickness">Line thickness</param>
            <param name="color">Color used to draw the line</param>
            <param name="outline">Outline width</param>
            <param name="outlineColor">Color used to draw the outline</param>
            <returns>New line shape built with the given parameters</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.Rectangle(SFML.Graphics.FloatRect,SFML.Graphics.Color)">
            <summary>
            Create a shape made of a single rectangle
            </summary>
            <param name="rectangle">Rectangle to create</param>
            <param name="color">Color used to fill the rectangle</param>
            <returns>New rectangle shape built with the given parameters</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.Rectangle(SFML.Graphics.FloatRect,SFML.Graphics.Color,System.Single,SFML.Graphics.Color)">
            <summary>
            Create a shape made of a single rectangle
            </summary>
            <param name="rectangle">Rectangle to create</param>
            <param name="color">Color used to fill the rectangle</param>
            <param name="outline">Outline width</param>
            <param name="outlineColor">Color used to draw the outline</param>
            <returns>New rectangle shape built with the given parameters</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.Circle(SFML.Graphics.Vector2,System.Single,SFML.Graphics.Color)">
            <summary>
            Create a shape made of a single circle
            </summary>
            <param name="center">Position of the center</param>
            <param name="radius">Radius of the circle</param>
            <param name="color">Color used to fill the circle</param>
            <returns>New circle shape built with the given parameters</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.Circle(SFML.Graphics.Vector2,System.Single,SFML.Graphics.Color,System.Single,SFML.Graphics.Color)">
            <summary>
            Create a shape made of a single circle
            </summary>
            <param name="center">Position of the center</param>
            <param name="radius">Radius of the circle</param>
            <param name="color">Color used to fill the circle</param>
            <param name="outline">Outline width</param>
            <param name="outlineColor">Color used to draw the outline</param>
            <returns>New circle shape built with the given parameters</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.ToString">
            <summary>
            Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.Render(SFML.Graphics.RenderWindow,SFML.Graphics.Shader)">
            <summary>
            Render the object into the given render window
            </summary>
            <param name="target">Target render window</param>
            <param name="shader">Shader to apply</param>
        </member>
        <member name="M:SFML.Graphics.Shape.Render(SFML.Graphics.RenderImage,SFML.Graphics.Shader)">
            <summary>
            Render the object into the given render image
            </summary>
            <param name="target">Target render image</param>
            <param name="shader">Shader to apply</param>
        </member>
        <member name="M:SFML.Graphics.Shape.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:SFML.Graphics.Shape.#ctor(System.IntPtr)">
            <summary>
            Internal constructor
            </summary>
            <param name="thisPtr">Pointer to the internal object in C library</param>
        </member>
        <member name="P:SFML.Graphics.Shape.Position">
            <summary>
            Position of the object on screen
            </summary>
        </member>
        <member name="P:SFML.Graphics.Shape.Rotation">
            <summary>
            Rotation of the object, defined in degrees
            </summary>
        </member>
        <member name="P:SFML.Graphics.Shape.Scale">
            <summary>
            Vertical and horizontal scale of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.Shape.Origin">
            <summary>
            Origin of the transformation of the object
            (center of translation, rotation and scale)
            </summary>
        </member>
        <member name="P:SFML.Graphics.Shape.Color">
            <summary>
            Global color of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.Shape.BlendMode">
            <summary>
            Blending mode of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.Shape.OutlineWidth">
            <summary>
            Width of the shape outline
            </summary>
        </member>
        <member name="P:SFML.Graphics.Shape.PointsCount">
            <summary>
            Total number of points of the shape
            </summary>
        </member>
        <member name="T:SFML.Graphics.Sprite">
            <summary>
            This class defines a sprite : texture, transformations,
            color, and draw on screen
            </summary>
        </member>
        <member name="M:SFML.Graphics.Sprite.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SFML.Graphics.Sprite.#ctor(SFML.Graphics.Image)">
            <summary>
            Construct the sprite from a source image
            </summary>
            <param name="image">Source image to assign to the sprite</param>
        </member>
        <member name="M:SFML.Graphics.Sprite.#ctor(SFML.Graphics.Sprite)">
            <summary>
            Construct the sprite from another sprite
            </summary>
            <param name="copy">Sprite to copy</param>
        </member>
        <member name="M:SFML.Graphics.Sprite.TransformToLocal(SFML.Graphics.Vector2)">
            <summary>
            Transform a point from global coordinates into local coordinates
            (ie it applies the inverse of object's origin, translation, rotation and scale to the point)
            </summary>
            <param name="point">Point to transform</param>
            <returns>Transformed point</returns>
        </member>
        <member name="M:SFML.Graphics.Sprite.TransformToGlobal(SFML.Graphics.Vector2)">
            <summary>
            Transform a point from local coordinates into global coordinates
            (ie it applies the object's origin, translation, rotation and scale to the point)
            </summary>
            <param name="point">Point to transform</param>
            <returns>Transformed point</returns>
        </member>
        <member name="M:SFML.Graphics.Sprite.FlipX(System.Boolean)">
            <summary>
            Flip the sprite horizontically
            </summary>
            <param name="flipped">True to flip, false to canel flip</param>
        </member>
        <member name="M:SFML.Graphics.Sprite.FlipY(System.Boolean)">
            <summary>
            Flip the sprite vertically
            </summary>
            <param name="flipped">True to flip, false to canel flip</param>
        </member>
        <member name="M:SFML.Graphics.Sprite.GetPixel(System.UInt32,System.UInt32)">
            <summary>
            Get the color of a given pixel in the sprite
            (point is in local coordinates)
            </summary>
            <param name="x">X coordinate of the pixel to get</param>
            <param name="y">Y coordinate of the pixel to get</param>
            <returns>Color of pixel (x, y)</returns>
        </member>
        <member name="M:SFML.Graphics.Sprite.ToString">
            <summary>
            Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:SFML.Graphics.Sprite.Render(SFML.Graphics.RenderWindow,SFML.Graphics.Shader)">
            <summary>
            Render the object into the given render window
            </summary>
            <param name="target">Target render window</param>
            <param name="shader">Shader to apply</param>
        </member>
        <member name="M:SFML.Graphics.Sprite.Render(SFML.Graphics.RenderImage,SFML.Graphics.Shader)">
            <summary>
            Render the object into the given render image
            </summary>
            <param name="target">Target render image</param>
            <param name="shader">Shader to apply</param>
        </member>
        <member name="M:SFML.Graphics.Sprite.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="P:SFML.Graphics.Sprite.Position">
            <summary>
            Position of the object on screen
            </summary>
        </member>
        <member name="P:SFML.Graphics.Sprite.Rotation">
            <summary>
            Rotation of the object, defined in degrees
            </summary>
        </member>
        <member name="P:SFML.Graphics.Sprite.Scale">
            <summary>
            Vertical and horizontal scale of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.Sprite.Origin">
            <summary>
            Origin of the transformation of the object
            (center of translation, rotation and scale)
            </summary>
        </member>
        <member name="P:SFML.Graphics.Sprite.Color">
            <summary>
            Global color of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.Sprite.BlendMode">
            <summary>
            Blending mode of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.Sprite.Width">
            <summary>
            Width of the sprite
            </summary>
        </member>
        <member name="P:SFML.Graphics.Sprite.Height">
            <summary>
            Height of the sprite
            </summary>
        </member>
        <member name="P:SFML.Graphics.Sprite.Image">
            <summary>
            Source images displayed by the sprite
            </summary>
        </member>
        <member name="P:SFML.Graphics.Sprite.SubRect">
            <summary>
            Sub-rectangle of the source image displayed by the sprite
            </summary>
        </member>
        <member name="T:SFML.Graphics.Text">
            <summary>
            This class defines a graphical 2D text, that can be drawn on screen
            </summary>
        </member>
        <member name="M:SFML.Graphics.Text.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SFML.Graphics.Text.#ctor(System.String)">
            <summary>
            Construct the text from a string
            </summary>
            <param name="str">String to display</param>
        </member>
        <member name="M:SFML.Graphics.Text.#ctor(System.String,SFML.Graphics.Font)">
            <summary>
            Construct the text from a string and a font
            </summary>
            <param name="str">String to display</param>
            <param name="font">Font to use</param>
        </member>
        <member name="M:SFML.Graphics.Text.#ctor(System.String,SFML.Graphics.Font,System.UInt32)">
            <summary>
            Construct the text from a string, font and size
            </summary>
            <param name="str">String to display</param>
            <param name="font">Font to use</param>
            <param name="size">Base characters size</param>
        </member>
        <member name="M:SFML.Graphics.Text.#ctor(SFML.Graphics.Text)">
            <summary>
            Construct the text from another text
            </summary>
            <param name="copy">Text to copy</param>
        </member>
        <member name="M:SFML.Graphics.Text.TransformToLocal(SFML.Graphics.Vector2)">
            <summary>
            Transform a point from global coordinates into local coordinates
            (ie it applies the inverse of object's origin, translation, rotation and scale to the point)
            </summary>
            <param name="point">Point to transform</param>
            <returns>Transformed point</returns>
        </member>
        <member name="M:SFML.Graphics.Text.TransformToGlobal(SFML.Graphics.Vector2)">
            <summary>
            Transform a point from local coordinates into global coordinates
            (ie it applies the object's origin, translation, rotation and scale to the point)
            </summary>
            <param name="point">Point to transform</param>
            <returns>Transformed point</returns>
        </member>
        <member name="M:SFML.Graphics.Text.GetRect">
            <summary>
            Get the text rectangle on screen
            </summary>
            <returns>Text rectangle in global coordinates (doesn't include rotation)</returns>
        </member>
        <member name="M:SFML.Graphics.Text.GetCharacterPos(System.UInt32)">
            <summary>
            Return the visual position of the Index-th character of the text,
            in coordinates relative to the text
            (note : translation, origin, rotation and scale are not applied)
            </summary>
            <param name="index">Index of the character</param>
            <returns>Position of the Index-th character (end of text if Index is out of range)</returns>
        </member>
        <member name="M:SFML.Graphics.Text.ToString">
            <summary>
            Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:SFML.Graphics.Text.Render(SFML.Graphics.RenderWindow,SFML.Graphics.Shader)">
            <summary>
            Render the object into the given render window
            </summary>
            <param name="target">Target render window</param>
            <param name="shader">Shader to apply</param>
        </member>
        <member name="M:SFML.Graphics.Text.Render(SFML.Graphics.RenderImage,SFML.Graphics.Shader)">
            <summary>
            Render the object into the given render image
            </summary>
            <param name="target">Target render image</param>
            <param name="shader">Shader to apply</param>
        </member>
        <member name="M:SFML.Graphics.Text.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="P:SFML.Graphics.Text.Position">
            <summary>
            Position of the object on screen
            </summary>
        </member>
        <member name="P:SFML.Graphics.Text.Rotation">
            <summary>
            Rotation of the object, defined in degrees
            </summary>
        </member>
        <member name="P:SFML.Graphics.Text.Scale">
            <summary>
            Vertical and horizontal scale of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.Text.Origin">
            <summary>
            Origin of the transformation of the object
            (center of translation, rotation and scale)
            </summary>
        </member>
        <member name="P:SFML.Graphics.Text.Color">
            <summary>
            Global color of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.Text.BlendMode">
            <summary>
            Blending mode of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.Text.DisplayedString">
            <summary>
            String which is displayed
            </summary>
        </member>
        <member name="P:SFML.Graphics.Text.Font">
            <summary>
            Font used to display the text
            </summary>
        </member>
        <member name="P:SFML.Graphics.Text.Size">
            <summary>
            Base size of characters
            </summary>
        </member>
        <member name="P:SFML.Graphics.Text.Style">
            <summary>
            Style of the text (see Styles enum)
            </summary>
        </member>
        <member name="T:SFML.Graphics.Text.Styles">
            <summary>
            Enumerate the string drawing styles
            </summary>
        </member>
        <member name="F:SFML.Graphics.Text.Styles.Regular">
            <summary>Regular characters, no style</summary>
        </member>
        <member name="F:SFML.Graphics.Text.Styles.Bold">
            <summary> Characters are bold</summary>
        </member>
        <member name="F:SFML.Graphics.Text.Styles.Italic">
            <summary>Characters are in italic</summary>
        </member>
        <member name="F:SFML.Graphics.Text.Styles.Underlined">
            <summary>Characters are underlined</summary>
        </member>
        <member name="T:SFML.Graphics.Vector2">
            <summary>
            Vector2 is an utility class for manipulating 2 dimensional
            vectors with float components
            </summary>
        </member>
        <member name="M:SFML.Graphics.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Construct the vector from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.op_UnaryNegation(SFML.Graphics.Vector2)">
            <summary>
            Operator - overload ; returns the opposite of a vector
            </summary>
            <param name="v">Vector to negate</param>
            <returns>-v</returns>
        </member>
        <member name="M:SFML.Graphics.Vector2.op_Subtraction(SFML.Graphics.Vector2,SFML.Graphics.Vector2)">
            <summary>
            Operator - overload ; subtracts two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:SFML.Graphics.Vector2.op_Addition(SFML.Graphics.Vector2,SFML.Graphics.Vector2)">
            <summary>
            Operator + overload ; add two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 + v2</returns>
        </member>
        <member name="M:SFML.Graphics.Vector2.op_Multiply(SFML.Graphics.Vector2,System.Single)">
            <summary>
            Operator * overload ; multiply a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v * x</returns>
        </member>
        <member name="M:SFML.Graphics.Vector2.op_Multiply(System.Single,SFML.Graphics.Vector2)">
            <summary>
            Operator * overload ; multiply a scalar value by a vector
            </summary>
            <param name="x">Scalar value</param>
            <param name="v">Vector</param>
            <returns>x * v</returns>
        </member>
        <member name="M:SFML.Graphics.Vector2.op_Division(SFML.Graphics.Vector2,System.Single)">
            <summary>
            Operator / overload ; divide a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v / x</returns>
        </member>
        <member name="M:SFML.Graphics.Vector2.ToString">
            <summary>
            Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="F:SFML.Graphics.Vector2.X">
            <summary>X (horizontal) component of the vector</summary>
        </member>
        <member name="F:SFML.Graphics.Vector2.Y">
            <summary>Y (vertical) component of the vector</summary>
        </member>
        <member name="T:SFML.Graphics.View">
            <summary>
            This class defines a view (position, size, etc.) ;
            you can consider it as a 2D camera
            </summary>
        </member>
        <member name="M:SFML.Graphics.View.#ctor">
            <summary>
            Create a default view (1000x1000)
            </summary>
        </member>
        <member name="M:SFML.Graphics.View.#ctor(SFML.Graphics.FloatRect)">
            <summary>
            Construct the view from a rectangle
            </summary>
            <param name="viewRect">Rectangle defining the position and size of the view</param>
        </member>
        <member name="M:SFML.Graphics.View.#ctor(SFML.Graphics.Vector2,SFML.Graphics.Vector2)">
            <summary>
            Construct the view from its center and size
            </summary>
            <param name="center">Center of the view</param>
            <param name="size">Size of the view</param>
        </member>
        <member name="M:SFML.Graphics.View.#ctor(SFML.Graphics.View)">
            <summary>
            Construct the view from another view
            </summary>
            <param name="copy">View to copy</param>
        </member>
        <member name="M:SFML.Graphics.View.Reset(SFML.Graphics.FloatRect)">
            <summary>
            Rebuild the view from a rectangle
            </summary>
            <param name="rectangle">Rectangle defining the position and size of the view</param>
        </member>
        <member name="M:SFML.Graphics.View.Move(SFML.Graphics.Vector2)">
            <summary>
            Move the view
            </summary>
            <param name="offset">Offset to move the view</param>
        </member>
        <member name="M:SFML.Graphics.View.Rotate(System.Single)">
            <summary>
            Rotate the view
            </summary>
            <param name="angle">Angle of rotation, in degrees</param>
        </member>
        <member name="M:SFML.Graphics.View.Zoom(System.Single)">
            <summary>
            Resize the view rectangle to simulate a zoom / unzoom effect
            </summary>
            <param name="factor">Zoom factor to apply, relative to the current zoom</param>
        </member>
        <member name="M:SFML.Graphics.View.ToString">
            <summary>
            Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:SFML.Graphics.View.#ctor(System.IntPtr)">
            <summary>
            Internal constructor for other classes which need to manipulate raw views
            </summary>
            <param name="thisPtr">Direct pointer to the view object in the C library</param>
        </member>
        <member name="M:SFML.Graphics.View.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="P:SFML.Graphics.View.Center">
            <summary>
            Center of the view
            </summary>
        </member>
        <member name="P:SFML.Graphics.View.Size">
            <summary>
            Half-size of the view
            </summary>
        </member>
        <member name="P:SFML.Graphics.View.Rotation">
            <summary>
            Rotation of the view, in degrees
            </summary>
        </member>
        <member name="P:SFML.Graphics.View.Viewport">
            <summary>
            Target viewport of the view, defined as a factor of the
            size of the target to which the view is applied
            </summary>
        </member>
    </members>
</doc>
