using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using NetGore.Db.ClassCreator;
using NetGore.IO;
using NetGore.Scripting;
using NetGore.Tests.Properties;
using NUnit.Framework;

namespace NetGore.Tests.Db.ClassCreator
{
    public static class ClassCreatorHelper
    {
        /// <summary>
        /// The namespace for generated classes and interfaces.
        /// </summary>
        public const string GeneratedNamespace = "NetGore.Tests.Db.AutoGeneratedTables";

        public static IEnumerable<Type> GetTableTypes(string tableName)
        {
            IEnumerable<GeneratedTableCode> codeItems;

            // Generate
            using (var generator = TestDb.CreateMySqlClassGenerator())
            {
                codeItems = generator.Generate(GeneratedNamespace, GeneratedNamespace);
                codeItems = codeItems.Where(x => x.CodeType != GeneratedCodeType.ClassDbExtensions);
                codeItems = codeItems.Where(x => x.Table == tableName || x.CodeType == GeneratedCodeType.ColumnMetadata);
            }

            // Get the temp files and write the code to them
            List<string> tempFiles = new List<string>(codeItems.Count());
            foreach (var item in codeItems)
            {
                string tempFile = Path.GetTempFileName() + ".cs";
                tempFiles.Add(tempFile);
                File.WriteAllText(tempFile, item.Code);
            }

            // Generate assembly
            var ret = new ScriptTypeCollection("testdb_table_" + tableName, tempFiles);

            // Delete the temp files
            foreach (var file in tempFiles)
                File.Delete(file);

            return ret;
        }

        public static void AssertContainsProperty(IEnumerable<PropertyInfo> properties, string name, Type type)
        {
            var matches = properties.Where(x => x.Name.Equals(name, StringComparison.OrdinalIgnoreCase)
                 && x.PropertyType == type);

            Assert.AreEqual(1, matches.Count());
        }

        public static IEnumerable<PropertyInfo> GetTableTypeProperties(IEnumerable<Type> tableTypes)
        {
            var type = tableTypes.First(x => x.IsClass && !x.IsAbstract && !x.Name.Equals(DbClassGenerator.ColumnMetadataClassName, StringComparison.OrdinalIgnoreCase));
            return type.GetProperties();
        }
    }
}
