    ___                           ___                              __    _  _  _               _____               _      
   /   \ ___  _ __ ___    ___    / _ \ __ _  _ __ ___    ___      /__\__| |(_)| |_  ___   _ __/__   \ ___    ___  | | ___ 
  / /\ // _ \| '_ ` _ \  / _ \  / /_\// _` || '_ ` _ \  / _ \    /_\ / _` || || __|/ _ \ | '__| / /\// _ \  / _ \ | |/ __|
 / /_//|  __/| | | | | || (_) |/ /_\\| (_| || | | | | ||  __/ _ //__| (_| || || |_| (_) || |   / /  | (_) || (_) || |\__ \
/___,'  \___||_| |_| |_| \___/ \____/ \__,_||_| |_| |_| \___|(_)\__/ \__,_||_| \__|\___/ |_|   \/    \___/  \___/ |_||___/

-----------------------------------------------------------------------------------------------------------------------------------------------
This file contains information about this project in general. One is provided for each project in NetGore, and it is recommended you read them
all to get a basic understanding of NetGore's code structure.
-----------------------------------------------------------------------------------------------------------------------------------------------

DemoGame.EditorTools is the same in concept as NetGore.EditorTools in that it provides stuff specific
to editors. However, the difference is that NetGore.EditorTools provides generalized objects while DemoGame.EditorTools
provides the hooking-up to specific types (often defined in a DemoGame project).

For the most part, you won't be changing anything in here. However, you may find the need to add to it when you
create your own custom types (especially when you want to handle how it displays in a PropertyGrid). Luckily, this often
just involves copying how other classes work, and most users won't have to define many of their own custom types.
Basically, this project is an uber collection of boiler-plate code.

The major parts of this project are:
 * /TypeConverters/: Contains classes that derive from TypeConverter that allow you to specify special formats for custom types.
		For example, QuestIDListTypeConverter takes a IEnumerable<QuestID> and outputs a comma-delimited list. As a result, you will
		see a list of QuestIDs displayed as "(1,2,3,4)" instead of seeing something useless like the type name.
 * /UITypeEditors/: There are two parts to this. The first is the UITypeEditor, which allows you to basically tell WinForms that
		when someone tries to edit a type, that it should use your custom pop-up editor. The second part is the actual form that is
		shown to the user so they can edit the type in a more friendly way. Look at a list of AllianceIDs for example.
		AllianceIDListEditor says, "if this is a List<AllianceID>, let me handle how it is edited" then the AllianceIDListForm
		is a form for displaying and editing this information.
 * CustomUITypeEditors.cs: I have to say, this is a cool class. All the hard work is done by the NetGore core, so most all
		the code in here is just explicitly telling it what editors to use for what types, and allows you to override how
		text is displayed in the PropertyGrid when the cell is not selected. This is how the editors are able to, for example,
		show the name of an alliance instead of the ID. Whenever you add to the TypeConverters or UITypeEditors, you'll often
		end up adding a line or two to this file to hook up the association. Just kinda copy what all the other code does and, if
		it works, then you're set. Don't worry too much about how it works in detail.