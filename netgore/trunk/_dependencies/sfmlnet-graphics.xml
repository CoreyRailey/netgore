<?xml version="1.0"?>
<doc>
    <assembly>
        <name>sfmlnet-graphics</name>
    </assembly>
    <members>
        <member name="T:SFML.Graphics.IntRect">
            <summary>
            IntRect is an utility class for manipulating 2D rectangles
            with integer coordinates
            </summary>
        </member>
        <member name="M:SFML.Graphics.IntRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct the rectangle from its coordinates
            </summary>
            <param name="left">Left coordinate of the rectangle</param>
            <param name="top">Top coordinate of the rectangle</param>
            <param name="right">Right coordinate of the rectangle</param>
            <param name="bottom">Bottom coordinate of the rectangle</param>
        </member>
        <member name="M:SFML.Graphics.IntRect.Offset(System.Int32,System.Int32)">
            <summary>
            Move the whole rectangle by the given offset
            </summary>
            <param name="offsetX">Horizontal offset</param>
            <param name="offsetY">Vertical offset</param>
        </member>
        <member name="M:SFML.Graphics.IntRect.Contains(System.Int32,System.Int32)">
            <summary>
            Check if a point is inside the rectangle's area
            </summary>
            <param name="x">X coordinate of the point to test</param>
            <param name="y">Y coordinate of the point to test</param>
            <returns>True if the point is inside</returns>
        </member>
        <member name="M:SFML.Graphics.IntRect.Intersects(SFML.Graphics.IntRect)">
            <summary>
            Check intersection between two rectangles
            </summary>
            <param name="rect"> Rectangle to test</param>
            <returns>True if rectangles overlap</returns>
        </member>
        <member name="M:SFML.Graphics.IntRect.Intersects(SFML.Graphics.IntRect,SFML.Graphics.IntRect@)">
            <summary>
            Check intersection between two rectangles
            </summary>
            <param name="rect"> Rectangle to test</param>
            <param name="overlap">Rectangle to be filled with overlapping rect</param>
            <returns>True if rectangles overlap</returns>
        </member>
        <member name="F:SFML.Graphics.IntRect.Left">
            <summary>Left coordinate of the rectangle</summary>
        </member>
        <member name="F:SFML.Graphics.IntRect.Top">
            <summary>Top coordinate of the rectangle</summary>
        </member>
        <member name="F:SFML.Graphics.IntRect.Right">
            <summary>Right coordinate of the rectangle</summary>
        </member>
        <member name="F:SFML.Graphics.IntRect.Bottom">
            <summary>Bottom coordinate of the rectangle</summary>
        </member>
        <member name="P:SFML.Graphics.IntRect.Width">
            <summary>
            Width of the rectangle
            </summary>
        </member>
        <member name="P:SFML.Graphics.IntRect.Height">
            <summary>
            Height of the rectangle
            </summary>
        </member>
        <member name="T:SFML.Graphics.FloatRect">
            <summary>
            FloatRect is an utility class for manipulating 2D rectangles
            with float coordinates
            </summary>
        </member>
        <member name="M:SFML.Graphics.FloatRect.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct the rectangle from its coordinates
            </summary>
            <param name="left">Left coordinate of the rectangle</param>
            <param name="top">Top coordinate of the rectangle</param>
            <param name="right">Right coordinate of the rectangle</param>
            <param name="bottom">Bottom coordinate of the rectangle</param>
        </member>
        <member name="M:SFML.Graphics.FloatRect.Offset(System.Single,System.Single)">
            <summary>
            Move the whole rectangle by the given offset
            </summary>
            <param name="offsetX">Horizontal offset</param>
            <param name="offsetY">Vertical offset</param>
        </member>
        <member name="M:SFML.Graphics.FloatRect.Contains(System.Single,System.Single)">
            <summary>
            Check if a point is inside the rectangle's area
            </summary>
            <param name="x">X coordinate of the point to test</param>
            <param name="y">Y coordinate of the point to test</param>
            <returns>True if the point is inside</returns>
        </member>
        <member name="M:SFML.Graphics.FloatRect.Intersects(SFML.Graphics.FloatRect)">
            <summary>
            Check intersection between two rectangles
            </summary>
            <param name="rect"> Rectangle to test</param>
            <returns>True if rectangles overlap</returns>
        </member>
        <member name="M:SFML.Graphics.FloatRect.Intersects(SFML.Graphics.FloatRect,SFML.Graphics.FloatRect@)">
            <summary>
            Check intersection between two rectangles
            </summary>
            <param name="rect"> Rectangle to test</param>
            <param name="overlap">Rectangle to be filled with overlapping rect</param>
            <returns>True if rectangles overlap</returns>
        </member>
        <member name="F:SFML.Graphics.FloatRect.Left">
            <summary>Left coordinate of the rectangle</summary>
        </member>
        <member name="F:SFML.Graphics.FloatRect.Top">
            <summary>Top coordinate of the rectangle</summary>
        </member>
        <member name="F:SFML.Graphics.FloatRect.Right">
            <summary>Right coordinate of the rectangle</summary>
        </member>
        <member name="F:SFML.Graphics.FloatRect.Bottom">
            <summary>Bottom coordinate of the rectangle</summary>
        </member>
        <member name="P:SFML.Graphics.FloatRect.Width">
            <summary>
            Width of the rectangle
            </summary>
        </member>
        <member name="P:SFML.Graphics.FloatRect.Height">
            <summary>
            Height of the rectangle
            </summary>
        </member>
        <member name="T:SFML.Graphics.Design.Vector2Converter">
            <summary>Provides a unified way of converting Vector2 values to other types, as well as for accessing standard values and subproperties.</summary>
        </member>
        <member name="T:SFML.Graphics.Design.MathTypeConverter">
            <summary>Provides a unified way of converting math type values to other types, as well as for accessing standard values and subproperties.</summary>
        </member>
        <member name="F:SFML.Graphics.Design.MathTypeConverter.propertyDescriptions">
            <summary>Represents a collection of PropertyDescriptor objects.</summary>
        </member>
        <member name="F:SFML.Graphics.Design.MathTypeConverter.supportStringConvert">
            <summary>Returns whether string conversion is supported.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.MathTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</summary>
            <param name="context">The format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
        </member>
        <member name="M:SFML.Graphics.Design.MathTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Returns whether this converter can convert an object of one type to the type of this converter.</summary>
            <param name="context">The format context.</param>
            <param name="destinationType">The destination type.</param>
        </member>
        <member name="M:SFML.Graphics.Design.MathTypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>Returns whether changing a value on this object requires a call to CreateInstance to create a new value, using the specified context.</summary>
            <param name="context">The format context.</param>
        </member>
        <member name="M:SFML.Graphics.Design.MathTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>Returns a collection of properties for the type of array specified by the value parameter.</summary>
            <param name="context">The format context.</param>
            <param name="value">The type of array for which to get properties.</param>
            <param name="attributes">An array to use as a filter.</param>
        </member>
        <member name="M:SFML.Graphics.Design.MathTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>Returns whether this object supports properties, using the specified context.</summary>
            <param name="context">The format context.</param>
        </member>
        <member name="M:SFML.Graphics.Design.Vector2Converter.#ctor">
            <summary>Initializes a new instance of the Vector2Converter class.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.Vector2Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
        </member>
        <member name="M:SFML.Graphics.Design.Vector2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
        </member>
        <member name="M:SFML.Graphics.Design.Vector2Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>Creates an instance of the type that this Vector2Converter is associated with, using the specified context, given a set of property values for the object.</summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
        </member>
        <member name="T:SFML.Graphics.PostFx">
            <summary>
            PostFX is used to apply a post effect to a window
            </summary>
        </member>
        <member name="M:SFML.Graphics.PostFx.#ctor">
            <summary>
            Default constructor (invalid effect)
            </summary>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.PostFx.#ctor(System.String)">
            <summary>
            Load the effect from a file
            </summary>
            <param name="filename">Path of the effect file to load</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.PostFx.LoadFromString(System.String)">
            <summary>
            Load the effect from a text in memory
            </summary>
            <param name="effect">String containing the effect code</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.PostFx.SetParameter(System.String,System.Single)">
            <summary>
            Change a 1-component parameter of the effect
            </summary>
            <param name="name">Name of the parameter in the effect</param>
            <param name="x">Value of the parameter</param>
        </member>
        <member name="M:SFML.Graphics.PostFx.SetParameter(System.String,System.Single,System.Single)">
            <summary>
            Change a 2-component parameter of the effect
            </summary>
            <param name="name">Name of the parameter in the effect</param>
            <param name="x">X component of the value</param>
            <param name="y">Y component of the value</param>
        </member>
        <member name="M:SFML.Graphics.PostFx.SetParameter(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Change a 3-component parameter of the effect
            </summary>
            <param name="name">Name of the parameter in the effect</param>
            <param name="x">X component of the value</param>
            <param name="y">Y component of the value</param>
            <param name="z">Z component of the value</param>
        </member>
        <member name="M:SFML.Graphics.PostFx.SetParameter(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Change a 4-component parameter of the effect
            </summary>
            <param name="name">Name of the parameter in the effect</param>
            <param name="x">X component of the value</param>
            <param name="y">Y component of the value</param>
            <param name="z">Z component of the value</param>
            <param name="w">W component of the value</param>
        </member>
        <member name="M:SFML.Graphics.PostFx.SetTexture(System.String,SFML.Graphics.Image)">
            <summary>
            Set a texture parameter
            </summary>
            <param name="name">Name of the texture in the effect</param>
            <param name="texture">Image to set (pass null to use the contents of the screen)</param>
        </member>
        <member name="M:SFML.Graphics.PostFx.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="P:SFML.Graphics.PostFx.CanUsePostFX">
            <summary>
            Tell whether or not the system supports post-effects
            </summary>
        </member>
        <member name="T:SFML.Graphics.Design.RectangleConverter">
            <summary>Provides a unified way of converting Rectangle values to other types, as well as for accessing standard values and subproperties.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.RectangleConverter.#ctor">
            <summary>Initializes a new instance of the RectangleConverter class.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
        </member>
        <member name="M:SFML.Graphics.Design.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>Creates an instance of the type that this RectangleConverter is associated with, using the specified context, given a set of property values for the object.</summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
        </member>
        <member name="T:SFML.Graphics.LazyFont">
            <summary>
            An implementation of <see cref="T:SFML.Graphics.Font"/> that will load on-demand.
            </summary>
        </member>
        <member name="T:SFML.Graphics.Font">
            <summary>
            Font is the low-level class for loading and
            manipulating character fonts. This class is meant to
            be used by String2D
            </summary>
        </member>
        <member name="M:SFML.Graphics.Font.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SFML.Graphics.Image"/> class.
            </summary>
        </member>
        <member name="M:SFML.Graphics.Font.#ctor(System.String)">
            <summary>
            Construct the font from a file
            </summary>
            <param name="filename">Font file to load</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Font.#ctor(System.String,System.UInt32)">
            <summary>
            Construct the font from a file, using custom size
            </summary>
            <param name="filename">Font file to load</param>
            <param name="charSize">Character size</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Font.#ctor(System.String,System.UInt32,System.String)">
            <summary>
            Construct the font from a file, using custom size and characters set
            </summary>
            <param name="filename">Font file to load</param>
            <param name="charSize">Character size</param>
            <param name="charset">Set of characters to generate</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Font.EnsureLoaded(System.String,System.UInt32,System.String)">
            <summary>
            Reloads the asset from file if it is not loaded.
            </summary>
            <param name="filename">Font file to load</param>
            <param name="charSize">Character size</param>
            <param name="charset">Set of characters to generate</param>
            <returns>True if already loaded; false if it had to reload.</returns>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Font.#ctor(System.IO.Stream)">
            <summary>
            Construct the font from a file in a stream
            </summary>
            <param name="stream">Stream containing the file contents</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Font.#ctor(System.IO.Stream,System.UInt32)">
            <summary>
            Construct the font from a file in a stream, using custom size
            </summary>
            <param name="stream">Stream containing the file contents</param>
            <param name="charSize">Character size</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Font.#ctor(System.IO.Stream,System.UInt32,System.String)">
            <summary>
            Construct the font from a file in a stream
            </summary>
            <param name="stream">Stream containing the file contents</param>
            <param name="charSize">Character size</param>
            <param name="charset">Set of characters to generate</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Font.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:SFML.Graphics.Font.#ctor(System.IntPtr)">
            <summary>
            Internal constructor
            </summary>
            <param name="thisPtr">Pointer to the object in C library</param>
        </member>
        <member name="P:SFML.Graphics.Font.CharacterSize">
            <summary>
            Base character size
            </summary>
        </member>
        <member name="P:SFML.Graphics.Font.DefaultFont">
            <summary>
            Default built-in font
            </summary>
        </member>
        <member name="M:SFML.Graphics.LazyFont.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SFML.Graphics.LazyFont"/> class.
            </summary>
            <param name="filename">Font file to load</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.LazyFont.#ctor(System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:SFML.Graphics.LazyFont"/> class.
            </summary>
            <param name="filename">Font file to load</param>
            <param name="charSize">Character size</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.LazyFont.Dispose">
            <summary>
            Explicitely dispose the object
            </summary>
        </member>
        <member name="M:SFML.Graphics.LazyFont.OnReload">
            <summary>
            When overridden in the derived class, handles when the <see cref="T:SFML.Graphics.LazyFont"/> is reloaded.
            </summary>
        </member>
        <member name="P:SFML.Graphics.LazyFont.CharSize">
            <summary>
            Gets the char size to use when loading.
            </summary>
        </member>
        <member name="P:SFML.Graphics.LazyFont.FileName">
            <summary>
            Gets the file name that this image uses to load.
            </summary>
        </member>
        <member name="P:SFML.Graphics.LazyFont.This">
            <summary>
            Access to the internal pointer of the object.
            For internal use only
            </summary>
        </member>
        <member name="T:SFML.Graphics.Plane">
            <summary>Defines a plane.</summary>
        </member>
        <member name="F:SFML.Graphics.Plane.Normal">
            <summary>The normal vector of the Plane.</summary>
        </member>
        <member name="F:SFML.Graphics.Plane.D">
            <summary>The distance of the Plane along its normal from the origin.</summary>
        </member>
        <member name="M:SFML.Graphics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>Creates a new instance of Plane.</summary>
            <param name="a">X component of the normal defining the Plane.</param>
            <param name="b">Y component of the normal defining the Plane.</param>
            <param name="c">Z component of the normal defining the Plane.</param>
            <param name="d">Distance of the Plane along its normal from the origin.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.#ctor(SFML.Graphics.Vector3,System.Single)">
            <summary>Creates a new instance of Plane.</summary>
            <param name="normal">The normal vector to the Plane.</param>
            <param name="d">The Plane's distance along its normal from the origin.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.#ctor(SFML.Graphics.Vector4)">
            <summary>Creates a new instance of Plane.</summary>
            <param name="value">Vector4 with X, Y, and Z components defining the normal of the Plane. The W component defines the distance of the Plane along the normal from the origin.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.#ctor(SFML.Graphics.Vector3,SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Creates a new instance of Plane.</summary>
            <param name="point1">One point of a triangle defining the Plane.</param>
            <param name="point2">One point of a triangle defining the Plane.</param>
            <param name="point3">One point of a triangle defining the Plane.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.Equals(SFML.Graphics.Plane)">
            <summary>Determines whether the specified Plane is equal to the Plane.</summary>
            <param name="other">The Plane to compare with the current Plane.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.Equals(System.Object)">
            <summary>Determines whether the specified Object is equal to the Plane.</summary>
            <param name="obj">The Object to compare with the current Plane.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.GetHashCode">
            <summary>Gets the hash code for this object.</summary>
        </member>
        <member name="M:SFML.Graphics.Plane.ToString">
            <summary>Returns a String that represents the current Plane.</summary>
        </member>
        <member name="M:SFML.Graphics.Plane.Normalize">
            <summary>Changes the coefficients of the Normal vector of this Plane to make it of unit length.</summary>
        </member>
        <member name="M:SFML.Graphics.Plane.Normalize(SFML.Graphics.Plane)">
            <summary>Changes the coefficients of the Normal vector of a Plane to make it of unit length.</summary>
            <param name="value">The Plane to normalize.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.Normalize(SFML.Graphics.Plane@,SFML.Graphics.Plane@)">
            <summary>Changes the coefficients of the Normal vector of a Plane to make it of unit length.</summary>
            <param name="value">The Plane to normalize.</param>
            <param name="result">[OutAttribute] An existing plane Plane filled in with a normalized version of the specified plane.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.Transform(SFML.Graphics.Plane,SFML.Graphics.Matrix)">
            <summary>Transforms a normalized Plane by a Matrix.</summary>
            <param name="plane">The normalized Plane to transform. This Plane must already be normalized, so that its Normal vector is of unit length, before this method is called.</param>
            <param name="matrix">The transform Matrix to apply to the Plane.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.Transform(SFML.Graphics.Plane@,SFML.Graphics.Matrix@,SFML.Graphics.Plane@)">
            <summary>Transforms a normalized Plane by a Matrix.</summary>
            <param name="plane">The normalized Plane to transform. This Plane must already be normalized, so that its Normal vector is of unit length, before this method is called.</param>
            <param name="matrix">The transform Matrix to apply to the Plane.</param>
            <param name="result">[OutAttribute] An existing Plane filled in with the results of applying the transform.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.Transform(SFML.Graphics.Plane,SFML.Graphics.Quaternion)">
            <summary>Transforms a normalized Plane by a Quaternion rotation.</summary>
            <param name="plane">The normalized Plane to transform. This Plane must already be normalized, so that its Normal vector is of unit length, before this method is called.</param>
            <param name="rotation">The Quaternion rotation to apply to the Plane.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.Transform(SFML.Graphics.Plane@,SFML.Graphics.Quaternion@,SFML.Graphics.Plane@)">
            <summary>Transforms a normalized Plane by a Quaternion rotation.</summary>
            <param name="plane">The normalized Plane to transform. This Plane must already be normalized, so that its Normal vector is of unit length, before this method is called.</param>
            <param name="rotation">The Quaternion rotation to apply to the Plane.</param>
            <param name="result">[OutAttribute] An existing Plane filled in with the results of applying the rotation.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.Dot(SFML.Graphics.Vector4)">
            <summary>Calculates the dot product of a specified Vector4 and this Plane.</summary>
            <param name="value">The Vector4 to multiply this Plane by.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.Dot(SFML.Graphics.Vector4@,System.Single@)">
            <summary>Calculates the dot product of a specified Vector4 and this Plane.</summary>
            <param name="value">The Vector4 to multiply this Plane by.</param>
            <param name="result">[OutAttribute] The dot product of the specified Vector4 and this Plane.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.DotCoordinate(SFML.Graphics.Vector3)">
            <summary>Returns the dot product of a specified Vector3 and the Normal vector of this Plane plus the distance (D) value of the Plane.</summary>
            <param name="value">The Vector3 to multiply by.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.DotCoordinate(SFML.Graphics.Vector3@,System.Single@)">
            <summary>Returns the dot product of a specified Vector3 and the Normal vector of this Plane plus the distance (D) value of the Plane.</summary>
            <param name="value">The Vector3 to multiply by.</param>
            <param name="result">[OutAttribute] The resulting value.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.DotNormal(SFML.Graphics.Vector3)">
            <summary>Returns the dot product of a specified Vector3 and the Normal vector of this Plane.</summary>
            <param name="value">The Vector3 to multiply by.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.DotNormal(SFML.Graphics.Vector3@,System.Single@)">
            <summary>Returns the dot product of a specified Vector3 and the Normal vector of this Plane.</summary>
            <param name="value">The Vector3 to multiply by.</param>
            <param name="result">[OutAttribute] The resulting dot product.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.Intersects(SFML.Graphics.BoundingBox)">
            <summary>Checks whether the current Plane intersects a specified BoundingBox.</summary>
            <param name="box">The BoundingBox to test for intersection with.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.Intersects(SFML.Graphics.BoundingBox@,SFML.Graphics.PlaneIntersectionType@)">
            <summary>Checks whether the current Plane intersects a BoundingBox.</summary>
            <param name="box">The BoundingBox to check for intersection with.</param>
            <param name="result">[OutAttribute] An enumeration indicating whether the Plane intersects the BoundingBox.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.Intersects(SFML.Graphics.BoundingFrustum)">
            <summary>Checks whether the current Plane intersects a specified BoundingFrustum.</summary>
            <param name="frustum">The BoundingFrustum to check for intersection with.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.Intersects(SFML.Graphics.BoundingSphere)">
            <summary>Checks whether the current Plane intersects a specified BoundingSphere.</summary>
            <param name="sphere">The BoundingSphere to check for intersection with.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.Intersects(SFML.Graphics.BoundingSphere@,SFML.Graphics.PlaneIntersectionType@)">
            <summary>Checks whether the current Plane intersects a BoundingSphere.</summary>
            <param name="sphere">The BoundingSphere to check for intersection with.</param>
            <param name="result">[OutAttribute] An enumeration indicating whether the Plane intersects the BoundingSphere.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.op_Equality(SFML.Graphics.Plane,SFML.Graphics.Plane)">
            <summary>Determines whether two instances of Plane are equal.</summary>
            <param name="lhs">The object to the left of the equality operator.</param>
            <param name="rhs">The object to the right of the equality operator.</param>
        </member>
        <member name="M:SFML.Graphics.Plane.op_Inequality(SFML.Graphics.Plane,SFML.Graphics.Plane)">
            <summary>Determines whether two instances of Plane are not equal.</summary>
            <param name="lhs">The object to the left of the inequality operator.</param>
            <param name="rhs">The object to the right of the inequality operator.</param>
        </member>
        <member name="T:SFML.Graphics.Context">
            <summary>
            This class defines
            </summary>
        </member>
        <member name="M:SFML.Graphics.Context.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SFML.Graphics.Context.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SFML.Graphics.Context.SetActive(System.Boolean)">
            <summary>
            Activate or deactivate the context
            </summary>
            <param name="active">True to activate, false to deactivate</param>
        </member>
        <member name="P:SFML.Graphics.Context.Global">
            <summary>
            Global helper context
            </summary>
        </member>
        <member name="T:SFML.Graphics.Design.BoundingBoxConverter">
            <summary>Provides a unified way of converting BoundingBox values to other types, as well as for accessing standard values and subproperties.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.BoundingBoxConverter.#ctor">
            <summary>Initializes a new instance of the BoundingBoxConverter class.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.BoundingBoxConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
        </member>
        <member name="M:SFML.Graphics.Design.BoundingBoxConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
        </member>
        <member name="M:SFML.Graphics.Design.BoundingBoxConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>Creates an instance of the type that this BoundingBoxConverter is associated with, using the specified context, given a set of property values for the object.</summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
        </member>
        <member name="T:SFML.Graphics.Image">
            <summary>
            Image is the low-level class for loading and
            manipulating images
            </summary>
        </member>
        <member name="M:SFML.Graphics.Image.#ctor">
            <summary>
            Default constructor (invalid image)
            </summary>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Image.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Construct the image with black color
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Image.#ctor(System.UInt32,System.UInt32,SFML.Graphics.Color)">
            <summary>
            Construct the image from a single color
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="color">Color to fill the image with</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Image.#ctor(System.String)">
            <summary>
            Construct the image from a file
            </summary>
            <param name="filename">Path of the image file to load</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Image.EnsureLoaded(System.String)">
            <summary>
            Reloads the asset from file if it is not loaded.
            </summary>
            <param name="filename">Path of the image file to load</param>
            <returns>True if already loaded; false if it had to load.</returns>
        </member>
        <member name="M:SFML.Graphics.Image.#ctor(System.IO.Stream)">
            <summary>
            Construct the image from a file in a stream
            </summary>
            <param name="stream">Stream containing the file contents</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Image.#ctor(SFML.Graphics.Color[0:,0:])">
            <summary>
            Construct the image directly from an array of pixels
            </summary>
            <param name="pixels">2 dimensions array containing the pixels</param>
            <exception cref="T:SFML.LoadingFailedException"/>
        </member>
        <member name="M:SFML.Graphics.Image.SaveToFile(System.String)">
            <summary>
            Save the contents of the image to a file
            </summary>
            <param name="filename">Path of the file to save (overwritten if already exist)</param>
            <returns>True if saving was successful</returns>
        </member>
        <member name="M:SFML.Graphics.Image.CreateMaskFromColor(SFML.Graphics.Color)">
            <summary>
            Create a transparency mask from a specified colorkey
            </summary>
            <param name="color">Color to become transparent</param>
        </member>
        <member name="M:SFML.Graphics.Image.CreateMaskFromColor(SFML.Graphics.Color,System.Byte)">
            <summary>
            Create a transparency mask from a specified colorkey
            </summary>
            <param name="color">Color to become transparent</param>
            <param name="alpha">Alpha value to use for transparent pixels</param>
        </member>
        <member name="M:SFML.Graphics.Image.Copy(SFML.Graphics.Image,System.UInt32,System.UInt32)">
            <summary>
            Copy pixels from another image onto this one.
            This function does a slow pixel copy and should only
            be used at initialization time
            </summary>
            <param name="source">Source image to copy</param>
            <param name="destX">X coordinate of the destination position</param>
            <param name="destY">Y coordinate of the destination position</param>
        </member>
        <member name="M:SFML.Graphics.Image.Copy(SFML.Graphics.Image,System.UInt32,System.UInt32,SFML.Graphics.IntRect)">
            <summary>
            Copy pixels from another image onto this one.
            This function does a slow pixel copy and should only
            be used at initialization time
            </summary>
            <param name="source">Source image to copy</param>
            <param name="destX">X coordinate of the destination position</param>
            <param name="destY">Y coordinate of the destination position</param>
            <param name="sourceRect">Sub-rectangle of the source image to copy</param>
        </member>
        <member name="M:SFML.Graphics.Image.CopyScreen(SFML.Graphics.RenderWindow)">
            <summary>
            Create the image from the current contents of the
            given window
            </summary>
            <param name="window">Window to capture</param>
            <returns>True if copy has been successful</returns>
        </member>
        <member name="M:SFML.Graphics.Image.CopyScreen(SFML.Graphics.RenderWindow,SFML.Graphics.IntRect)">
            <summary>
            Create the image from the current contents of the
            given window
            </summary>
            <param name="window">Window to capture</param>
            <param name="sourceRect">Sub-rectangle of the screen to copy</param>
            <returns>True if copy has been successful</returns>
        </member>
        <member name="M:SFML.Graphics.Image.GetPixel(System.UInt32,System.UInt32)">
            <summary>
            Get a pixel from the image
            </summary>
            <param name="x">X coordinate of pixel in the image</param>
            <param name="y">Y coordinate of pixel in the image</param>
            <returns>Color of pixel (x, y)</returns>
        </member>
        <member name="M:SFML.Graphics.Image.SetPixel(System.UInt32,System.UInt32,SFML.Graphics.Color)">
            <summary>
            Change the color of a pixel
            </summary>
            <param name="x">X coordinate of pixel in the image</param>
            <param name="y">Y coordinate of pixel in the image</param>
            <param name="color">New color for pixel (x, y)</param>
        </member>
        <member name="M:SFML.Graphics.Image.Bind">
            <summary>
            Bind the image for rendering
            </summary>
        </member>
        <member name="M:SFML.Graphics.Image.#ctor(System.IntPtr)">
            <summary>
            Internal constructor
            </summary>
            <param name="thisPtr">Pointer to the object in C library</param>
        </member>
        <member name="M:SFML.Graphics.Image.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="P:SFML.Graphics.Image.Pixels">
            <summary>
            Get a copy of the array of pixels (RGBA 8 bits integers components)
            Array size is Width x Height x 4
            </summary>
            <returns>Array of pixels</returns>
        </member>
        <member name="P:SFML.Graphics.Image.Smooth">
            <summary>
            Control the smooth filter
            </summary>
        </member>
        <member name="P:SFML.Graphics.Image.Width">
            <summary>
            Width of the image, in pixels
            </summary>
        </member>
        <member name="P:SFML.Graphics.Image.Height">
            <summary>
            Height of the image, in pixels
            </summary>
        </member>
        <member name="T:SFML.Graphics.Vector4">
            <summary>Defines a vector with four components.</summary>
        </member>
        <member name="F:SFML.Graphics.Vector4.X">
            <summary>Gets or sets the x-component of the vector.</summary>
        </member>
        <member name="F:SFML.Graphics.Vector4.Y">
            <summary>Gets or sets the y-component of the vector.</summary>
        </member>
        <member name="F:SFML.Graphics.Vector4.Z">
            <summary>Gets or sets the z-component of the vector.</summary>
        </member>
        <member name="F:SFML.Graphics.Vector4.W">
            <summary>Gets or sets the w-component of the vector.</summary>
        </member>
        <member name="M:SFML.Graphics.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>Initializes a new instance of Vector4.</summary>
            <param name="x">Initial value for the x-component of the vector.</param>
            <param name="y">Initial value for the y-component of the vector.</param>
            <param name="z">Initial value for the z-component of the vector.</param>
            <param name="w">Initial value for the w-component of the vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.#ctor(SFML.Graphics.Vector2,System.Single,System.Single)">
            <summary>Initializes a new instance of Vector4.</summary>
            <param name="value">A vector containing the values to initialize x and y components with.</param>
            <param name="z">Initial value for the z-component of the vector.</param>
            <param name="w">Initial value for the w-component of the vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.#ctor(SFML.Graphics.Vector3,System.Single)">
            <summary>Initializes a new instance of Vector4.</summary>
            <param name="value">A vector containing the values to initialize x, y, and z components with.</param>
            <param name="w">Initial value for the w-component of the vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.#ctor(System.Single)">
            <summary>Creates a new instance of Vector4.</summary>
            <param name="value">Value to initialize each component to.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.ToString">
            <summary>Retrieves a string representation of the current object.</summary>
        </member>
        <member name="M:SFML.Graphics.Vector4.Equals(SFML.Graphics.Vector4)">
            <summary>Determines whether the specified Object is equal to the Vector4.</summary>
            <param name="other">The Vector4 to compare with the current Vector4.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Equals(System.Object)">
            <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
            <param name="obj">Object with which to make the comparison.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.GetHashCode">
            <summary>Gets the hash code of this object.</summary>
        </member>
        <member name="M:SFML.Graphics.Vector4.Length">
            <summary>Calculates the length of the vector.</summary>
        </member>
        <member name="M:SFML.Graphics.Vector4.LengthSquared">
            <summary>Calculates the length of the vector squared.</summary>
        </member>
        <member name="M:SFML.Graphics.Vector4.Distance(SFML.Graphics.Vector4,SFML.Graphics.Vector4)">
            <summary>Calculates the distance between two vectors.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Distance(SFML.Graphics.Vector4@,SFML.Graphics.Vector4@,System.Single@)">
            <summary>Calculates the distance between two vectors.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] The distance between the vectors.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.DistanceSquared(SFML.Graphics.Vector4,SFML.Graphics.Vector4)">
            <summary>Calculates the distance between two vectors squared.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.DistanceSquared(SFML.Graphics.Vector4@,SFML.Graphics.Vector4@,System.Single@)">
            <summary>Calculates the distance between two vectors squared.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] The distance between the two vectors squared.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Dot(SFML.Graphics.Vector4,SFML.Graphics.Vector4)">
            <summary>Calculates the dot product of two vectors.</summary>
            <param name="vector1">Source vector.</param>
            <param name="vector2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Dot(SFML.Graphics.Vector4@,SFML.Graphics.Vector4@,System.Single@)">
            <summary>Calculates the dot product of two vectors.</summary>
            <param name="vector1">Source vector.</param>
            <param name="vector2">Source vector.</param>
            <param name="result">[OutAttribute] The dot product of the two vectors.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Normalize">
            <summary>Turns the current vector into a unit vector.</summary>
        </member>
        <member name="M:SFML.Graphics.Vector4.Normalize(SFML.Graphics.Vector4)">
            <summary>Creates a unit vector from the specified vector.</summary>
            <param name="vector">The source Vector4.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Normalize(SFML.Graphics.Vector4@,SFML.Graphics.Vector4@)">
            <summary>Returns a normalized version of the specified vector.</summary>
            <param name="vector">Source vector.</param>
            <param name="result">[OutAttribute] The normalized vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Min(SFML.Graphics.Vector4,SFML.Graphics.Vector4)">
            <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Min(SFML.Graphics.Vector4@,SFML.Graphics.Vector4@,SFML.Graphics.Vector4@)">
            <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] The minimized vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Max(SFML.Graphics.Vector4,SFML.Graphics.Vector4)">
            <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Max(SFML.Graphics.Vector4@,SFML.Graphics.Vector4@,SFML.Graphics.Vector4@)">
            <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] The maximized vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Clamp(SFML.Graphics.Vector4,SFML.Graphics.Vector4,SFML.Graphics.Vector4)">
            <summary>Restricts a value to be within a specified range.</summary>
            <param name="value1">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Clamp(SFML.Graphics.Vector4@,SFML.Graphics.Vector4@,SFML.Graphics.Vector4@,SFML.Graphics.Vector4@)">
            <summary>Restricts a value to be within a specified range.</summary>
            <param name="value1">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">[OutAttribute] The clamped value.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Lerp(SFML.Graphics.Vector4,SFML.Graphics.Vector4,System.Single)">
            <summary>Performs a linear interpolation between two vectors.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Lerp(SFML.Graphics.Vector4@,SFML.Graphics.Vector4@,System.Single,SFML.Graphics.Vector4@)">
            <summary>Performs a linear interpolation between two vectors.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <param name="result">[OutAttribute] The result of the interpolation.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Barycentric(SFML.Graphics.Vector4,SFML.Graphics.Vector4,SFML.Graphics.Vector4,System.Single,System.Single)">
            <summary>Returns a Vector4 containing the 4D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 4D triangle.</summary>
            <param name="value1">A Vector4 containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A Vector4 containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A Vector4 containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Barycentric(SFML.Graphics.Vector4@,SFML.Graphics.Vector4@,SFML.Graphics.Vector4@,System.Single,System.Single,SFML.Graphics.Vector4@)">
            <summary>Returns a Vector4 containing the 4D Cartesian coordinates of a point specified in Barycentric (areal) coordinates relative to a 4D triangle.</summary>
            <param name="value1">A Vector4 containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A Vector4 containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A Vector4 containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
            <param name="result">[OutAttribute] The 4D Cartesian coordinates of the specified point are placed in this Vector4 on exit.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.SmoothStep(SFML.Graphics.Vector4,SFML.Graphics.Vector4,System.Single)">
            <summary>Interpolates between two values using a cubic equation.</summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Weighting value.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.SmoothStep(SFML.Graphics.Vector4@,SFML.Graphics.Vector4@,System.Single,SFML.Graphics.Vector4@)">
            <summary>Interpolates between two values using a cubic equation.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">[OutAttribute] The interpolated value.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.CatmullRom(SFML.Graphics.Vector4,SFML.Graphics.Vector4,SFML.Graphics.Vector4,SFML.Graphics.Vector4,System.Single)">
            <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.CatmullRom(SFML.Graphics.Vector4@,SFML.Graphics.Vector4@,SFML.Graphics.Vector4@,SFML.Graphics.Vector4@,System.Single,SFML.Graphics.Vector4@)">
            <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">[OutAttribute] A vector that is the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Hermite(SFML.Graphics.Vector4,SFML.Graphics.Vector4,SFML.Graphics.Vector4,SFML.Graphics.Vector4,System.Single)">
            <summary>Performs a Hermite spline interpolation.</summary>
            <param name="value1">Source position vector.</param>
            <param name="tangent1">Source tangent vector.</param>
            <param name="value2">Source position vector.</param>
            <param name="tangent2">Source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Hermite(SFML.Graphics.Vector4@,SFML.Graphics.Vector4@,SFML.Graphics.Vector4@,SFML.Graphics.Vector4@,System.Single,SFML.Graphics.Vector4@)">
            <summary>Performs a Hermite spline interpolation.</summary>
            <param name="value1">Source position vector.</param>
            <param name="tangent1">Source tangent vector.</param>
            <param name="value2">Source position vector.</param>
            <param name="tangent2">Source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">[OutAttribute] The result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Transform(SFML.Graphics.Vector2,SFML.Graphics.Matrix)">
            <summary>Transforms a Vector2 by the given Matrix.</summary>
            <param name="position">The source Vector2.</param>
            <param name="matrix">The transformation Matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Transform(SFML.Graphics.Vector2@,SFML.Graphics.Matrix@,SFML.Graphics.Vector4@)">
            <summary>Transforms a Vector2 by the given Matrix.</summary>
            <param name="position">The source Vector2.</param>
            <param name="matrix">The transformation Matrix.</param>
            <param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Transform(SFML.Graphics.Vector3,SFML.Graphics.Matrix)">
            <summary>Transforms a Vector3 by the given Matrix.</summary>
            <param name="position">The source Vector3.</param>
            <param name="matrix">The transformation Matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Transform(SFML.Graphics.Vector3@,SFML.Graphics.Matrix@,SFML.Graphics.Vector4@)">
            <summary>Transforms a Vector3 by the given Matrix.</summary>
            <param name="position">The source Vector3.</param>
            <param name="matrix">The transformation Matrix.</param>
            <param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Transform(SFML.Graphics.Vector4,SFML.Graphics.Matrix)">
            <summary>Transforms a Vector4 by the specified Matrix.</summary>
            <param name="vector">The source Vector4.</param>
            <param name="matrix">The transformation Matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Transform(SFML.Graphics.Vector4@,SFML.Graphics.Matrix@,SFML.Graphics.Vector4@)">
            <summary>Transforms a Vector4 by the given Matrix.</summary>
            <param name="vector">The source Vector4.</param>
            <param name="matrix">The transformation Matrix.</param>
            <param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Transform(SFML.Graphics.Vector2,SFML.Graphics.Quaternion)">
            <summary>Transforms a Vector2 by a specified Quaternion into a Vector4.</summary>
            <param name="value">The Vector2 to transform.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Transform(SFML.Graphics.Vector2@,SFML.Graphics.Quaternion@,SFML.Graphics.Vector4@)">
            <summary>Transforms a Vector2 by a specified Quaternion into a Vector4.</summary>
            <param name="value">The Vector2 to transform.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Transform(SFML.Graphics.Vector3,SFML.Graphics.Quaternion)">
            <summary>Transforms a Vector3 by a specified Quaternion into a Vector4.</summary>
            <param name="value">The Vector3 to transform.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Transform(SFML.Graphics.Vector3@,SFML.Graphics.Quaternion@,SFML.Graphics.Vector4@)">
            <summary>Transforms a Vector3 by a specified Quaternion into a Vector4.</summary>
            <param name="value">The Vector3 to transform.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Transform(SFML.Graphics.Vector4,SFML.Graphics.Quaternion)">
            <summary>Transforms a Vector4 by a specified Quaternion.</summary>
            <param name="value">The Vector4 to transform.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Transform(SFML.Graphics.Vector4@,SFML.Graphics.Quaternion@,SFML.Graphics.Vector4@)">
            <summary>Transforms a Vector4 by a specified Quaternion.</summary>
            <param name="value">The Vector4 to transform.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <param name="result">[OutAttribute] The Vector4 resulting from the transformation.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Transform(SFML.Graphics.Vector4[],SFML.Graphics.Matrix@,SFML.Graphics.Vector4[])">
            <summary>Transforms an array of Vector4s by a specified Matrix.</summary>
            <param name="sourceArray">The array of Vector4s to transform.</param>
            <param name="matrix">The transform Matrix to apply.</param>
            <param name="destinationArray">The existing destination array into which the transformed Vector4s are written.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Transform(SFML.Graphics.Vector4[],System.Int32,SFML.Graphics.Matrix@,SFML.Graphics.Vector4[],System.Int32,System.Int32)">
            <summary>Transforms a specified range in an array of Vector4s by a specified Matrix into a specified range in a destination array.</summary>
            <param name="sourceArray">The array of Vector4s containing the range to transform.</param>
            <param name="sourceIndex">The index in the source array of the first Vector4 to transform.</param>
            <param name="matrix">The transform Matrix to apply.</param>
            <param name="destinationArray">The existing destination array of Vector4s into which to write the results.</param>
            <param name="destinationIndex">The index in the destination array of the first result Vector4 to write.</param>
            <param name="length">The number of Vector4s to transform.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Transform(SFML.Graphics.Vector4[],SFML.Graphics.Quaternion@,SFML.Graphics.Vector4[])">
            <summary>Transforms an array of Vector4s by a specified Quaternion.</summary>
            <param name="sourceArray">The array of Vector4s to transform.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <param name="destinationArray">The existing destination array into which the transformed Vector4s are written.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Transform(SFML.Graphics.Vector4[],System.Int32,SFML.Graphics.Quaternion@,SFML.Graphics.Vector4[],System.Int32,System.Int32)">
            <summary>Transforms a specified range in an array of Vector4s by a specified Quaternion into a specified range in a destination array.</summary>
            <param name="sourceArray">The array of Vector4s containing the range to transform.</param>
            <param name="sourceIndex">The index in the source array of the first Vector4 to transform.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <param name="destinationArray">The existing destination array of Vector4s into which to write the results.</param>
            <param name="destinationIndex">The index in the destination array of the first result Vector4 to write.</param>
            <param name="length">The number of Vector4s to transform.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Negate(SFML.Graphics.Vector4)">
            <summary>Returns a vector pointing in the opposite direction.</summary>
            <param name="value">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Negate(SFML.Graphics.Vector4@,SFML.Graphics.Vector4@)">
            <summary>Returns a vector pointing in the opposite direction.</summary>
            <param name="value">Source vector.</param>
            <param name="result">[OutAttribute] Vector pointing in the opposite direction.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Add(SFML.Graphics.Vector4,SFML.Graphics.Vector4)">
            <summary>Adds two vectors.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Add(SFML.Graphics.Vector4@,SFML.Graphics.Vector4@,SFML.Graphics.Vector4@)">
            <summary>Adds two vectors.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] Sum of the source vectors.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Subtract(SFML.Graphics.Vector4,SFML.Graphics.Vector4)">
            <summary>Subtracts a vector from a vector.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Subtract(SFML.Graphics.Vector4@,SFML.Graphics.Vector4@,SFML.Graphics.Vector4@)">
            <summary>Subtracts a vector from a vector.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] The result of the subtraction.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Multiply(SFML.Graphics.Vector4,SFML.Graphics.Vector4)">
            <summary>Multiplies the components of two vectors by each other.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Multiply(SFML.Graphics.Vector4@,SFML.Graphics.Vector4@,SFML.Graphics.Vector4@)">
            <summary>Multiplies the components of two vectors by each other.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Multiply(SFML.Graphics.Vector4,System.Single)">
            <summary>Multiplies a vector by a scalar.</summary>
            <param name="value1">Source vector.</param>
            <param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Multiply(SFML.Graphics.Vector4@,System.Single,SFML.Graphics.Vector4@)">
            <summary>Multiplies a vector by a scalar value.</summary>
            <param name="value1">Source vector.</param>
            <param name="scaleFactor">Scalar value.</param>
            <param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Divide(SFML.Graphics.Vector4,SFML.Graphics.Vector4)">
            <summary>Divides the components of a vector by the components of another vector.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Divisor vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Divide(SFML.Graphics.Vector4@,SFML.Graphics.Vector4@,SFML.Graphics.Vector4@)">
            <summary>Divides the components of a vector by the components of another vector.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">The divisor.</param>
            <param name="result">[OutAttribute] The result of the division.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Divide(SFML.Graphics.Vector4,System.Single)">
            <summary>Divides a vector by a scalar value.</summary>
            <param name="value1">Source vector.</param>
            <param name="divider">The divisor.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.Divide(SFML.Graphics.Vector4@,System.Single,SFML.Graphics.Vector4@)">
            <summary>Divides a vector by a scalar value.</summary>
            <param name="value1">Source vector.</param>
            <param name="divider">The divisor.</param>
            <param name="result">[OutAttribute] The result of the division.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.op_UnaryNegation(SFML.Graphics.Vector4)">
            <summary>Returns a vector pointing in the opposite direction.</summary>
            <param name="value">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.op_Equality(SFML.Graphics.Vector4,SFML.Graphics.Vector4)">
            <summary>Tests vectors for equality.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.op_Inequality(SFML.Graphics.Vector4,SFML.Graphics.Vector4)">
            <summary>Tests vectors for inequality.</summary>
            <param name="value1">Vector to compare.</param>
            <param name="value2">Vector to compare.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.op_Addition(SFML.Graphics.Vector4,SFML.Graphics.Vector4)">
            <summary>Adds two vectors.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.op_Subtraction(SFML.Graphics.Vector4,SFML.Graphics.Vector4)">
            <summary>Subtracts a vector from a vector.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.op_Multiply(SFML.Graphics.Vector4,SFML.Graphics.Vector4)">
            <summary>Multiplies the components of two vectors by each other.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.op_Multiply(SFML.Graphics.Vector4,System.Single)">
            <summary>Multiplies a vector by a scalar.</summary>
            <param name="value1">Source vector.</param>
            <param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.op_Multiply(System.Single,SFML.Graphics.Vector4)">
            <summary>Multiplies a vector by a scalar.</summary>
            <param name="scaleFactor">Scalar value.</param>
            <param name="value1">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.op_Division(SFML.Graphics.Vector4,SFML.Graphics.Vector4)">
            <summary>Divides the components of a vector by the components of another vector.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Divisor vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector4.op_Division(SFML.Graphics.Vector4,System.Single)">
            <summary>Divides a vector by a scalar value.</summary>
            <param name="value1">Source vector.</param>
            <param name="divider">The divisor.</param>
        </member>
        <member name="P:SFML.Graphics.Vector4.Zero">
            <summary>Returns a Vector4 with all of its components set to zero.</summary>
        </member>
        <member name="P:SFML.Graphics.Vector4.One">
            <summary>Returns a Vector4 with all of its components set to one.</summary>
        </member>
        <member name="P:SFML.Graphics.Vector4.UnitX">
            <summary>Returns the Vector4 (1, 0, 0, 0).</summary>
        </member>
        <member name="P:SFML.Graphics.Vector4.UnitY">
            <summary>Returns the Vector4 (0, 1, 0, 0).</summary>
        </member>
        <member name="P:SFML.Graphics.Vector4.UnitZ">
            <summary>Returns the Vector4 (0, 0, 1, 0).</summary>
        </member>
        <member name="P:SFML.Graphics.Vector4.UnitW">
            <summary>Returns the Vector4 (0, 0, 0, 1).</summary>
        </member>
        <member name="T:SFML.Graphics.Rectangle">
            <summary>Defines a rectangle.</summary>
        </member>
        <member name="F:SFML.Graphics.Rectangle.X">
            <summary>Specifies the x-coordinate of the rectangle.</summary>
        </member>
        <member name="F:SFML.Graphics.Rectangle.Y">
            <summary>Specifies the y-coordinate of the rectangle.</summary>
        </member>
        <member name="F:SFML.Graphics.Rectangle.Width">
            <summary>Specifies the width of the rectangle.</summary>
        </member>
        <member name="F:SFML.Graphics.Rectangle.Height">
            <summary>Specifies the height of the rectangle.</summary>
        </member>
        <member name="M:SFML.Graphics.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Initializes a new instance of Rectangle.</summary>
            <param name="x">The x-coordinate of the rectangle.</param>
            <param name="y">The y-coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:SFML.Graphics.Rectangle.Offset(SFML.Graphics.Point)">
            <summary>Changes the position of the Rectangle.</summary>
            <param name="amount">The values to adjust the position of the Rectangle by.</param>
        </member>
        <member name="M:SFML.Graphics.Rectangle.Offset(System.Int32,System.Int32)">
            <summary>Changes the position of the Rectangle.</summary>
            <param name="offsetX">Change in the x-position.</param>
            <param name="offsetY">Change in the y-position.</param>
        </member>
        <member name="M:SFML.Graphics.Rectangle.Inflate(System.Int32,System.Int32)">
            <summary>Pushes the edges of the Rectangle out by the horizontal and vertical values specified.</summary>
            <param name="horizontalAmount">Value to push the sides out by.</param>
            <param name="verticalAmount">Value to push the top and bottom out by.</param>
        </member>
        <member name="M:SFML.Graphics.Rectangle.Contains(System.Int32,System.Int32)">
            <summary>Determines whether this Rectangle contains a specified point represented by its x- and y-coordinates.</summary>
            <param name="x">The x-coordinate of the specified point.</param>
            <param name="y">The y-coordinate of the specified point.</param>
        </member>
        <member name="M:SFML.Graphics.Rectangle.Contains(SFML.Graphics.Point)">
            <summary>Determines whether this Rectangle contains a specified Point.</summary>
            <param name="value">The Point to evaluate.</param>
        </member>
        <member name="M:SFML.Graphics.Rectangle.Contains(SFML.Graphics.Point@,System.Boolean@)">
            <summary>Determines whether this Rectangle contains a specified Point.</summary>
            <param name="value">The Point to evaluate.</param>
            <param name="result">[OutAttribute] true if the specified Point is contained within this Rectangle; false otherwise.</param>
        </member>
        <member name="M:SFML.Graphics.Rectangle.Contains(SFML.Graphics.Rectangle)">
            <summary>Determines whether this Rectangle entirely contains a specified Rectangle.</summary>
            <param name="value">The Rectangle to evaluate.</param>
        </member>
        <member name="M:SFML.Graphics.Rectangle.Contains(SFML.Graphics.Rectangle@,System.Boolean@)">
            <summary>Determines whether this Rectangle entirely contains a specified Rectangle.</summary>
            <param name="value">The Rectangle to evaluate.</param>
            <param name="result">[OutAttribute] On exit, is true if this Rectangle entirely contains the specified Rectangle, or false if not.</param>
        </member>
        <member name="M:SFML.Graphics.Rectangle.Intersects(SFML.Graphics.Rectangle)">
            <summary>Determines whether a specified Rectangle intersects with this Rectangle.</summary>
            <param name="value">The Rectangle to evaluate.</param>
        </member>
        <member name="M:SFML.Graphics.Rectangle.Intersects(SFML.Graphics.Rectangle@,System.Boolean@)">
            <summary>Determines whether a specified Rectangle intersects with this Rectangle.</summary>
            <param name="value">The Rectangle to evaluate</param>
            <param name="result">[OutAttribute] true if the specified Rectangle intersects with this one; false otherwise.</param>
        </member>
        <member name="M:SFML.Graphics.Rectangle.Intersect(SFML.Graphics.Rectangle,SFML.Graphics.Rectangle)">
            <summary>Creates a Rectangle defining the area where one rectangle overlaps with another rectangle.</summary>
            <param name="value1">The first Rectangle to compare.</param>
            <param name="value2">The second Rectangle to compare.</param>
        </member>
        <member name="M:SFML.Graphics.Rectangle.Intersect(SFML.Graphics.Rectangle@,SFML.Graphics.Rectangle@,SFML.Graphics.Rectangle@)">
            <summary>Creates a Rectangle defining the area where one rectangle overlaps with another rectangle.</summary>
            <param name="value1">The first Rectangle to compare.</param>
            <param name="value2">The second Rectangle to compare.</param>
            <param name="result">[OutAttribute] The area where the two first parameters overlap.</param>
        </member>
        <member name="M:SFML.Graphics.Rectangle.Union(SFML.Graphics.Rectangle,SFML.Graphics.Rectangle)">
            <summary>Creates a new Rectangle that exactly contains two other rectangles.</summary>
            <param name="value1">The first Rectangle to contain.</param>
            <param name="value2">The second Rectangle to contain.</param>
        </member>
        <member name="M:SFML.Graphics.Rectangle.Union(SFML.Graphics.Rectangle@,SFML.Graphics.Rectangle@,SFML.Graphics.Rectangle@)">
            <summary>Creates a new Rectangle that exactly contains two other rectangles.</summary>
            <param name="value1">The first Rectangle to contain.</param>
            <param name="value2">The second Rectangle to contain.</param>
            <param name="result">[OutAttribute] The Rectangle that must be the union of the first two rectangles.</param>
        </member>
        <member name="M:SFML.Graphics.Rectangle.Equals(SFML.Graphics.Rectangle)">
            <summary>Determines whether the specified Object is equal to the Rectangle.</summary>
            <param name="other">The Object to compare with the current Rectangle.</param>
        </member>
        <member name="M:SFML.Graphics.Rectangle.Equals(System.Object)">
            <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
            <param name="obj">Object to make the comparison with.</param>
        </member>
        <member name="M:SFML.Graphics.Rectangle.ToString">
            <summary>Retrieves a string representation of the current object.</summary>
        </member>
        <member name="M:SFML.Graphics.Rectangle.GetHashCode">
            <summary>Gets the hash code for this object.</summary>
        </member>
        <member name="M:SFML.Graphics.Rectangle.op_Equality(SFML.Graphics.Rectangle,SFML.Graphics.Rectangle)">
            <summary>Compares two rectangles for equality.</summary>
            <param name="a">Source rectangle.</param>
            <param name="b">Source rectangle.</param>
        </member>
        <member name="M:SFML.Graphics.Rectangle.op_Explicit(SFML.Graphics.Rectangle)~SFML.Graphics.IntRect">
            <summary>
            Performs an explicit conversion from <see cref="T:SFML.Graphics.Rectangle"/> to <see cref="T:SFML.Graphics.IntRect"/>.
            </summary>
            <param name="v">The <see cref="T:SFML.Graphics.Rectangle"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SFML.Graphics.Rectangle.op_Explicit(SFML.Graphics.Rectangle)~SFML.Graphics.FloatRect">
            <summary>
            Performs an explicit conversion from <see cref="T:SFML.Graphics.Rectangle"/> to <see cref="T:SFML.Graphics.FloatRect"/>.
            </summary>
            <param name="v">The <see cref="T:SFML.Graphics.Rectangle"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SFML.Graphics.Rectangle.op_Inequality(SFML.Graphics.Rectangle,SFML.Graphics.Rectangle)">
            <summary>Compares two rectangles for inequality.</summary>
            <param name="a">Source rectangle.</param>
            <param name="b">Source rectangle.</param>
        </member>
        <member name="P:SFML.Graphics.Rectangle.Left">
            <summary>Returns the x-coordinate of the left side of the rectangle.</summary>
        </member>
        <member name="P:SFML.Graphics.Rectangle.Right">
            <summary>Returns the x-coordinate of the right side of the rectangle.</summary>
        </member>
        <member name="P:SFML.Graphics.Rectangle.Top">
            <summary>Returns the y-coordinate of the top of the rectangle.</summary>
        </member>
        <member name="P:SFML.Graphics.Rectangle.Bottom">
            <summary>Returns the y-coordinate of the bottom of the rectangle.</summary>
        </member>
        <member name="P:SFML.Graphics.Rectangle.Location">
            <summary>Gets or sets the upper-left value of the Rectangle.</summary>
        </member>
        <member name="P:SFML.Graphics.Rectangle.Center">
            <summary>Gets the Point that specifies the center of the rectangle.</summary>
        </member>
        <member name="P:SFML.Graphics.Rectangle.Empty">
            <summary>Returns a Rectangle with all of its values set to zero.</summary>
        </member>
        <member name="P:SFML.Graphics.Rectangle.IsEmpty">
            <summary>Gets a value that indicates whether the Rectangle is empty.</summary>
        </member>
        <member name="T:SFML.Graphics.Color">
            <summary>
            Utility class for manipulating 32-bits RGBA colors
            </summary>
        </member>
        <member name="M:SFML.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Construct the color from its red, green and blue components
            </summary>
            <param name="red">Red component</param>
            <param name="green">Green component</param>
            <param name="blue">Blue component</param>
        </member>
        <member name="M:SFML.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Construct the color from its red, green, blue and alpha components
            </summary>
            <param name="red">Red component</param>
            <param name="green">Green component</param>
            <param name="blue">Blue component</param>
            <param name="alpha">Alpha (transparency) component</param>
        </member>
        <member name="M:SFML.Graphics.Color.#ctor(SFML.Graphics.Color)">
            <summary>
            Construct the color from another
            </summary>
            <param name="color">Color to copy</param>
        </member>
        <member name="M:SFML.Graphics.Color.#ctor(SFML.Graphics.Color,System.Byte)">
            <summary>Initializes a new instance of Color.</summary>
            <param name="rgb">A Color specifying the red, green, and blue components of a color.</param>
            <param name="a">The alpha component of a color, between 0 and 255.</param>
        </member>
        <member name="F:SFML.Graphics.Color.R">
            <summary>Red component of the color</summary>
        </member>
        <member name="F:SFML.Graphics.Color.G">
            <summary>Green component of the color</summary>
        </member>
        <member name="F:SFML.Graphics.Color.B">
            <summary>Blue component of the color</summary>
        </member>
        <member name="F:SFML.Graphics.Color.A">
            <summary>Alpha (transparent) component of the color</summary>
        </member>
        <member name="M:SFML.Graphics.Color.ToString">
            <summary>Gets a string representation of this object.</summary>
        </member>
        <member name="M:SFML.Graphics.Color.Equals(System.Object)">
            <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
            <param name="obj">The Object to compare with the current Color.</param>
        </member>
        <member name="M:SFML.Graphics.Color.Equals(SFML.Graphics.Color)">
            <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
            <param name="other">The Color to compare with the current Color.</param>
        </member>
        <member name="M:SFML.Graphics.Color.op_Equality(SFML.Graphics.Color,SFML.Graphics.Color)">
            <summary>Compares two objects to determine whether they are the same.</summary>
            <param name="a">The object to the left of the equality operator.</param>
            <param name="b">The object to the right of the equality operator.</param>
        </member>
        <member name="M:SFML.Graphics.Color.op_Inequality(SFML.Graphics.Color,SFML.Graphics.Color)">
            <summary>Compares two objects to determine whether they are different.</summary>
            <param name="a">The object to the left of the equality operator.</param>
            <param name="b">The object to the right of the equality operator.</param>
        </member>
        <member name="M:SFML.Graphics.Color.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SFML.Graphics.Color.Lerp(SFML.Graphics.Color,SFML.Graphics.Color,System.Single)">
            <summary>Linearly interpolates between two colors.</summary>
            <param name="value1">Source Color.</param>
            <param name="value2">Source Color.</param>
            <param name="amount">A value between 0 and 1.0 indicating the weight of value2.</param>
        </member>
        <member name="P:SFML.Graphics.Color.TransparentBlack">
            <summary>Gets a system-defined color with the value R:0 G:0 B:0 A:0.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.TransparentWhite">
            <summary>Gets a system-defined color with the value R:255 G:255 B:255 A:0.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.AliceBlue">
            <summary>Gets a system-defined color with the value R:240 G:248 B:255 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.AntiqueWhite">
            <summary>Gets a system-defined color with the value R:250 G:235 B:215 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Aqua">
            <summary>Gets a system-defined color with the value R:0 G:255 B:255 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Aquamarine">
            <summary>Gets a system-defined color with the value R:127 G:255 B:212 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Azure">
            <summary>Gets a system-defined color with the value R:240 G:255 B:255 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Beige">
            <summary>Gets a system-defined color with the value R:245 G:245 B:220 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Bisque">
            <summary>Gets a system-defined color with the value R:255 G:228 B:196 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Black">
            <summary>Gets a system-defined color with the value R:0 G:0 B:0 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.BlanchedAlmond">
            <summary>Gets a system-defined color with the value R:255 G:235 B:205 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Blue">
            <summary>Gets a system-defined color with the value R:0 G:0 B:255 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.BlueViolet">
            <summary>Gets a system-defined color with the value R:138 G:43 B:226 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Brown">
            <summary>Gets a system-defined color with the value R:165 G:42 B:42 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.BurlyWood">
            <summary>Gets a system-defined color with the value R:222 G:184 B:135 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.CadetBlue">
            <summary>Gets a system-defined color with the value R:95 G:158 B:160 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Chartreuse">
            <summary>Gets a system-defined color with the value R:127 G:255 B:0 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Chocolate">
            <summary>Gets a system-defined color with the value R:210 G:105 B:30 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Coral">
            <summary>Gets a system-defined color with the value R:255 G:127 B:80 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.CornflowerBlue">
            <summary>Gets a system-defined color with the value R:100 G:149 B:237 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Cornsilk">
            <summary>Gets a system-defined color with the value R:255 G:248 B:220 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Crimson">
            <summary>Gets a system-defined color with the value R:220 G:20 B:60 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Cyan">
            <summary>Gets a system-defined color with the value R:0 G:255 B:255 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.DarkBlue">
            <summary>Gets a system-defined color with the value R:0 G:0 B:139 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.DarkCyan">
            <summary>Gets a system-defined color with the value R:0 G:139 B:139 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.DarkGoldenrod">
            <summary>Gets a system-defined color with the value R:184 G:134 B:11 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.DarkGray">
            <summary>Gets a system-defined color with the value R:169 G:169 B:169 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.DarkGreen">
            <summary>Gets a system-defined color with the value R:0 G:100 B:0 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.DarkKhaki">
            <summary>Gets a system-defined color with the value R:189 G:183 B:107 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.DarkMagenta">
            <summary>Gets a system-defined color with the value R:139 G:0 B:139 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.DarkOliveGreen">
            <summary>Gets a system-defined color with the value R:85 G:107 B:47 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.DarkOrange">
            <summary>Gets a system-defined color with the value R:255 G:140 B:0 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.DarkOrchid">
            <summary>Gets a system-defined color with the value R:153 G:50 B:204 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.DarkRed">
            <summary>Gets a system-defined color with the value R:139 G:0 B:0 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.DarkSalmon">
            <summary>Gets a system-defined color with the value R:233 G:150 B:122 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.DarkSeaGreen">
            <summary>Gets a system-defined color with the value R:143 G:188 B:139 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.DarkSlateBlue">
            <summary>Gets a system-defined color with the value R:72 G:61 B:139 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.DarkSlateGray">
            <summary>Gets a system-defined color with the value R:47 G:79 B:79 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.DarkTurquoise">
            <summary>Gets a system-defined color with the value R:0 G:206 B:209 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.DarkViolet">
            <summary>Gets a system-defined color with the value R:148 G:0 B:211 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.DeepPink">
            <summary>Gets a system-defined color with the value R:255 G:20 B:147 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.DeepSkyBlue">
            <summary>Gets a system-defined color with the value R:0 G:191 B:255 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.DimGray">
            <summary>Gets a system-defined color with the value R:105 G:105 B:105 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.DodgerBlue">
            <summary>Gets a system-defined color with the value R:30 G:144 B:255 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Firebrick">
            <summary>Gets a system-defined color with the value R:178 G:34 B:34 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.FloralWhite">
            <summary>Gets a system-defined color with the value R:255 G:250 B:240 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.ForestGreen">
            <summary>Gets a system-defined color with the value R:34 G:139 B:34 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Fuchsia">
            <summary>Gets a system-defined color with the value R:255 G:0 B:255 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Gainsboro">
            <summary>Gets a system-defined color with the value R:220 G:220 B:220 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.GhostWhite">
            <summary>Gets a system-defined color with the value R:248 G:248 B:255 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Gold">
            <summary>Gets a system-defined color with the value R:255 G:215 B:0 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Goldenrod">
            <summary>Gets a system-defined color with the value R:218 G:165 B:32 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Gray">
            <summary>Gets a system-defined color with the value R:128 G:128 B:128 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Green">
            <summary>Gets a system-defined color with the value R:0 G:128 B:0 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.GreenYellow">
            <summary>Gets a system-defined color with the value R:173 G:255 B:47 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Honeydew">
            <summary>Gets a system-defined color with the value R:240 G:255 B:240 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.HotPink">
            <summary>Gets a system-defined color with the value R:255 G:105 B:180 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.IndianRed">
            <summary>Gets a system-defined color with the value R:205 G:92 B:92 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Indigo">
            <summary>Gets a system-defined color with the value R:75 G:0 B:130 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Ivory">
            <summary>Gets a system-defined color with the value R:255 G:255 B:240 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Khaki">
            <summary>Gets a system-defined color with the value R:240 G:230 B:140 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Lavender">
            <summary>Gets a system-defined color with the value R:230 G:230 B:250 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.LavenderBlush">
            <summary>Gets a system-defined color with the value R:255 G:240 B:245 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.LawnGreen">
            <summary>Gets a system-defined color with the value R:124 G:252 B:0 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.LemonChiffon">
            <summary>Gets a system-defined color with the value R:255 G:250 B:205 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.LightBlue">
            <summary>Gets a system-defined color with the value R:173 G:216 B:230 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.LightCoral">
            <summary>Gets a system-defined color with the value R:240 G:128 B:128 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.LightCyan">
            <summary>Gets a system-defined color with the value R:224 G:255 B:255 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.LightGoldenrodYellow">
            <summary>Gets a system-defined color with the value R:250 G:250 B:210 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.LightGreen">
            <summary>Gets a system-defined color with the value R:144 G:238 B:144 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.LightGray">
            <summary>Gets a system-defined color with the value R:211 G:211 B:211 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.LightPink">
            <summary>Gets a system-defined color with the value R:255 G:182 B:193 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.LightSalmon">
            <summary>Gets a system-defined color with the value R:255 G:160 B:122 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.LightSeaGreen">
            <summary>Gets a system-defined color with the value R:32 G:178 B:170 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.LightSkyBlue">
            <summary>Gets a system-defined color with the value R:135 G:206 B:250 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.LightSlateGray">
            <summary>Gets a system-defined color with the value R:119 G:136 B:153 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.LightSteelBlue">
            <summary>Gets a system-defined color with the value R:176 G:196 B:222 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.LightYellow">
            <summary>Gets a system-defined color with the value R:255 G:255 B:224 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Lime">
            <summary>Gets a system-defined color with the value R:0 G:255 B:0 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.LimeGreen">
            <summary>Gets a system-defined color with the value R:50 G:205 B:50 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Linen">
            <summary>Gets a system-defined color with the value R:250 G:240 B:230 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Magenta">
            <summary>Gets a system-defined color with the value R:255 G:0 B:255 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Maroon">
            <summary>Gets a system-defined color with the value R:128 G:0 B:0 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.MediumAquamarine">
            <summary>Gets a system-defined color with the value R:102 G:205 B:170 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.MediumBlue">
            <summary>Gets a system-defined color with the value R:0 G:0 B:205 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.MediumOrchid">
            <summary>Gets a system-defined color with the value R:186 G:85 B:211 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.MediumPurple">
            <summary>Gets a system-defined color with the value R:147 G:112 B:219 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.MediumSeaGreen">
            <summary>Gets a system-defined color with the value R:60 G:179 B:113 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.MediumSlateBlue">
            <summary>Gets a system-defined color with the value R:123 G:104 B:238 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.MediumSpringGreen">
            <summary>Gets a system-defined color with the value R:0 G:250 B:154 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.MediumTurquoise">
            <summary>Gets a system-defined color with the value R:72 G:209 B:204 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.MediumVioletRed">
            <summary>Gets a system-defined color with the value R:199 G:21 B:133 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.MidnightBlue">
            <summary>Gets a system-defined color with the value R:25 G:25 B:112 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.MintCream">
            <summary>Gets a system-defined color with the value R:245 G:255 B:250 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.MistyRose">
            <summary>Gets a system-defined color with the value R:255 G:228 B:225 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Moccasin">
            <summary>Gets a system-defined color with the value R:255 G:228 B:181 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.NavajoWhite">
            <summary>Gets a system-defined color with the value R:255 G:222 B:173 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Navy">
            <summary>Gets a system-defined color R:0 G:0 B:128 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.OldLace">
            <summary>Gets a system-defined color with the value R:253 G:245 B:230 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Olive">
            <summary>Gets a system-defined color with the value R:128 G:128 B:0 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.OliveDrab">
            <summary>Gets a system-defined color with the value R:107 G:142 B:35 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Orange">
            <summary>Gets a system-defined color with the value R:255 G:165 B:0 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.OrangeRed">
            <summary>Gets a system-defined color with the value R:255 G:69 B:0 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Orchid">
            <summary>Gets a system-defined color with the value R:218 G:112 B:214 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.PaleGoldenrod">
            <summary>Gets a system-defined color with the value R:238 G:232 B:170 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.PaleGreen">
            <summary>Gets a system-defined color with the value R:152 G:251 B:152 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.PaleTurquoise">
            <summary>Gets a system-defined color with the value R:175 G:238 B:238 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.PaleVioletRed">
            <summary>Gets a system-defined color with the value R:219 G:112 B:147 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.PapayaWhip">
            <summary>Gets a system-defined color with the value R:255 G:239 B:213 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.PeachPuff">
            <summary>Gets a system-defined color with the value R:255 G:218 B:185 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Peru">
            <summary>Gets a system-defined color with the value R:205 G:133 B:63 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Pink">
            <summary>Gets a system-defined color with the value R:255 G:192 B:203 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Plum">
            <summary>Gets a system-defined color with the value R:221 G:160 B:221 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.PowderBlue">
            <summary>Gets a system-defined color with the value R:176 G:224 B:230 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Purple">
            <summary>Gets a system-defined color with the value R:128 G:0 B:128 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Red">
            <summary>Gets a system-defined color with the value R:255 G:0 B:0 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.RosyBrown">
            <summary>Gets a system-defined color with the value R:188 G:143 B:143 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.RoyalBlue">
            <summary>Gets a system-defined color with the value R:65 G:105 B:225 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.SaddleBrown">
            <summary>Gets a system-defined color with the value R:139 G:69 B:19 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Salmon">
            <summary>Gets a system-defined color with the value R:250 G:128 B:114 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.SandyBrown">
            <summary>Gets a system-defined color with the value R:244 G:164 B:96 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.SeaGreen">
            <summary>Gets a system-defined color with the value R:46 G:139 B:87 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.SeaShell">
            <summary>Gets a system-defined color with the value R:255 G:245 B:238 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Sienna">
            <summary>Gets a system-defined color with the value R:160 G:82 B:45 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Silver">
            <summary>Gets a system-defined color with the value R:192 G:192 B:192 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.SkyBlue">
            <summary>Gets a system-defined color with the value R:135 G:206 B:235 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.SlateBlue">
            <summary>Gets a system-defined color with the value R:106 G:90 B:205 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.SlateGray">
            <summary>Gets a system-defined color with the value R:112 G:128 B:144 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Snow">
            <summary>Gets a system-defined color with the value R:255 G:250 B:250 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.SpringGreen">
            <summary>Gets a system-defined color with the value R:0 G:255 B:127 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.SteelBlue">
            <summary>Gets a system-defined color with the value R:70 G:130 B:180 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Tan">
            <summary>Gets a system-defined color with the value R:210 G:180 B:140 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Teal">
            <summary>Gets a system-defined color with the value R:0 G:128 B:128 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Thistle">
            <summary>Gets a system-defined color with the value R:216 G:191 B:216 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Tomato">
            <summary>Gets a system-defined color with the value R:255 G:99 B:71 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Turquoise">
            <summary>Gets a system-defined color with the value R:64 G:224 B:208 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Violet">
            <summary>Gets a system-defined color with the value R:238 G:130 B:238 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Wheat">
            <summary>Gets a system-defined color with the value R:245 G:222 B:179 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.White">
            <summary>Gets a system-defined color with the value R:255 G:255 B:255 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.WhiteSmoke">
            <summary>Gets a system-defined color with the value R:245 G:245 B:245 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.Yellow">
            <summary>Gets a system-defined color with the value R:255 G:255 B:0 A:255.</summary>
        </member>
        <member name="P:SFML.Graphics.Color.YellowGreen">
            <summary>Gets a system-defined color with the value R:154 G:205 B:50 A:255.</summary>
        </member>
        <member name="T:SFML.Graphics.Vector3">
            <summary>Defines a vector with three components.</summary>
        </member>
        <member name="F:SFML.Graphics.Vector3.X">
            <summary>Gets or sets the x-component of the vector.</summary>
        </member>
        <member name="F:SFML.Graphics.Vector3.Y">
            <summary>Gets or sets the y-component of the vector.</summary>
        </member>
        <member name="F:SFML.Graphics.Vector3.Z">
            <summary>Gets or sets the z-component of the vector.</summary>
        </member>
        <member name="M:SFML.Graphics.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>Initializes a new instance of Vector3.</summary>
            <param name="x">Initial value for the x-component of the vector.</param>
            <param name="y">Initial value for the y-component of the vector.</param>
            <param name="z">Initial value for the z-component of the vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.#ctor(System.Single)">
            <summary>Creates a new instance of Vector3.</summary>
            <param name="value">Value to initialize each component to.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.#ctor(SFML.Graphics.Vector2,System.Single)">
            <summary>Initializes a new instance of Vector3.</summary>
            <param name="value">A vector containing the values to initialize x and y components with.</param>
            <param name="z">Initial value for the z-component of the vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.ToString">
            <summary>Retrieves a string representation of the current object.</summary>
        </member>
        <member name="M:SFML.Graphics.Vector3.Equals(SFML.Graphics.Vector3)">
            <summary>Determines whether the specified Object is equal to the Vector3.</summary>
            <param name="other">The Vector3 to compare with the current Vector3.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Equals(System.Object)">
            <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
            <param name="obj">Object to make the comparison with.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.GetHashCode">
            <summary>Gets the hash code of the vector object.</summary>
        </member>
        <member name="M:SFML.Graphics.Vector3.Length">
            <summary>Calculates the length of the vector.</summary>
        </member>
        <member name="M:SFML.Graphics.Vector3.LengthSquared">
            <summary>Calculates the length of the vector squared.</summary>
        </member>
        <member name="M:SFML.Graphics.Vector3.Distance(SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Calculates the distance between two vectors.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Distance(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,System.Single@)">
            <summary>Calculates the distance between two vectors.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] The distance between the vectors.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.DistanceSquared(SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Calculates the distance between two vectors squared.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.DistanceSquared(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,System.Single@)">
            <summary>Calculates the distance between two vectors squared.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] The distance between the two vectors squared.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Dot(SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Calculates the dot product of two vectors. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.</summary>
            <param name="vector1">Source vector.</param>
            <param name="vector2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Dot(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,System.Single@)">
            <summary>Calculates the dot product of two vectors and writes the result to a user-specified variable. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.</summary>
            <param name="vector1">Source vector.</param>
            <param name="vector2">Source vector.</param>
            <param name="result">[OutAttribute] The dot product of the two vectors.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Normalize">
            <summary>Turns the current vector into a unit vector. The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
        </member>
        <member name="M:SFML.Graphics.Vector3.Normalize(SFML.Graphics.Vector3)">
            <summary>Creates a unit vector from the specified vector. The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
            <param name="value">The source Vector3.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Normalize(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@)">
            <summary>Creates a unit vector from the specified vector, writing the result to a user-specified variable. The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
            <param name="value">Source vector.</param>
            <param name="result">[OutAttribute] The normalized vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Cross(SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Calculates the cross product of two vectors.</summary>
            <param name="vector1">Source vector.</param>
            <param name="vector2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Cross(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,SFML.Graphics.Vector3@)">
            <summary>Calculates the cross product of two vectors.</summary>
            <param name="vector1">Source vector.</param>
            <param name="vector2">Source vector.</param>
            <param name="result">[OutAttribute] The cross product of the vectors.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Reflect(SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Returns the reflection of a vector off a surface that has the specified normal.  Reference page contains code sample.</summary>
            <param name="vector">Source vector.</param>
            <param name="normal">Normal of the surface.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Reflect(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,SFML.Graphics.Vector3@)">
            <summary>Returns the reflection of a vector off a surface that has the specified normal.  Reference page contains code sample.</summary>
            <param name="vector">Source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">[OutAttribute] The reflected vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Min(SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Min(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,SFML.Graphics.Vector3@)">
            <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] The minimized vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Max(SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Max(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,SFML.Graphics.Vector3@)">
            <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] The maximized vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Clamp(SFML.Graphics.Vector3,SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Restricts a value to be within a specified range.</summary>
            <param name="value1">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Clamp(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,SFML.Graphics.Vector3@)">
            <summary>Restricts a value to be within a specified range.</summary>
            <param name="value1">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">[OutAttribute] The clamped value.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Lerp(SFML.Graphics.Vector3,SFML.Graphics.Vector3,System.Single)">
            <summary>Performs a linear interpolation between two vectors.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Lerp(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,System.Single,SFML.Graphics.Vector3@)">
            <summary>Performs a linear interpolation between two vectors.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <param name="result">[OutAttribute] The result of the interpolation.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Barycentric(SFML.Graphics.Vector3,SFML.Graphics.Vector3,SFML.Graphics.Vector3,System.Single,System.Single)">
            <summary>Returns a Vector3 containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.</summary>
            <param name="value1">A Vector3 containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A Vector3 containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A Vector3 containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Barycentric(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,System.Single,System.Single,SFML.Graphics.Vector3@)">
            <summary>Returns a Vector3 containing the 3D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 3D triangle.</summary>
            <param name="value1">A Vector3 containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A Vector3 containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A Vector3 containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
            <param name="result">[OutAttribute] The 3D Cartesian coordinates of the specified point are placed in this Vector3 on exit.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.SmoothStep(SFML.Graphics.Vector3,SFML.Graphics.Vector3,System.Single)">
            <summary>Interpolates between two values using a cubic equation.</summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Weighting value.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.SmoothStep(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,System.Single,SFML.Graphics.Vector3@)">
            <summary>Interpolates between two values using a cubic equation.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="amount">Weighting value.</param>
            <param name="result">[OutAttribute] The interpolated value.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.CatmullRom(SFML.Graphics.Vector3,SFML.Graphics.Vector3,SFML.Graphics.Vector3,SFML.Graphics.Vector3,System.Single)">
            <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.CatmullRom(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,System.Single,SFML.Graphics.Vector3@)">
            <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">[OutAttribute] A vector that is the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Hermite(SFML.Graphics.Vector3,SFML.Graphics.Vector3,SFML.Graphics.Vector3,SFML.Graphics.Vector3,System.Single)">
            <summary>Performs a Hermite spline interpolation.</summary>
            <param name="value1">Source position vector.</param>
            <param name="tangent1">Source tangent vector.</param>
            <param name="value2">Source position vector.</param>
            <param name="tangent2">Source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Hermite(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,System.Single,SFML.Graphics.Vector3@)">
            <summary>Performs a Hermite spline interpolation.</summary>
            <param name="value1">Source position vector.</param>
            <param name="tangent1">Source tangent vector.</param>
            <param name="value2">Source position vector.</param>
            <param name="tangent2">Source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">[OutAttribute] The result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Transform(SFML.Graphics.Vector3,SFML.Graphics.Matrix)">
            <summary>Transforms a 3D vector by the given matrix.</summary>
            <param name="position">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Transform(SFML.Graphics.Vector3@,SFML.Graphics.Matrix@,SFML.Graphics.Vector3@)">
            <summary>Transforms a Vector3 by the given Matrix.</summary>
            <param name="position">The source Vector3.</param>
            <param name="matrix">The transformation Matrix.</param>
            <param name="result">[OutAttribute] The transformed vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.TransformNormal(SFML.Graphics.Vector3,SFML.Graphics.Matrix)">
            <summary>Transforms a 3D vector normal by a matrix.</summary>
            <param name="normal">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.TransformNormal(SFML.Graphics.Vector3@,SFML.Graphics.Matrix@,SFML.Graphics.Vector3@)">
            <summary>Transforms a vector normal by a matrix.</summary>
            <param name="normal">The source vector.</param>
            <param name="matrix">The transformation Matrix.</param>
            <param name="result">[OutAttribute] The Vector3 resulting from the transformation.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Transform(SFML.Graphics.Vector3,SFML.Graphics.Quaternion)">
            <summary>Transforms a Vector3 by a specified Quaternion rotation.</summary>
            <param name="value">The Vector3 to rotate.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Transform(SFML.Graphics.Vector3@,SFML.Graphics.Quaternion@,SFML.Graphics.Vector3@)">
            <summary>Transforms a Vector3 by a specified Quaternion rotation.</summary>
            <param name="value">The Vector3 to rotate.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <param name="result">[OutAttribute] An existing Vector3 filled in with the results of the rotation.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Transform(SFML.Graphics.Vector3[],SFML.Graphics.Matrix@,SFML.Graphics.Vector3[])">
            <summary>Transforms a source array of Vector3s by a specified Matrix and writes the results to an existing destination array.</summary>
            <param name="sourceArray">The source array.</param>
            <param name="matrix">The transform Matrix to apply.</param>
            <param name="destinationArray">An existing destination array into which the transformed Vector3s are written.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Transform(SFML.Graphics.Vector3[],System.Int32,SFML.Graphics.Matrix@,SFML.Graphics.Vector3[],System.Int32,System.Int32)">
            <summary>Applies a specified transform Matrix to a specified range of an array of Vector3s and writes the results into a specified range of a destination array.</summary>
            <param name="sourceArray">The source array.</param>
            <param name="sourceIndex">The index in the source array at which to start.</param>
            <param name="matrix">The transform Matrix to apply.</param>
            <param name="destinationArray">The existing destination array.</param>
            <param name="destinationIndex">The index in the destination array at which to start.</param>
            <param name="length">The number of Vector3s to transform.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.TransformNormal(SFML.Graphics.Vector3[],SFML.Graphics.Matrix@,SFML.Graphics.Vector3[])">
            <summary>Transforms an array of 3D vector normals by a specified Matrix.</summary>
            <param name="sourceArray">The array of Vector3 normals to transform.</param>
            <param name="matrix">The transform matrix to apply.</param>
            <param name="destinationArray">An existing Vector3 array into which the results of the transforms are written.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.TransformNormal(SFML.Graphics.Vector3[],System.Int32,SFML.Graphics.Matrix@,SFML.Graphics.Vector3[],System.Int32,System.Int32)">
            <summary>Transforms a specified range in an array of 3D vector normals by a specified Matrix and writes the results to a specified range in a destination array.</summary>
            <param name="sourceArray">The source array of Vector3 normals.</param>
            <param name="sourceIndex">The starting index in the source array.</param>
            <param name="matrix">The transform Matrix to apply.</param>
            <param name="destinationArray">The destination Vector3 array.</param>
            <param name="destinationIndex">The starting index in the destination array.</param>
            <param name="length">The number of vectors to transform.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Transform(SFML.Graphics.Vector3[],SFML.Graphics.Quaternion@,SFML.Graphics.Vector3[])">
            <summary>Transforms a source array of Vector3s by a specified Quaternion rotation and writes the results to an existing destination array.</summary>
            <param name="sourceArray">The source array.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <param name="destinationArray">An existing destination array into which the transformed Vector3s are written.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Transform(SFML.Graphics.Vector3[],System.Int32,SFML.Graphics.Quaternion@,SFML.Graphics.Vector3[],System.Int32,System.Int32)">
            <summary>Applies a specified Quaternion rotation to a specified range of an array of Vector3s and writes the results into a specified range of a destination array.</summary>
            <param name="sourceArray">The source array.</param>
            <param name="sourceIndex">The index in the source array at which to start.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <param name="destinationArray">The existing destination array.</param>
            <param name="destinationIndex">The index in the destination array at which to start.</param>
            <param name="length">The number of Vector3s to transform.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Negate(SFML.Graphics.Vector3)">
            <summary>Returns a vector pointing in the opposite direction.</summary>
            <param name="value">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Negate(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@)">
            <summary>Returns a vector pointing in the opposite direction.</summary>
            <param name="value">Source vector.</param>
            <param name="result">[OutAttribute] Vector pointing in the opposite direction.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Add(SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Adds two vectors.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Add(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,SFML.Graphics.Vector3@)">
            <summary>Adds two vectors.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] Sum of the source vectors.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Subtract(SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Subtracts a vector from a vector.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Subtract(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,SFML.Graphics.Vector3@)">
            <summary>Subtracts a vector from a vector.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] The result of the subtraction.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Multiply(SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Multiplies the components of two vectors by each other.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Multiply(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,SFML.Graphics.Vector3@)">
            <summary>Multiplies the components of two vectors by each other.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Multiply(SFML.Graphics.Vector3,System.Single)">
            <summary>Multiplies a vector by a scalar value.</summary>
            <param name="value1">Source vector.</param>
            <param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Multiply(SFML.Graphics.Vector3@,System.Single,SFML.Graphics.Vector3@)">
            <summary>Multiplies a vector by a scalar value.</summary>
            <param name="value1">Source vector.</param>
            <param name="scaleFactor">Scalar value.</param>
            <param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Divide(SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Divides the components of a vector by the components of another vector.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Divisor vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Divide(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,SFML.Graphics.Vector3@)">
            <summary>Divides the components of a vector by the components of another vector.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">The divisor.</param>
            <param name="result">[OutAttribute] The result of the division.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Divide(SFML.Graphics.Vector3,System.Single)">
            <summary>Divides a vector by a scalar value.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">The divisor.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.Divide(SFML.Graphics.Vector3@,System.Single,SFML.Graphics.Vector3@)">
            <summary>Divides a vector by a scalar value.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">The divisor.</param>
            <param name="result">[OutAttribute] The result of the division.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.op_UnaryNegation(SFML.Graphics.Vector3)">
            <summary>Returns a vector pointing in the opposite direction.</summary>
            <param name="value">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.op_Equality(SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Tests vectors for equality.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.op_Inequality(SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Tests vectors for inequality.</summary>
            <param name="value1">Vector to compare.</param>
            <param name="value2">Vector to compare.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.op_Addition(SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Adds two vectors.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.op_Subtraction(SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Subtracts a vector from a vector.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.op_Multiply(SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Multiplies the components of two vectors by each other.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.op_Multiply(SFML.Graphics.Vector3,System.Single)">
            <summary>Multiplies a vector by a scalar value.</summary>
            <param name="value">Source vector.</param>
            <param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.op_Multiply(System.Single,SFML.Graphics.Vector3)">
            <summary>Multiplies a vector by a scalar value.</summary>
            <param name="scaleFactor">Scalar value.</param>
            <param name="value">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.op_Division(SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Divides the components of a vector by the components of another vector.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Divisor vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector3.op_Division(SFML.Graphics.Vector3,System.Single)">
            <summary>Divides a vector by a scalar value.</summary>
            <param name="value">Source vector.</param>
            <param name="divider">The divisor.</param>
        </member>
        <member name="P:SFML.Graphics.Vector3.Zero">
            <summary>Returns a Vector3 with all of its components set to zero.</summary>
        </member>
        <member name="P:SFML.Graphics.Vector3.One">
            <summary>Returns a Vector3 with ones in all of its components.</summary>
        </member>
        <member name="P:SFML.Graphics.Vector3.UnitX">
            <summary>Returns the x unit Vector3 (1, 0, 0).</summary>
        </member>
        <member name="P:SFML.Graphics.Vector3.UnitY">
            <summary>Returns the y unit Vector3 (0, 1, 0).</summary>
        </member>
        <member name="P:SFML.Graphics.Vector3.UnitZ">
            <summary>Returns the z unit Vector3 (0, 0, 1).</summary>
        </member>
        <member name="P:SFML.Graphics.Vector3.Up">
            <summary>Returns a unit vector designating up (0, 1, 0).</summary>
        </member>
        <member name="P:SFML.Graphics.Vector3.Down">
            <summary>Returns a unit Vector3 designating down (0, −1, 0).</summary>
        </member>
        <member name="P:SFML.Graphics.Vector3.Right">
            <summary>Returns a unit Vector3 pointing to the right (1, 0, 0).</summary>
        </member>
        <member name="P:SFML.Graphics.Vector3.Left">
            <summary>Returns a unit Vector3 designating left (−1, 0, 0).</summary>
        </member>
        <member name="P:SFML.Graphics.Vector3.Forward">
            <summary>Returns a unit Vector3 designating forward in a right-handed coordinate system(0, 0, −1).</summary>
        </member>
        <member name="P:SFML.Graphics.Vector3.Backward">
            <summary>Returns a unit Vector3 designating backward in a right-handed coordinate system (0, 0, 1).</summary>
        </member>
        <member name="T:SFML.Graphics.Design.PointConverter">
            <summary>Provides a unified way of converting Point values to other types, as well as for accessing standard values and subproperties.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.PointConverter.#ctor">
            <summary>Initializes a new instance of the PointConverter class.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
        </member>
        <member name="M:SFML.Graphics.Design.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
        </member>
        <member name="M:SFML.Graphics.Design.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>Creates an instance of the type that this PointConverter is associated with, using the specified context, given a set of property values for the object.</summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
        </member>
        <member name="T:SFML.Graphics.Sprite">
            <summary>
            This class defines a sprite : texture, transformations,
            color, and draw on screen
            </summary>
        </member>
        <member name="T:SFML.Graphics.Drawable">
            <summary>
            Abstract base class for every object that can be drawn
            into a render window
            </summary>
        </member>
        <member name="M:SFML.Graphics.Drawable.TransformToLocal(SFML.Graphics.Vector2)">
            <summary>
            Transform a point from global coordinates into local coordinates
            (ie it applies the inverse of object's center, translation, rotation and scale to the point)
            </summary>
            <param name="point">Point to transform</param>
            <returns>Transformed point</returns>
        </member>
        <member name="M:SFML.Graphics.Drawable.TransformToGlobal(SFML.Graphics.Vector2)">
            <summary>
            Transform a point from local coordinates into global coordinates
            (ie it applies the object's center, translation, rotation and scale to the point)
            </summary>
            <param name="point">Point to transform</param>
            <returns>Transformed point</returns>
        </member>
        <member name="M:SFML.Graphics.Drawable.Render(SFML.Graphics.RenderWindow)">
            <summary>
            Render the object into the given render window
            </summary>
            <param name="window">Target window</param>
        </member>
        <member name="M:SFML.Graphics.Drawable.#ctor(System.IntPtr)">
            <summary>
            Internal constructor, for derived classes
            </summary>
            <param name="thisPtr">Pointer to the object in C library</param>
        </member>
        <member name="P:SFML.Graphics.Drawable.Position">
            <summary>
            Position of the object on screen
            </summary>
        </member>
        <member name="P:SFML.Graphics.Drawable.Rotation">
            <summary>
            Rotation of the object, defined in degrees
            </summary>
        </member>
        <member name="P:SFML.Graphics.Drawable.Scale">
            <summary>
            Vertical and horizontal scale of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.Drawable.Center">
            <summary>
            Center of the transformation of the object
            (center of translation, rotation and scale)
            </summary>
        </member>
        <member name="P:SFML.Graphics.Drawable.Color">
            <summary>
            Global color of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.Drawable.BlendMode">
            <summary>
            Blending mode of the object
            </summary>
        </member>
        <member name="M:SFML.Graphics.Sprite.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SFML.Graphics.Sprite.#ctor(SFML.Graphics.Image)">
            <summary>
            Construct the sprite from a source image
            </summary>
            <param name="image">Source image to assign to the sprite</param>
        </member>
        <member name="M:SFML.Graphics.Sprite.TransformToLocal(SFML.Graphics.Vector2)">
            <summary>
            Transform a point from global coordinates into local coordinates
            (ie it applies the inverse of object's center, translation, rotation and scale to the point)
            </summary>
            <param name="point">Point to transform</param>
            <returns>Transformed point</returns>
        </member>
        <member name="M:SFML.Graphics.Sprite.TransformToGlobal(SFML.Graphics.Vector2)">
            <summary>
            Transform a point from local coordinates into global coordinates
            (ie it applies the object's center, translation, rotation and scale to the point)
            </summary>
            <param name="point">Point to transform</param>
            <returns>Transformed point</returns>
        </member>
        <member name="M:SFML.Graphics.Sprite.FlipX(System.Boolean)">
            <summary>
            Flip the sprite horizontically
            </summary>
            <param name="flipped">True to flip, false to canel flip</param>
        </member>
        <member name="M:SFML.Graphics.Sprite.FlipY(System.Boolean)">
            <summary>
            Flip the sprite vertically
            </summary>
            <param name="flipped">True to flip, false to canel flip</param>
        </member>
        <member name="M:SFML.Graphics.Sprite.GetPixel(System.UInt32,System.UInt32)">
            <summary>
            Get the color of a given pixel in the sprite
            (point is in local coordinates)
            </summary>
            <param name="x">X coordinate of the pixel to get</param>
            <param name="y">Y coordinate of the pixel to get</param>
            <returns>Color of pixel (x, y)</returns>
        </member>
        <member name="M:SFML.Graphics.Sprite.Render(SFML.Graphics.RenderWindow)">
            <summary>
            Render the object into the given render window
            </summary>
            <param name="window">Target window</param>
        </member>
        <member name="M:SFML.Graphics.Sprite.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="P:SFML.Graphics.Sprite.Position">
            <summary>
            Position of the object on screen
            </summary>
        </member>
        <member name="P:SFML.Graphics.Sprite.Rotation">
            <summary>
            Rotation of the object, defined in degrees
            </summary>
        </member>
        <member name="P:SFML.Graphics.Sprite.Scale">
            <summary>
            Vertical and horizontal scale of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.Sprite.Center">
            <summary>
            Center of the transformation of the object
            (center of translation, rotation and scale)
            </summary>
        </member>
        <member name="P:SFML.Graphics.Sprite.Color">
            <summary>
            Global color of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.Sprite.BlendMode">
            <summary>
            Blending mode of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.Sprite.Width">
            <summary>
            Width of the sprite
            </summary>
        </member>
        <member name="P:SFML.Graphics.Sprite.Height">
            <summary>
            Height of the sprite
            </summary>
        </member>
        <member name="P:SFML.Graphics.Sprite.Image">
            <summary>
            Source images displayed by the sprite
            </summary>
        </member>
        <member name="P:SFML.Graphics.Sprite.SubRect">
            <summary>
            Sub-rectangle of the source image displayed by the sprite
            </summary>
        </member>
        <member name="T:SFML.Graphics.Vector2">
            <summary>Defines a vector with two components.</summary>
        </member>
        <member name="F:SFML.Graphics.Vector2.X">
            <summary>Gets or sets the x-component of the vector.</summary>
        </member>
        <member name="F:SFML.Graphics.Vector2.Y">
            <summary>Gets or sets the y-component of the vector.</summary>
        </member>
        <member name="M:SFML.Graphics.Vector2.#ctor(System.Single,System.Single)">
            <summary>Initializes a new instance of Vector2.</summary>
            <param name="x">Initial value for the x-component of the vector.</param>
            <param name="y">Initial value for the y-component of the vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.#ctor(System.Single)">
            <summary>Creates a new instance of Vector2.</summary>
            <param name="value">Value to initialize both components to.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.ToString">
            <summary>Retrieves a string representation of the current object.</summary>
        </member>
        <member name="M:SFML.Graphics.Vector2.Equals(SFML.Graphics.Vector2)">
            <summary>Determines whether the specified Object is equal to the Vector2.</summary>
            <param name="other">The Object to compare with the current Vector2.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Equals(System.Object)">
            <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
            <param name="obj">Object to make the comparison with.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.GetHashCode">
            <summary>Gets the hash code of the vector object.</summary>
        </member>
        <member name="M:SFML.Graphics.Vector2.Length">
            <summary>Calculates the length of the vector.</summary>
        </member>
        <member name="M:SFML.Graphics.Vector2.LengthSquared">
            <summary>Calculates the length of the vector squared.</summary>
        </member>
        <member name="M:SFML.Graphics.Vector2.Distance(SFML.Graphics.Vector2,SFML.Graphics.Vector2)">
            <summary>Calculates the distance between two vectors.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Distance(SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,System.Single@)">
            <summary>Calculates the distance between two vectors.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] The distance between the vectors.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.DistanceSquared(SFML.Graphics.Vector2,SFML.Graphics.Vector2)">
            <summary>Calculates the distance between two vectors squared.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.DistanceSquared(SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,System.Single@)">
            <summary>Calculates the distance between two vectors squared.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] The distance between the vectors squared.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Dot(SFML.Graphics.Vector2,SFML.Graphics.Vector2)">
            <summary>Calculates the dot product of two vectors. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Dot(SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,System.Single@)">
            <summary>Calculates the dot product of two vectors and writes the result to a user-specified variable. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] The dot product of the two vectors.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Normalize">
            <summary>Turns the current vector into a unit vector. The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
        </member>
        <member name="M:SFML.Graphics.Vector2.Normalize(SFML.Graphics.Vector2)">
            <summary>Creates a unit vector from the specified vector. The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
            <param name="value">Source Vector2.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Normalize(SFML.Graphics.Vector2@,SFML.Graphics.Vector2@)">
            <summary>Creates a unit vector from the specified vector, writing the result to a user-specified variable. The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
            <param name="value">Source vector.</param>
            <param name="result">[OutAttribute] Normalized vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Reflect(SFML.Graphics.Vector2,SFML.Graphics.Vector2)">
            <summary>Determines the reflect vector of the given vector and normal.</summary>
            <param name="vector">Source vector.</param>
            <param name="normal">Normal of vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Reflect(SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,SFML.Graphics.Vector2@)">
            <summary>Determines the reflect vector of the given vector and normal.</summary>
            <param name="vector">Source vector.</param>
            <param name="normal">Normal of vector.</param>
            <param name="result">[OutAttribute] The created reflect vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Min(SFML.Graphics.Vector2,SFML.Graphics.Vector2)">
            <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Min(SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,SFML.Graphics.Vector2@)">
            <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] The minimized vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Max(SFML.Graphics.Vector2,SFML.Graphics.Vector2)">
            <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Max(SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,SFML.Graphics.Vector2@)">
            <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] The maximized vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Clamp(SFML.Graphics.Vector2,SFML.Graphics.Vector2,SFML.Graphics.Vector2)">
            <summary>Restricts a value to be within a specified range.</summary>
            <param name="value1">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Clamp(SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,SFML.Graphics.Vector2@)">
            <summary>Restricts a value to be within a specified range.</summary>
            <param name="value1">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">[OutAttribute] The clamped value.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Lerp(SFML.Graphics.Vector2,SFML.Graphics.Vector2,System.Single)">
            <summary>Performs a linear interpolation between two vectors.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Lerp(SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,System.Single,SFML.Graphics.Vector2@)">
            <summary>Performs a linear interpolation between two vectors.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <param name="result">[OutAttribute] The result of the interpolation.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Barycentric(SFML.Graphics.Vector2,SFML.Graphics.Vector2,SFML.Graphics.Vector2,System.Single,System.Single)">
            <summary>Returns a Vector2 containing the 2D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 2D triangle.</summary>
            <param name="value1">A Vector2 containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A Vector2 containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A Vector2 containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Barycentric(SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,System.Single,System.Single,SFML.Graphics.Vector2@)">
            <summary>Returns a Vector2 containing the 2D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 2D triangle.</summary>
            <param name="value1">A Vector2 containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A Vector2 containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A Vector2 containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
            <param name="result">[OutAttribute] The 2D Cartesian coordinates of the specified point are placed in this Vector2 on exit.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.SmoothStep(SFML.Graphics.Vector2,SFML.Graphics.Vector2,System.Single)">
            <summary>Interpolates between two values using a cubic equation.</summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Weighting value.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.SmoothStep(SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,System.Single,SFML.Graphics.Vector2@)">
            <summary>Interpolates between two values using a cubic equation.</summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Weighting value.</param>
            <param name="result">[OutAttribute] The interpolated value.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.CatmullRom(SFML.Graphics.Vector2,SFML.Graphics.Vector2,SFML.Graphics.Vector2,SFML.Graphics.Vector2,System.Single)">
            <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.CatmullRom(SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,System.Single,SFML.Graphics.Vector2@)">
            <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">[OutAttribute] A vector that is the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Hermite(SFML.Graphics.Vector2,SFML.Graphics.Vector2,SFML.Graphics.Vector2,SFML.Graphics.Vector2,System.Single)">
            <summary>Performs a Hermite spline interpolation.</summary>
            <param name="value1">Source position vector.</param>
            <param name="tangent1">Source tangent vector.</param>
            <param name="value2">Source position vector.</param>
            <param name="tangent2">Source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Hermite(SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,System.Single,SFML.Graphics.Vector2@)">
            <summary>Performs a Hermite spline interpolation.</summary>
            <param name="value1">Source position vector.</param>
            <param name="tangent1">Source tangent vector.</param>
            <param name="value2">Source position vector.</param>
            <param name="tangent2">Source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">[OutAttribute] The result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Transform(SFML.Graphics.Vector2,SFML.Graphics.Matrix)">
            <summary>Transforms the vector (x, y, 0, 1) by the specified matrix.</summary>
            <param name="position">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Transform(SFML.Graphics.Vector2@,SFML.Graphics.Matrix@,SFML.Graphics.Vector2@)">
            <summary>Transforms a Vector2 by the given Matrix.</summary>
            <param name="position">The source Vector2.</param>
            <param name="matrix">The transformation Matrix.</param>
            <param name="result">[OutAttribute] The Vector2 resulting from the transformation.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.TransformNormal(SFML.Graphics.Vector2,SFML.Graphics.Matrix)">
            <summary>Transforms a 2D vector normal by a matrix.</summary>
            <param name="normal">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.TransformNormal(SFML.Graphics.Vector2@,SFML.Graphics.Matrix@,SFML.Graphics.Vector2@)">
            <summary>Transforms a vector normal by a matrix.</summary>
            <param name="normal">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <param name="result">[OutAttribute] The Vector2 resulting from the transformation.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Transform(SFML.Graphics.Vector2,SFML.Graphics.Quaternion)">
            <summary>Transforms a single Vector2, or the vector normal (x, y, 0, 0), by a specified Quaternion rotation.</summary>
            <param name="value">The vector to rotate.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Transform(SFML.Graphics.Vector2@,SFML.Graphics.Quaternion@,SFML.Graphics.Vector2@)">
            <summary>Transforms a Vector2, or the vector normal (x, y, 0, 0), by a specified Quaternion rotation.</summary>
            <param name="value">The vector to rotate.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <param name="result">[OutAttribute] An existing Vector2 filled in with the result of the rotation.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Transform(SFML.Graphics.Vector2[],SFML.Graphics.Matrix@,SFML.Graphics.Vector2[])">
            <summary>Transforms an array of Vector2s by a specified Matrix.</summary>
            <param name="sourceArray">The array of Vector2s to transform.</param>
            <param name="matrix">The transform Matrix to apply.</param>
            <param name="destinationArray">An existing array into which the transformed Vector2s are written.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Transform(SFML.Graphics.Vector2[],System.Int32,SFML.Graphics.Matrix@,SFML.Graphics.Vector2[],System.Int32,System.Int32)">
            <summary>Transforms a specified range in an array of Vector2s by a specified Matrix and places the results in a specified range in a destination array.</summary>
            <param name="sourceArray">The source array.</param>
            <param name="sourceIndex">The index of the first Vector2 to transform in the source array.</param>
            <param name="matrix">The Matrix to transform by.</param>
            <param name="destinationArray">The destination array into which the resulting Vector2s will be written.</param>
            <param name="destinationIndex">The index of the position in the destination array where the first result Vector2 should be written.</param>
            <param name="length">The number of Vector2s to be transformed.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.TransformNormal(SFML.Graphics.Vector2[],SFML.Graphics.Matrix@,SFML.Graphics.Vector2[])">
            <summary>Transforms an array of Vector2 vector normals by a specified Matrix.</summary>
            <param name="sourceArray">The array of vector normals to transform.</param>
            <param name="matrix">The transform Matrix to apply.</param>
            <param name="destinationArray">An existing array into which the transformed vector normals are written.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.TransformNormal(SFML.Graphics.Vector2[],System.Int32,SFML.Graphics.Matrix@,SFML.Graphics.Vector2[],System.Int32,System.Int32)">
            <summary>Transforms a specified range in an array of Vector2 vector normals by a specified Matrix and places the results in a specified range in a destination array.</summary>
            <param name="sourceArray">The source array.</param>
            <param name="sourceIndex">The index of the first Vector2 to transform in the source array.</param>
            <param name="matrix">The Matrix to apply.</param>
            <param name="destinationArray">The destination array into which the resulting Vector2s are written.</param>
            <param name="destinationIndex">The index of the position in the destination array where the first result Vector2 should be written.</param>
            <param name="length">The number of vector normals to be transformed.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Transform(SFML.Graphics.Vector2[],SFML.Graphics.Quaternion@,SFML.Graphics.Vector2[])">
            <summary>Transforms an array of Vector2s by a specified Quaternion.</summary>
            <param name="sourceArray">The array of Vector2s to transform.</param>
            <param name="rotation">The transform Matrix to use.</param>
            <param name="destinationArray">An existing array into which the transformed Vector2s are written.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Transform(SFML.Graphics.Vector2[],System.Int32,SFML.Graphics.Quaternion@,SFML.Graphics.Vector2[],System.Int32,System.Int32)">
            <summary>Transforms a specified range in an array of Vector2s by a specified Quaternion and places the results in a specified range in a destination array.</summary>
            <param name="sourceArray">The source array.</param>
            <param name="sourceIndex">The index of the first Vector2 to transform in the source array.</param>
            <param name="rotation">The Quaternion rotation to apply.</param>
            <param name="destinationArray">The destination array into which the resulting Vector2s are written.</param>
            <param name="destinationIndex">The index of the position in the destination array where the first result Vector2 should be written.</param>
            <param name="length">The number of Vector2s to be transformed.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Negate(SFML.Graphics.Vector2)">
            <summary>Returns a vector pointing in the opposite direction.</summary>
            <param name="value">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Negate(SFML.Graphics.Vector2@,SFML.Graphics.Vector2@)">
            <summary>Returns a vector pointing in the opposite direction.</summary>
            <param name="value">Source vector.</param>
            <param name="result">[OutAttribute] Vector pointing in the opposite direction.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Add(SFML.Graphics.Vector2,SFML.Graphics.Vector2)">
            <summary>Adds two vectors.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Add(SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,SFML.Graphics.Vector2@)">
            <summary>Adds two vectors.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] Sum of the source vectors.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Subtract(SFML.Graphics.Vector2,SFML.Graphics.Vector2)">
            <summary>Subtracts a vector from a vector.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Subtract(SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,SFML.Graphics.Vector2@)">
            <summary>Subtracts a vector from a vector.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] The result of the subtraction.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Multiply(SFML.Graphics.Vector2,SFML.Graphics.Vector2)">
            <summary>Multiplies the components of two vectors by each other.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Multiply(SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,SFML.Graphics.Vector2@)">
            <summary>Multiplies the components of two vectors by each other.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
            <param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Multiply(SFML.Graphics.Vector2,System.Single)">
            <summary>Multiplies a vector by a scalar value.</summary>
            <param name="value1">Source vector.</param>
            <param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Multiply(SFML.Graphics.Vector2@,System.Single,SFML.Graphics.Vector2@)">
            <summary>Multiplies a vector by a scalar value.</summary>
            <param name="value1">Source vector.</param>
            <param name="scaleFactor">Scalar value.</param>
            <param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Divide(SFML.Graphics.Vector2,SFML.Graphics.Vector2)">
            <summary>Divides the components of a vector by the components of another vector.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Divisor vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Divide(SFML.Graphics.Vector2@,SFML.Graphics.Vector2@,SFML.Graphics.Vector2@)">
            <summary>Divides the components of a vector by the components of another vector.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">The divisor.</param>
            <param name="result">[OutAttribute] The result of the division.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Divide(SFML.Graphics.Vector2,System.Single)">
            <summary>Divides a vector by a scalar value.</summary>
            <param name="value1">Source vector.</param>
            <param name="divider">The divisor.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.Divide(SFML.Graphics.Vector2@,System.Single,SFML.Graphics.Vector2@)">
            <summary>Divides a vector by a scalar value.</summary>
            <param name="value1">Source vector.</param>
            <param name="divider">The divisor.</param>
            <param name="result">[OutAttribute] The result of the division.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.op_UnaryNegation(SFML.Graphics.Vector2)">
            <summary>Returns a vector pointing in the opposite direction.</summary>
            <param name="value">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.op_Equality(SFML.Graphics.Vector2,SFML.Graphics.Vector2)">
            <summary>Tests vectors for equality.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.op_Inequality(SFML.Graphics.Vector2,SFML.Graphics.Vector2)">
            <summary>Tests vectors for inequality.</summary>
            <param name="value1">Vector to compare.</param>
            <param name="value2">Vector to compare.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.op_Addition(SFML.Graphics.Vector2,SFML.Graphics.Vector2)">
            <summary>Adds two vectors.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.op_Subtraction(SFML.Graphics.Vector2,SFML.Graphics.Vector2)">
            <summary>Subtracts a vector from a vector.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.op_Multiply(SFML.Graphics.Vector2,SFML.Graphics.Vector2)">
            <summary>Multiplies the components of two vectors by each other.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.op_Multiply(SFML.Graphics.Vector2,System.Single)">
            <summary>Multiplies a vector by a scalar value.</summary>
            <param name="value">Source vector.</param>
            <param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.op_Multiply(System.Single,SFML.Graphics.Vector2)">
            <summary>Multiplies a vector by a scalar value.</summary>
            <param name="scaleFactor">Scalar value.</param>
            <param name="value">Source vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.op_Division(SFML.Graphics.Vector2,SFML.Graphics.Vector2)">
            <summary>Divides the components of a vector by the components of another vector.</summary>
            <param name="value1">Source vector.</param>
            <param name="value2">Divisor vector.</param>
        </member>
        <member name="M:SFML.Graphics.Vector2.op_Division(SFML.Graphics.Vector2,System.Single)">
            <summary>Divides a vector by a scalar value.</summary>
            <param name="value1">Source vector.</param>
            <param name="divider">The divisor.</param>
        </member>
        <member name="P:SFML.Graphics.Vector2.Zero">
            <summary>Returns a Vector2 with all of its components set to zero.</summary>
        </member>
        <member name="P:SFML.Graphics.Vector2.One">
            <summary>Returns a Vector2 with both of its components set to one.</summary>
        </member>
        <member name="P:SFML.Graphics.Vector2.UnitX">
            <summary>Returns the unit vector for the x-axis.</summary>
        </member>
        <member name="P:SFML.Graphics.Vector2.UnitY">
            <summary>Returns the unit vector for the y-axis.</summary>
        </member>
        <member name="T:SFML.Graphics.Design.Vector3Converter">
            <summary>Provides a unified way of converting Vector3 values to other types, as well as for accessing standard values and subproperties.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.Vector3Converter.#ctor">
            <summary>Initializes a new instance of the Vector3Converter class.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.Vector3Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
        </member>
        <member name="M:SFML.Graphics.Design.Vector3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
        </member>
        <member name="M:SFML.Graphics.Design.Vector3Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>Creates an instance of the type that this Vector3Converter is associated with, using the specified context, given a set of property values for the object.</summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
        </member>
        <member name="T:SFML.Graphics.Design.QuaternionConverter">
            <summary>Provides a unified way of converting Quaternion values to other types, as well as for accessing standard values and subproperties.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.QuaternionConverter.#ctor">
            <summary>Initializes a new instance of the QuaternionConverter class.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.QuaternionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
        </member>
        <member name="M:SFML.Graphics.Design.QuaternionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
        </member>
        <member name="M:SFML.Graphics.Design.QuaternionConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>Creates an instance of the type that this QuaternionConverter is associated with, using the specified context, given a set of property values for the object.</summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
        </member>
        <member name="T:SFML.Graphics.ContainmentType">
            <summary>Indicates the extent to which bounding volumes intersect or contain one another.</summary>
        </member>
        <member name="F:SFML.Graphics.ContainmentType.Disjoint">
            <summary>
            Indicates that one bounding volume completely contains the other.
            </summary>
        </member>
        <member name="F:SFML.Graphics.ContainmentType.Contains">
            <summary>
            Indicates there is no overlap between the bounding volumes.
            </summary>
        </member>
        <member name="F:SFML.Graphics.ContainmentType.Intersects">
            <summary>
            Indicates that the bounding volumes partially overlap.
            </summary>
        </member>
        <member name="T:SFML.Graphics.Design.ColorConverter">
            <summary>Provides a unified way of converting Color values to other types, as well as for accessing standard values and subproperties.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.ColorConverter.#ctor">
            <summary>Initializes a new instance of the ColorConverter class.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Converts the given value to the type of this converter.</summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
        </member>
        <member name="M:SFML.Graphics.Design.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
        </member>
        <member name="M:SFML.Graphics.Design.ColorConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>Re-creates an object given a set of property values for the object.</summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
        </member>
        <member name="T:SFML.Graphics.BoundingSphere">
            <summary>Defines a sphere.</summary>
        </member>
        <member name="F:SFML.Graphics.BoundingSphere.Center">
            <summary>The center point of the sphere.</summary>
        </member>
        <member name="F:SFML.Graphics.BoundingSphere.Radius">
            <summary>The radius of the sphere.</summary>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.#ctor(SFML.Graphics.Vector3,System.Single)">
            <summary>Creates a new instance of BoundingSphere.</summary>
            <param name="center">Center point of the sphere.</param>
            <param name="radius">Radius of the sphere.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.Equals(SFML.Graphics.BoundingSphere)">
            <summary>Determines whether the specified BoundingSphere is equal to the current BoundingSphere.</summary>
            <param name="other">The BoundingSphere to compare with the current BoundingSphere.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.Equals(System.Object)">
            <summary>Determines whether the specified Object is equal to the BoundingSphere.</summary>
            <param name="obj">The Object to compare with the current BoundingSphere.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.GetHashCode">
            <summary>Gets the hash code for this instance.</summary>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.ToString">
            <summary>Returns a String that represents the current BoundingSphere.</summary>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.CreateMerged(SFML.Graphics.BoundingSphere,SFML.Graphics.BoundingSphere)">
            <summary>Creates a BoundingSphere that contains the two specified BoundingSphere instances.</summary>
            <param name="original">BoundingSphere to be merged.</param>
            <param name="additional">BoundingSphere to be merged.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.CreateMerged(SFML.Graphics.BoundingSphere@,SFML.Graphics.BoundingSphere@,SFML.Graphics.BoundingSphere@)">
            <summary>Creates a BoundingSphere that contains the two specified BoundingSphere instances.</summary>
            <param name="original">BoundingSphere to be merged.</param>
            <param name="additional">BoundingSphere to be merged.</param>
            <param name="result">[OutAttribute] The created BoundingSphere.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.CreateFromBoundingBox(SFML.Graphics.BoundingBox)">
            <summary>Creates the smallest BoundingSphere that can contain a specified BoundingBox.</summary>
            <param name="box">The BoundingBox to create the BoundingSphere from.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.CreateFromBoundingBox(SFML.Graphics.BoundingBox@,SFML.Graphics.BoundingSphere@)">
            <summary>Creates the smallest BoundingSphere that can contain a specified BoundingBox.</summary>
            <param name="box">The BoundingBox to create the BoundingSphere from.</param>
            <param name="result">[OutAttribute] The created BoundingSphere.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.CreateFromPoints(System.Collections.Generic.IEnumerable{SFML.Graphics.Vector3})">
            <summary>Creates a BoundingSphere that can contain a specified list of points. Reference page contains links to related code samples.</summary>
            <param name="points">List of points the BoundingSphere must contain.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.CreateFromFrustum(SFML.Graphics.BoundingFrustum)">
            <summary>Creates the smallest BoundingSphere that can contain a specified BoundingFrustum.</summary>
            <param name="frustum">The BoundingFrustum to create the BoundingSphere with.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.Intersects(SFML.Graphics.BoundingBox)">
            <summary>Checks whether the current BoundingSphere intersects with a specified BoundingBox.</summary>
            <param name="box">The BoundingBox to check for intersection with the current BoundingSphere.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.Intersects(SFML.Graphics.BoundingBox@,System.Boolean@)">
            <summary>Checks whether the current BoundingSphere intersects a BoundingBox.</summary>
            <param name="box">The BoundingBox to check for intersection with.</param>
            <param name="result">[OutAttribute] true if the BoundingSphere and BoundingBox intersect; false otherwise.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.Intersects(SFML.Graphics.BoundingFrustum)">
            <summary>Checks whether the current BoundingSphere intersects with a specified BoundingFrustum.</summary>
            <param name="frustum">The BoundingFrustum to check for intersection with the current BoundingSphere.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.Intersects(SFML.Graphics.Plane)">
            <summary>Checks whether the current BoundingSphere intersects with a specified Plane.</summary>
            <param name="plane">The Plane to check for intersection with the current BoundingSphere.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.Intersects(SFML.Graphics.Plane@,SFML.Graphics.PlaneIntersectionType@)">
            <summary>Checks whether the current BoundingSphere intersects a Plane.</summary>
            <param name="plane">The Plane to check for intersection with.</param>
            <param name="result">[OutAttribute] An enumeration indicating whether the BoundingSphere intersects the Plane.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.Intersects(SFML.Graphics.Ray)">
            <summary>Checks whether the current BoundingSphere intersects with a specified Ray.</summary>
            <param name="ray">The Ray to check for intersection with the current BoundingSphere.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.Intersects(SFML.Graphics.Ray@,System.Nullable{System.Single}@)">
            <summary>Checks whether the current BoundingSphere intersects a Ray.</summary>
            <param name="ray">The Ray to check for intersection with.</param>
            <param name="result">[OutAttribute] Distance at which the ray intersects the BoundingSphere or null if there is no intersection.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.Intersects(SFML.Graphics.BoundingSphere)">
            <summary>Checks whether the current BoundingSphere intersects with a specified BoundingSphere.</summary>
            <param name="sphere">The BoundingSphere to check for intersection with the current BoundingSphere.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.Intersects(SFML.Graphics.BoundingSphere@,System.Boolean@)">
            <summary>Checks whether the current BoundingSphere intersects another BoundingSphere.</summary>
            <param name="sphere">The BoundingSphere to check for intersection with.</param>
            <param name="result">[OutAttribute] true if the BoundingSphere instances intersect; false otherwise.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.Contains(SFML.Graphics.BoundingBox)">
            <summary>Checks whether the current BoundingSphere contains the specified BoundingBox.</summary>
            <param name="box">The BoundingBox to check against the current BoundingSphere.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.Contains(SFML.Graphics.BoundingBox@,SFML.Graphics.ContainmentType@)">
            <summary>Checks whether the current BoundingSphere contains the specified BoundingBox.</summary>
            <param name="box">The BoundingBox to test for overlap.</param>
            <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.Contains(SFML.Graphics.BoundingFrustum)">
            <summary>Checks whether the current BoundingSphere contains the specified BoundingFrustum.</summary>
            <param name="frustum">The BoundingFrustum to check against the current BoundingSphere.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.Contains(SFML.Graphics.Vector3)">
            <summary>Checks whether the current BoundingSphere contains the specified point.</summary>
            <param name="point">The point to check against the current BoundingSphere.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.Contains(SFML.Graphics.Vector3@,SFML.Graphics.ContainmentType@)">
            <summary>Checks whether the current BoundingSphere contains the specified point.</summary>
            <param name="point">The point to test for overlap.</param>
            <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.Contains(SFML.Graphics.BoundingSphere)">
            <summary>Checks whether the current BoundingSphere contains the specified BoundingSphere.</summary>
            <param name="sphere">The BoundingSphere to check against the current BoundingSphere.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.Contains(SFML.Graphics.BoundingSphere@,SFML.Graphics.ContainmentType@)">
            <summary>Checks whether the current BoundingSphere contains the specified BoundingSphere.</summary>
            <param name="sphere">The BoundingSphere to test for overlap.</param>
            <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.Transform(SFML.Graphics.Matrix)">
            <summary>Translates and scales the BoundingSphere using a given Matrix.</summary>
            <param name="matrix">A transformation matrix that might include translation, rotation, or uniform scaling. Note that BoundingSphere.Transform will not return correct results if there are non-uniform scaling, shears, or other unusual transforms in this transformation matrix. This is because there is no way to shear or non-uniformly scale a sphere. Such an operation would cause the sphere to lose its shape as a sphere.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.Transform(SFML.Graphics.Matrix@,SFML.Graphics.BoundingSphere@)">
            <summary>Translates and scales the BoundingSphere using a given Matrix.</summary>
            <param name="matrix">A transformation matrix that might include translation, rotation, or uniform scaling. Note that BoundingSphere.Transform will not return correct results if there are non-uniform scaling, shears, or other unusual transforms in this transformation matrix. This is because there is no way to shear or non-uniformly scale a sphere. Such an operation would cause the sphere to lose its shape as a sphere.</param>
            <param name="result">[OutAttribute] The transformed BoundingSphere.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.op_Equality(SFML.Graphics.BoundingSphere,SFML.Graphics.BoundingSphere)">
            <summary>Determines whether two instances of BoundingSphere are equal.</summary>
            <param name="a">The object to the left of the equality operator.</param>
            <param name="b">The object to the right of the equality operator.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingSphere.op_Inequality(SFML.Graphics.BoundingSphere,SFML.Graphics.BoundingSphere)">
            <summary>Determines whether two instances of BoundingSphere are not equal.</summary>
            <param name="a">The BoundingSphere to the left of the inequality operator.</param>
            <param name="b">The BoundingSphere to the right of the inequality operator.</param>
        </member>
        <member name="T:SFML.Graphics.MathHelper">
            <summary>Contains commonly used precalculated values.</summary>
        </member>
        <member name="F:SFML.Graphics.MathHelper.E">
            <summary>Represents the mathematical constant e.</summary>
        </member>
        <member name="F:SFML.Graphics.MathHelper.Log10E">
            <summary>Represents the log base ten of e.</summary>
        </member>
        <member name="F:SFML.Graphics.MathHelper.Log2E">
            <summary>Represents the log base two of e.</summary>
        </member>
        <member name="F:SFML.Graphics.MathHelper.Pi">
            <summary>Represents the value of pi.</summary>
        </member>
        <member name="F:SFML.Graphics.MathHelper.PiOver2">
            <summary>Represents the value of pi divided by two.</summary>
        </member>
        <member name="F:SFML.Graphics.MathHelper.PiOver4">
            <summary>Represents the value of pi divided by four.</summary>
        </member>
        <member name="F:SFML.Graphics.MathHelper.TwoPi">
            <summary>Represents the value of pi times two.</summary>
        </member>
        <member name="M:SFML.Graphics.MathHelper.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Returns the Cartesian coordinate for one axis of a point that is defined by a given triangle and two normalized barycentric (areal) coordinates.</summary>
            <param name="value1">The coordinate on one axis of vertex 1 of the defining triangle.</param>
            <param name="value2">The coordinate on the same axis of vertex 2 of the defining triangle.</param>
            <param name="value3">The coordinate on the same axis of vertex 3 of the defining triangle.</param>
            <param name="amount1">The normalized barycentric (areal) coordinate b2, equal to the weighting factor for vertex 2, the coordinate of which is specified in value2.</param>
            <param name="amount2">The normalized barycentric (areal) coordinate b3, equal to the weighting factor for vertex 3, the coordinate of which is specified in value3.</param>
        </member>
        <member name="M:SFML.Graphics.MathHelper.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
        </member>
        <member name="M:SFML.Graphics.MathHelper.Clamp(System.Single,System.Single,System.Single)">
            <summary>Restricts a value to be within a specified range. Reference page contains links to related code samples.</summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. If value is less than min, min will be returned.</param>
            <param name="max">The maximum value. If value is greater than max, max will be returned.</param>
        </member>
        <member name="M:SFML.Graphics.MathHelper.Distance(System.Single,System.Single)">
            <summary>Calculates the absolute value of the difference of two values.</summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
        </member>
        <member name="M:SFML.Graphics.MathHelper.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Performs a Hermite spline interpolation.</summary>
            <param name="value1">Source position.</param>
            <param name="tangent1">Source tangent.</param>
            <param name="value2">Source position.</param>
            <param name="tangent2">Source tangent.</param>
            <param name="amount">Weighting factor.</param>
        </member>
        <member name="M:SFML.Graphics.MathHelper.Lerp(System.Single,System.Single,System.Single)">
            <summary>Linearly interpolates between two values.</summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
        </member>
        <member name="M:SFML.Graphics.MathHelper.Max(System.Single,System.Single)">
            <summary>Returns the greater of two values.</summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
        </member>
        <member name="M:SFML.Graphics.MathHelper.Min(System.Single,System.Single)">
            <summary>Returns the lesser of two values.</summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
        </member>
        <member name="M:SFML.Graphics.MathHelper.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>Interpolates between two values using a cubic equation.</summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Weighting value.</param>
        </member>
        <member name="M:SFML.Graphics.MathHelper.ToDegrees(System.Single)">
            <summary>Converts radians to degrees.</summary>
            <param name="radians">The angle in radians.</param>
        </member>
        <member name="M:SFML.Graphics.MathHelper.ToRadians(System.Single)">
            <summary>Converts degrees to radians.</summary>
            <param name="degrees">The angle in degrees.</param>
        </member>
        <member name="M:SFML.Graphics.MathHelper.WrapAngle(System.Single)">
            <summary>Reduces a given angle to a value between π and -π.</summary>
            <param name="angle">The angle to reduce, in radians.</param>
        </member>
        <member name="T:SFML.Graphics.PlaneIntersectionType">
            <summary>Describes the intersection between a plane and a bounding volume.</summary>
        </member>
        <member name="F:SFML.Graphics.PlaneIntersectionType.Front">
            <summary>
            There is no intersection, and the bounding volume is in the negative half-space of the Plane.
            </summary>
        </member>
        <member name="F:SFML.Graphics.PlaneIntersectionType.Back">
            <summary>
            There is no intersection, and the bounding volume is in the positive half-space of the Plane.
            </summary>
        </member>
        <member name="F:SFML.Graphics.PlaneIntersectionType.Intersecting">
            <summary>
            The Plane is intersected.
            </summary>
        </member>
        <member name="T:SFML.Graphics.Design.MatrixConverter">
            <summary>Provides a unified way of converting Matrix values to other types, as well as for accessing standard values and subproperties.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.MatrixConverter.#ctor">
            <summary>Initializes a new instance of the MatrixConverter class.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.MatrixConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
        </member>
        <member name="M:SFML.Graphics.Design.MatrixConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>Creates an instance of the type that this MatrixConverter is associated with, using the specified context, given a set of property values for the object.</summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
        </member>
        <member name="T:SFML.Graphics.Matrix">
            <summary>Defines a matrix.</summary>
        </member>
        <member name="F:SFML.Graphics.Matrix.M11">
            <summary>Value at row 1 column 1 of the matrix.</summary>
        </member>
        <member name="F:SFML.Graphics.Matrix.M12">
            <summary>Value at row 1 column 2 of the matrix.</summary>
        </member>
        <member name="F:SFML.Graphics.Matrix.M13">
            <summary>Value at row 1 column 3 of the matrix.</summary>
        </member>
        <member name="F:SFML.Graphics.Matrix.M14">
            <summary>Value at row 1 column 4 of the matrix.</summary>
        </member>
        <member name="F:SFML.Graphics.Matrix.M21">
            <summary>Value at row 2 column 1 of the matrix.</summary>
        </member>
        <member name="F:SFML.Graphics.Matrix.M22">
            <summary>Value at row 2 column 2 of the matrix.</summary>
        </member>
        <member name="F:SFML.Graphics.Matrix.M23">
            <summary>Value at row 2 column 3 of the matrix.</summary>
        </member>
        <member name="F:SFML.Graphics.Matrix.M24">
            <summary>Value at row 2 column 4 of the matrix.</summary>
        </member>
        <member name="F:SFML.Graphics.Matrix.M31">
            <summary>Value at row 3 column 1 of the matrix.</summary>
        </member>
        <member name="F:SFML.Graphics.Matrix.M32">
            <summary>Value at row 3 column 2 of the matrix.</summary>
        </member>
        <member name="F:SFML.Graphics.Matrix.M33">
            <summary>Value at row 3 column 3 of the matrix.</summary>
        </member>
        <member name="F:SFML.Graphics.Matrix.M34">
            <summary>Value at row 3 column 4 of the matrix.</summary>
        </member>
        <member name="F:SFML.Graphics.Matrix.M41">
            <summary>Value at row 4 column 1 of the matrix.</summary>
        </member>
        <member name="F:SFML.Graphics.Matrix.M42">
            <summary>Value at row 4 column 2 of the matrix.</summary>
        </member>
        <member name="F:SFML.Graphics.Matrix.M43">
            <summary>Value at row 4 column 3 of the matrix.</summary>
        </member>
        <member name="F:SFML.Graphics.Matrix.M44">
            <summary>Value at row 4 column 4 of the matrix.</summary>
        </member>
        <member name="M:SFML.Graphics.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Initializes a new instance of Matrix.</summary>
            <param name="m11">Value to initialize m11 to.</param>
            <param name="m12">Value to initialize m12 to.</param>
            <param name="m13">Value to initialize m13 to.</param>
            <param name="m14">Value to initialize m14 to.</param>
            <param name="m21">Value to initialize m21 to.</param>
            <param name="m22">Value to initialize m22 to.</param>
            <param name="m23">Value to initialize m23 to.</param>
            <param name="m24">Value to initialize m24 to.</param>
            <param name="m31">Value to initialize m31 to.</param>
            <param name="m32">Value to initialize m32 to.</param>
            <param name="m33">Value to initialize m33 to.</param>
            <param name="m34">Value to initialize m34 to.</param>
            <param name="m41">Value to initialize m41 to.</param>
            <param name="m42">Value to initialize m42 to.</param>
            <param name="m43">Value to initialize m43 to.</param>
            <param name="m44">Value to initialize m44 to.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateBillboard(SFML.Graphics.Vector3,SFML.Graphics.Vector3,SFML.Graphics.Vector3,System.Nullable{SFML.Graphics.Vector3})">
            <summary>Creates a spherical billboard that rotates around a specified object position.</summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param>
            <param name="cameraPosition">Position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">Optional forward vector of the camera.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateBillboard(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,System.Nullable{SFML.Graphics.Vector3},SFML.Graphics.Matrix@)">
            <summary>Creates a spherical billboard that rotates around a specified object position.</summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param>
            <param name="cameraPosition">Position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">Optional forward vector of the camera.</param>
            <param name="result">[OutAttribute] The created billboard matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateConstrainedBillboard(SFML.Graphics.Vector3,SFML.Graphics.Vector3,SFML.Graphics.Vector3,System.Nullable{SFML.Graphics.Vector3},System.Nullable{SFML.Graphics.Vector3})">
            <summary>Creates a cylindrical billboard that rotates around a specified axis.</summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param>
            <param name="cameraPosition">Position of the camera.</param>
            <param name="rotateAxis">Axis to rotate the billboard around.</param>
            <param name="cameraForwardVector">Optional forward vector of the camera.</param>
            <param name="objectForwardVector">Optional forward vector of the object.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateConstrainedBillboard(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,System.Nullable{SFML.Graphics.Vector3},System.Nullable{SFML.Graphics.Vector3},SFML.Graphics.Matrix@)">
            <summary>Creates a cylindrical billboard that rotates around a specified axis.</summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param>
            <param name="cameraPosition">Position of the camera.</param>
            <param name="rotateAxis">Axis to rotate the billboard around.</param>
            <param name="cameraForwardVector">Optional forward vector of the camera.</param>
            <param name="objectForwardVector">Optional forward vector of the object.</param>
            <param name="result">[OutAttribute] The created billboard matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateTranslation(SFML.Graphics.Vector3)">
            <summary>Creates a translation Matrix. Reference page contains links to related code samples.</summary>
            <param name="position">Amounts to translate by on the x, y, and z axes.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateTranslation(SFML.Graphics.Vector3@,SFML.Graphics.Matrix@)">
            <summary>Creates a translation Matrix. Reference page contains links to related code samples.</summary>
            <param name="position">Amounts to translate by on the x, y, and z axes.</param>
            <param name="result">[OutAttribute] The created translation Matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateTranslation(System.Single,System.Single,System.Single)">
            <summary>Creates a translation Matrix. Reference page contains links to related code samples.</summary>
            <param name="xPosition">Value to translate by on the x-axis.</param>
            <param name="yPosition">Value to translate by on the y-axis.</param>
            <param name="zPosition">Value to translate by on the z-axis.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateTranslation(System.Single,System.Single,System.Single,SFML.Graphics.Matrix@)">
            <summary>Creates a translation Matrix. Reference page contains links to related code samples.</summary>
            <param name="xPosition">Value to translate by on the x-axis.</param>
            <param name="yPosition">Value to translate by on the y-axis.</param>
            <param name="zPosition">Value to translate by on the z-axis.</param>
            <param name="result">[OutAttribute] The created translation Matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateScale(System.Single,System.Single,System.Single)">
            <summary>Creates a scaling Matrix.</summary>
            <param name="xScale">Value to scale by on the x-axis.</param>
            <param name="yScale">Value to scale by on the y-axis.</param>
            <param name="zScale">Value to scale by on the z-axis.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateScale(System.Single,System.Single,System.Single,SFML.Graphics.Matrix@)">
            <summary>Creates a scaling Matrix.</summary>
            <param name="xScale">Value to scale by on the x-axis.</param>
            <param name="yScale">Value to scale by on the y-axis.</param>
            <param name="zScale">Value to scale by on the z-axis.</param>
            <param name="result">[OutAttribute] The created scaling Matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateScale(SFML.Graphics.Vector3)">
            <summary>Creates a scaling Matrix.</summary>
            <param name="scales">Amounts to scale by on the x, y, and z axes.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateScale(SFML.Graphics.Vector3@,SFML.Graphics.Matrix@)">
            <summary>Creates a scaling Matrix.</summary>
            <param name="scales">Amounts to scale by on the x, y, and z axes.</param>
            <param name="result">[OutAttribute] The created scaling Matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateScale(System.Single)">
            <summary>Creates a scaling Matrix.</summary>
            <param name="scale">Amount to scale by.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateScale(System.Single,SFML.Graphics.Matrix@)">
            <summary>Creates a scaling Matrix.</summary>
            <param name="scale">Value to scale by.</param>
            <param name="result">[OutAttribute] The created scaling Matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateRotationX(System.Single)">
            <summary>Returns a matrix that can be used to rotate a set of vertices around the x-axis.</summary>
            <param name="radians">The amount, in radians, in which to rotate around the x-axis. Note that you can use ToRadians to convert degrees to radians.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateRotationX(System.Single,SFML.Graphics.Matrix@)">
            <summary>Populates data into a user-specified matrix that can be used to rotate a set of vertices around the x-axis.</summary>
            <param name="radians">The amount, in radians, in which to rotate around the x-axis. Note that you can use ToRadians to convert degrees to radians.</param>
            <param name="result">[OutAttribute] The matrix in which to place the calculated data.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateRotationY(System.Single)">
            <summary>Returns a matrix that can be used to rotate a set of vertices around the y-axis.</summary>
            <param name="radians">The amount, in radians, in which to rotate around the y-axis. Note that you can use ToRadians to convert degrees to radians.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateRotationY(System.Single,SFML.Graphics.Matrix@)">
            <summary>Populates data into a user-specified matrix that can be used to rotate a set of vertices around the y-axis.</summary>
            <param name="radians">The amount, in radians, in which to rotate around the y-axis. Note that you can use ToRadians to convert degrees to radians.</param>
            <param name="result">[OutAttribute] The matrix in which to place the calculated data.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateRotationZ(System.Single)">
            <summary>Returns a matrix that can be used to rotate a set of vertices around the z-axis.</summary>
            <param name="radians">The amount, in radians, in which to rotate around the z-axis. Note that you can use ToRadians to convert degrees to radians.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateRotationZ(System.Single,SFML.Graphics.Matrix@)">
            <summary>Populates data into a user-specified matrix that can be used to rotate a set of vertices around the z-axis.</summary>
            <param name="radians">The amount, in radians, in which to rotate around the z-axis. Note that you can use ToRadians to convert degrees to radians.</param>
            <param name="result">[OutAttribute] The rotation matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateFromAxisAngle(SFML.Graphics.Vector3,System.Single)">
            <summary>Creates a new Matrix that rotates around an arbitrary vector.</summary>
            <param name="axis">The axis to rotate around.</param>
            <param name="angle">The angle to rotate around the vector.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateFromAxisAngle(SFML.Graphics.Vector3@,System.Single,SFML.Graphics.Matrix@)">
            <summary>Creates a new Matrix that rotates around an arbitrary vector.</summary>
            <param name="axis">The axis to rotate around.</param>
            <param name="angle">The angle to rotate around the vector.</param>
            <param name="result">[OutAttribute] The created Matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
            <summary>Builds a perspective projection matrix based on a field of view. Reference page contains links to related code samples.</summary>
            <param name="fieldOfView">Field of view in radians.</param>
            <param name="aspectRatio">Aspect ratio, defined as view space width divided by height.</param>
            <param name="nearPlaneDistance">Distance to the near view plane.</param>
            <param name="farPlaneDistance">Distance to the far view plane.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single,SFML.Graphics.Matrix@)">
            <summary>Builds a perspective projection matrix based on a field of view. Reference page contains links to related code samples.</summary>
            <param name="fieldOfView">Field of view in radians.</param>
            <param name="aspectRatio">Aspect ratio, defined as view space width divided by height.</param>
            <param name="nearPlaneDistance">Distance to the near view plane.</param>
            <param name="farPlaneDistance">Distance to the far view plane.</param>
            <param name="result">[OutAttribute] The perspective projection matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>Builds a perspective projection matrix. Reference page contains links to related code samples.</summary>
            <param name="width">Width of the view volume at the near view plane.</param>
            <param name="height">Height of the view volume at the near view plane.</param>
            <param name="nearPlaneDistance">Distance to the near view plane.</param>
            <param name="farPlaneDistance">Distance to the far view plane.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single,SFML.Graphics.Matrix@)">
            <summary>Builds a perspective projection matrix. Reference page contains links to related code samples.</summary>
            <param name="width">Width of the view volume at the near view plane.</param>
            <param name="height">Height of the view volume at the near view plane.</param>
            <param name="nearPlaneDistance">Distance to the near view plane.</param>
            <param name="farPlaneDistance">Distance to the far view plane.</param>
            <param name="result">[OutAttribute] The projection matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Builds a customized, perspective projection matrix. Reference page contains links to related code samples.</summary>
            <param name="left">Minimum x-value of the view volume at the near view plane.</param>
            <param name="right">Maximum x-value of the view volume at the near view plane.</param>
            <param name="bottom">Minimum y-value of the view volume at the near view plane.</param>
            <param name="top">Maximum y-value of the view volume at the near view plane.</param>
            <param name="nearPlaneDistance">Distance to the near view plane.</param>
            <param name="farPlaneDistance">Distance to of the far view plane.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SFML.Graphics.Matrix@)">
            <summary>Builds a customized, perspective projection matrix. Reference page contains links to related code samples.</summary>
            <param name="left">Minimum x-value of the view volume at the near view plane.</param>
            <param name="right">Maximum x-value of the view volume at the near view plane.</param>
            <param name="bottom">Minimum y-value of the view volume at the near view plane.</param>
            <param name="top">Maximum y-value of the view volume at the near view plane.</param>
            <param name="nearPlaneDistance">Distance to the near view plane.</param>
            <param name="farPlaneDistance">Distance to of the far view plane.</param>
            <param name="result">[OutAttribute] The created projection matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
            <summary>Builds an orthogonal projection matrix. Reference page contains links to related code samples.</summary>
            <param name="width">Width of the view volume.</param>
            <param name="height">Height of the view volume.</param>
            <param name="zNearPlane">Minimum z-value of the view volume.</param>
            <param name="zFarPlane">Maximum z-value of the view volume.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single,SFML.Graphics.Matrix@)">
            <summary>Builds an orthogonal projection matrix. Reference page contains links to related code samples.</summary>
            <param name="width">Width of the view volume.</param>
            <param name="height">Height of the view volume.</param>
            <param name="zNearPlane">Minimum z-value of the view volume.</param>
            <param name="zFarPlane">Maximum z-value of the view volume.</param>
            <param name="result">[OutAttribute] The projection matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Builds a customized, orthogonal projection matrix. Reference page contains links to related code samples.</summary>
            <param name="left">Minimum x-value of the view volume.</param>
            <param name="right">Maximum x-value of the view volume.</param>
            <param name="bottom">Minimum y-value of the view volume.</param>
            <param name="top">Maximum y-value of the view volume.</param>
            <param name="zNearPlane">Minimum z-value of the view volume.</param>
            <param name="zFarPlane">Maximum z-value of the view volume.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SFML.Graphics.Matrix@)">
            <summary>Builds a customized, orthogonal projection matrix. Reference page contains links to related code samples.</summary>
            <param name="left">Minimum x-value of the view volume.</param>
            <param name="right">Maximum x-value of the view volume.</param>
            <param name="bottom">Minimum y-value of the view volume.</param>
            <param name="top">Maximum y-value of the view volume.</param>
            <param name="zNearPlane">Minimum z-value of the view volume.</param>
            <param name="zFarPlane">Maximum z-value of the view volume.</param>
            <param name="result">[OutAttribute] The projection matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateLookAt(SFML.Graphics.Vector3,SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Creates a view matrix. Reference page contains links to related code samples.</summary>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraTarget">The target towards which the camera is pointing.</param>
            <param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateLookAt(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,SFML.Graphics.Matrix@)">
            <summary>Creates a view matrix. Reference page contains links to related code samples.</summary>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraTarget">The target towards which the camera is pointing.</param>
            <param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param>
            <param name="result">[OutAttribute] The created view matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateWorld(SFML.Graphics.Vector3,SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Creates a world matrix with the specified parameters.</summary>
            <param name="position">Position of the object. This value is used in translation operations.</param>
            <param name="forward">Forward direction of the object.</param>
            <param name="up">Upward direction of the object; usually [0, 1, 0].</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateWorld(SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,SFML.Graphics.Vector3@,SFML.Graphics.Matrix@)">
            <summary>Creates a world matrix with the specified parameters.</summary>
            <param name="position">Position of the object. This value is used in translation operations.</param>
            <param name="forward">Forward direction of the object.</param>
            <param name="up">Upward direction of the object; usually [0, 1, 0].</param>
            <param name="result">[OutAttribute] The created world matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateFromQuaternion(SFML.Graphics.Quaternion)">
            <summary>Creates a rotation Matrix from a Quaternion.</summary>
            <param name="quaternion">Quaternion to create the Matrix from.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateFromQuaternion(SFML.Graphics.Quaternion@,SFML.Graphics.Matrix@)">
            <summary>Creates a rotation Matrix from a Quaternion.</summary>
            <param name="quaternion">Quaternion to create the Matrix from.</param>
            <param name="result">[OutAttribute] The created Matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>Creates a new rotation matrix from a specified yaw, pitch, and roll.</summary>
            <param name="yaw">Angle of rotation, in radians, around the y-axis.</param>
            <param name="pitch">Angle of rotation, in radians, around the x-axis.</param>
            <param name="roll">Angle of rotation, in radians, around the z-axis.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,SFML.Graphics.Matrix@)">
            <summary>Fills in a rotation matrix from a specified yaw, pitch, and roll.</summary>
            <param name="yaw">Angle of rotation, in radians, around the y-axis.</param>
            <param name="pitch">Angle of rotation, in radians, around the x-axis.</param>
            <param name="roll">Angle of rotation, in radians, around the z-axis.</param>
            <param name="result">[OutAttribute] An existing matrix filled in to represent the specified yaw, pitch, and roll.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateShadow(SFML.Graphics.Vector3,SFML.Graphics.Plane)">
            <summary>Creates a Matrix that flattens geometry into a specified Plane as if casting a shadow from a specified light source.</summary>
            <param name="lightDirection">A Vector3 specifying the direction from which the light that will cast the shadow is coming.</param>
            <param name="plane">The Plane onto which the new matrix should flatten geometry so as to cast a shadow.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateShadow(SFML.Graphics.Vector3@,SFML.Graphics.Plane@,SFML.Graphics.Matrix@)">
            <summary>Fills in a Matrix to flatten geometry into a specified Plane as if casting a shadow from a specified light source.</summary>
            <param name="lightDirection">A Vector3 specifying the direction from which the light that will cast the shadow is coming.</param>
            <param name="plane">The Plane onto which the new matrix should flatten geometry so as to cast a shadow.</param>
            <param name="result">[OutAttribute] A Matrix that can be used to flatten geometry onto the specified plane from the specified direction.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateReflection(SFML.Graphics.Plane)">
            <summary>Creates a Matrix that reflects the coordinate system about a specified Plane.</summary>
            <param name="value">The Plane about which to create a reflection.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.CreateReflection(SFML.Graphics.Plane@,SFML.Graphics.Matrix@)">
            <summary>Fills in an existing Matrix so that it reflects the coordinate system about a specified Plane.</summary>
            <param name="value">The Plane about which to create a reflection.</param>
            <param name="result">[OutAttribute] A Matrix that creates the reflection.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Transform(SFML.Graphics.Matrix,SFML.Graphics.Quaternion)">
            <summary>Transforms a Matrix by applying a Quaternion rotation.</summary>
            <param name="value">The Matrix to transform.</param>
            <param name="rotation">The rotation to apply, expressed as a Quaternion.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Transform(SFML.Graphics.Matrix@,SFML.Graphics.Quaternion@,SFML.Graphics.Matrix@)">
            <summary>Transforms a Matrix by applying a Quaternion rotation.</summary>
            <param name="value">The Matrix to transform.</param>
            <param name="rotation">The rotation to apply, expressed as a Quaternion.</param>
            <param name="result">[OutAttribute] An existing Matrix filled in with the result of the transform.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.ToString">
            <summary>Retrieves a string representation of the current object.</summary>
        </member>
        <member name="M:SFML.Graphics.Matrix.Equals(SFML.Graphics.Matrix)">
            <summary>Determines whether the specified Object is equal to the Matrix.</summary>
            <param name="other">The Object to compare with the current Matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Equals(System.Object)">
            <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
            <param name="obj">Object with which to make the comparison.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.GetHashCode">
            <summary>Gets the hash code of this object.</summary>
        </member>
        <member name="M:SFML.Graphics.Matrix.Transpose(SFML.Graphics.Matrix)">
            <summary>Transposes the rows and columns of a matrix.</summary>
            <param name="matrix">Source matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Transpose(SFML.Graphics.Matrix@,SFML.Graphics.Matrix@)">
            <summary>Transposes the rows and columns of a matrix.</summary>
            <param name="matrix">Source matrix.</param>
            <param name="result">[OutAttribute] Transposed matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Determinant">
            <summary>Calculates the determinant of the matrix.</summary>
        </member>
        <member name="M:SFML.Graphics.Matrix.Invert(SFML.Graphics.Matrix)">
            <summary>Calculates the inverse of a matrix.</summary>
            <param name="matrix">Source matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Invert(SFML.Graphics.Matrix@,SFML.Graphics.Matrix@)">
            <summary>Calculates the inverse of a matrix.</summary>
            <param name="matrix">The source matrix.</param>
            <param name="result">[OutAttribute] The inverse of matrix. The same matrix can be used for both arguments.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Lerp(SFML.Graphics.Matrix,SFML.Graphics.Matrix,System.Single)">
            <summary>Linearly interpolates between the corresponding values of two matrices.</summary>
            <param name="matrix1">Source matrix.</param>
            <param name="matrix2">Source matrix.</param>
            <param name="amount">Interpolation value.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Lerp(SFML.Graphics.Matrix@,SFML.Graphics.Matrix@,System.Single,SFML.Graphics.Matrix@)">
            <summary>Linearly interpolates between the corresponding values of two matrices.</summary>
            <param name="matrix1">Source matrix.</param>
            <param name="matrix2">Source matrix.</param>
            <param name="amount">Interpolation value.</param>
            <param name="result">[OutAttribute] Resulting matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Negate(SFML.Graphics.Matrix)">
            <summary>Negates individual elements of a matrix.</summary>
            <param name="matrix">Source matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Negate(SFML.Graphics.Matrix@,SFML.Graphics.Matrix@)">
            <summary>Negates individual elements of a matrix.</summary>
            <param name="matrix">Source matrix.</param>
            <param name="result">[OutAttribute] Negated matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Add(SFML.Graphics.Matrix,SFML.Graphics.Matrix)">
            <summary>Adds a matrix to another matrix.</summary>
            <param name="matrix1">Source matrix.</param>
            <param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Add(SFML.Graphics.Matrix@,SFML.Graphics.Matrix@,SFML.Graphics.Matrix@)">
            <summary>Adds a matrix to another matrix.</summary>
            <param name="matrix1">Source matrix.</param>
            <param name="matrix2">Source matrix.</param>
            <param name="result">[OutAttribute] Resulting matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Subtract(SFML.Graphics.Matrix,SFML.Graphics.Matrix)">
            <summary>Subtracts matrices.</summary>
            <param name="matrix1">Source matrix.</param>
            <param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Subtract(SFML.Graphics.Matrix@,SFML.Graphics.Matrix@,SFML.Graphics.Matrix@)">
            <summary>Subtracts matrices.</summary>
            <param name="matrix1">Source matrix.</param>
            <param name="matrix2">Source matrix.</param>
            <param name="result">[OutAttribute] Result of the subtraction.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Multiply(SFML.Graphics.Matrix,SFML.Graphics.Matrix)">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="matrix1">Source matrix.</param>
            <param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Multiply(SFML.Graphics.Matrix@,SFML.Graphics.Matrix@,SFML.Graphics.Matrix@)">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="matrix1">Source matrix.</param>
            <param name="matrix2">Source matrix.</param>
            <param name="result">[OutAttribute] Result of the multiplication.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Multiply(SFML.Graphics.Matrix,System.Single)">
            <summary>Multiplies a matrix by a scalar value.</summary>
            <param name="matrix1">Source matrix.</param>
            <param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Multiply(SFML.Graphics.Matrix@,System.Single,SFML.Graphics.Matrix@)">
            <summary>Multiplies a matrix by a scalar value.</summary>
            <param name="matrix1">Source matrix.</param>
            <param name="scaleFactor">Scalar value.</param>
            <param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Divide(SFML.Graphics.Matrix,SFML.Graphics.Matrix)">
            <summary>Divides the components of a matrix by the corresponding components of another matrix.</summary>
            <param name="matrix1">Source matrix.</param>
            <param name="matrix2">The divisor.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Divide(SFML.Graphics.Matrix@,SFML.Graphics.Matrix@,SFML.Graphics.Matrix@)">
            <summary>Divides the components of a matrix by the corresponding components of another matrix.</summary>
            <param name="matrix1">Source matrix.</param>
            <param name="matrix2">The divisor.</param>
            <param name="result">[OutAttribute] Result of the division.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Divide(SFML.Graphics.Matrix,System.Single)">
            <summary>Divides the components of a matrix by a scalar.</summary>
            <param name="matrix1">Source matrix.</param>
            <param name="divider">The divisor.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.Divide(SFML.Graphics.Matrix@,System.Single,SFML.Graphics.Matrix@)">
            <summary>Divides the components of a matrix by a scalar.</summary>
            <param name="matrix1">Source matrix.</param>
            <param name="divider">The divisor.</param>
            <param name="result">[OutAttribute] Result of the division.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.op_UnaryNegation(SFML.Graphics.Matrix)">
            <summary>Negates individual elements of a matrix.</summary>
            <param name="matrix1">Source matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.op_Equality(SFML.Graphics.Matrix,SFML.Graphics.Matrix)">
            <summary>Compares a matrix for equality with another matrix.</summary>
            <param name="matrix1">Source matrix.</param>
            <param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.op_Inequality(SFML.Graphics.Matrix,SFML.Graphics.Matrix)">
            <summary>Tests a matrix for inequality with another matrix.</summary>
            <param name="matrix1">The matrix on the left of the equal sign.</param>
            <param name="matrix2">The matrix on the right of the equal sign.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.op_Addition(SFML.Graphics.Matrix,SFML.Graphics.Matrix)">
            <summary>Adds a matrix to another matrix.</summary>
            <param name="matrix1">Source matrix.</param>
            <param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.op_Subtraction(SFML.Graphics.Matrix,SFML.Graphics.Matrix)">
            <summary>Subtracts matrices.</summary>
            <param name="matrix1">Source matrix.</param>
            <param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.op_Multiply(SFML.Graphics.Matrix,SFML.Graphics.Matrix)">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="matrix1">Source matrix.</param>
            <param name="matrix2">Source matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.op_Multiply(SFML.Graphics.Matrix,System.Single)">
            <summary>Multiplies a matrix by a scalar value.</summary>
            <param name="matrix">Source matrix.</param>
            <param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.op_Multiply(System.Single,SFML.Graphics.Matrix)">
            <summary>Multiplies a matrix by a scalar value.</summary>
            <param name="scaleFactor">Scalar value.</param>
            <param name="matrix">Source matrix.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.op_Division(SFML.Graphics.Matrix,SFML.Graphics.Matrix)">
            <summary>Divides the components of a matrix by the corresponding components of another matrix.</summary>
            <param name="matrix1">Source matrix.</param>
            <param name="matrix2">The divisor.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.op_Division(SFML.Graphics.Matrix,System.Single)">
            <summary>Divides the components of a matrix by a scalar.</summary>
            <param name="matrix1">Source matrix.</param>
            <param name="divider">The divisor.</param>
        </member>
        <member name="M:SFML.Graphics.Matrix.#cctor">
            <summary>
            Initializes the <see cref="T:SFML.Graphics.Matrix"/> struct.
            </summary>
        </member>
        <member name="P:SFML.Graphics.Matrix.Identity">
            <summary>Returns an instance of the identity matrix.</summary>
        </member>
        <member name="P:SFML.Graphics.Matrix.Up">
            <summary>Gets and sets the up vector of the Matrix.</summary>
        </member>
        <member name="P:SFML.Graphics.Matrix.Down">
            <summary>Gets and sets the down vector of the Matrix.</summary>
        </member>
        <member name="P:SFML.Graphics.Matrix.Right">
            <summary>Gets and sets the right vector of the Matrix.</summary>
        </member>
        <member name="P:SFML.Graphics.Matrix.Left">
            <summary>Gets and sets the left vector of the Matrix.</summary>
        </member>
        <member name="P:SFML.Graphics.Matrix.Forward">
            <summary>Gets and sets the forward vector of the Matrix.</summary>
        </member>
        <member name="P:SFML.Graphics.Matrix.Backward">
            <summary>Gets and sets the backward vector of the Matrix.</summary>
        </member>
        <member name="P:SFML.Graphics.Matrix.Translation">
            <summary>Gets and sets the translation vector of the Matrix.</summary>
        </member>
        <member name="T:SFML.Graphics.Design.RayConverter">
            <summary>Provides a unified way of converting Ray values to other types, as well as for accessing standard values and subproperties.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.RayConverter.#ctor">
            <summary>Initializes a new instance of the RayConverter class.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.RayConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
        </member>
        <member name="M:SFML.Graphics.Design.RayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
        </member>
        <member name="M:SFML.Graphics.Design.RayConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>Creates an instance of the type that this RayConverter is associated with, using the specified context, given a set of property values for the object.</summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
        </member>
        <member name="T:SFML.Graphics.Ray">
            <summary>Defines a ray.</summary>
        </member>
        <member name="F:SFML.Graphics.Ray.Position">
            <summary>Specifies the starting point of the Ray.</summary>
        </member>
        <member name="F:SFML.Graphics.Ray.Direction">
            <summary>Unit vector specifying the direction the Ray is pointing.</summary>
        </member>
        <member name="M:SFML.Graphics.Ray.#ctor(SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Creates a new instance of Ray.</summary>
            <param name="position">The starting point of the Ray.</param>
            <param name="direction">Unit vector describing the direction of the Ray.</param>
        </member>
        <member name="M:SFML.Graphics.Ray.Equals(SFML.Graphics.Ray)">
            <summary>Determines whether the specified Ray is equal to the current Ray.</summary>
            <param name="other">The Ray to compare with the current Ray.</param>
        </member>
        <member name="M:SFML.Graphics.Ray.Equals(System.Object)">
            <summary>Determines whether two instances of Ray are equal.</summary>
            <param name="obj">The Object to compare with the current Ray.</param>
        </member>
        <member name="M:SFML.Graphics.Ray.GetHashCode">
            <summary>Gets the hash code for this instance.</summary>
        </member>
        <member name="M:SFML.Graphics.Ray.ToString">
            <summary>Returns a String that represents the current Ray.</summary>
        </member>
        <member name="M:SFML.Graphics.Ray.Intersects(SFML.Graphics.BoundingBox)">
            <summary>Checks whether the Ray intersects a specified BoundingBox.</summary>
            <param name="box">The BoundingBox to check for intersection with the Ray.</param>
        </member>
        <member name="M:SFML.Graphics.Ray.Intersects(SFML.Graphics.BoundingBox@,System.Nullable{System.Single}@)">
            <summary>Checks whether the current Ray intersects a BoundingBox.</summary>
            <param name="box">The BoundingBox to check for intersection with.</param>
            <param name="result">[OutAttribute] Distance at which the ray intersects the BoundingBox or null if there is no intersection.</param>
        </member>
        <member name="M:SFML.Graphics.Ray.Intersects(SFML.Graphics.BoundingFrustum)">
            <summary>Checks whether the Ray intersects a specified BoundingFrustum.</summary>
            <param name="frustum">The BoundingFrustum to check for intersection with the Ray.</param>
        </member>
        <member name="M:SFML.Graphics.Ray.Intersects(SFML.Graphics.Plane)">
            <summary>Determines whether this Ray intersects a specified Plane.</summary>
            <param name="plane">The Plane with which to calculate this Ray's intersection.</param>
        </member>
        <member name="M:SFML.Graphics.Ray.Intersects(SFML.Graphics.Plane@,System.Nullable{System.Single}@)">
            <summary>Determines whether this Ray intersects a specified Plane.</summary>
            <param name="plane">The Plane with which to calculate this Ray's intersection.</param>
            <param name="result">[OutAttribute] The distance at which this Ray intersects the specified Plane, or null if there is no intersection.</param>
        </member>
        <member name="M:SFML.Graphics.Ray.Intersects(SFML.Graphics.BoundingSphere)">
            <summary>Checks whether the Ray intersects a specified BoundingSphere.</summary>
            <param name="sphere">The BoundingSphere to check for intersection with the Ray.</param>
        </member>
        <member name="M:SFML.Graphics.Ray.Intersects(SFML.Graphics.BoundingSphere@,System.Nullable{System.Single}@)">
            <summary>Checks whether the current Ray intersects a BoundingSphere.</summary>
            <param name="sphere">The BoundingSphere to check for intersection with.</param>
            <param name="result">[OutAttribute] Distance at which the ray intersects the BoundingSphere or null if there is no intersection.</param>
        </member>
        <member name="M:SFML.Graphics.Ray.op_Equality(SFML.Graphics.Ray,SFML.Graphics.Ray)">
            <summary>Determines whether two instances of Ray are equal.</summary>
            <param name="a">The object to the left of the equality operator.</param>
            <param name="b">The object to the right of the equality operator.</param>
        </member>
        <member name="M:SFML.Graphics.Ray.op_Inequality(SFML.Graphics.Ray,SFML.Graphics.Ray)">
            <summary>Determines whether two instances of Ray are not equal.</summary>
            <param name="a">The object to the left of the inequality operator.</param>
            <param name="b">The object to the right of the inequality operator.</param>
        </member>
        <member name="T:SFML.Graphics.Design.PlaneConverter">
            <summary>Provides a unified way of converting Plane values to other types, as well as for accessing standard values and subproperties.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.PlaneConverter.#ctor">
            <summary>Initializes a new instance of the PlaneConverter class.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.PlaneConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
        </member>
        <member name="M:SFML.Graphics.Design.PlaneConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>Creates an instance of the type that this PlaneConverter is associated with, using the specified context, given a set of property values for the object.</summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
        </member>
        <member name="T:SFML.Graphics.Shape">
            <summary>
            Shape defines a drawable convex shape ; it also defines
            helper functions to draw simple shapes like
            lines, rectangles, circles, etc.
            </summary>
        </member>
        <member name="M:SFML.Graphics.Shape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SFML.Graphics.Shape.TransformToLocal(SFML.Graphics.Vector2)">
            <summary>
            Transform a point from global coordinates into local coordinates
            (ie it applies the inverse of object's center, translation, rotation and scale to the point)
            </summary>
            <param name="point">Point to transform</param>
            <returns>Transformed point</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.TransformToGlobal(SFML.Graphics.Vector2)">
            <summary>
            Transform a point from local coordinates into global coordinates
            (ie it applies the object's center, translation, rotation and scale to the point)
            </summary>
            <param name="point">Point to transform</param>
            <returns>Transformed point</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.AddPoint(SFML.Graphics.Vector2,SFML.Graphics.Color)">
            <summary>
            Add a point to the shape
            </summary>
            <param name="position">Position of the point</param>
            <param name="color">Color of the point</param>
        </member>
        <member name="M:SFML.Graphics.Shape.AddPoint(SFML.Graphics.Vector2,SFML.Graphics.Color,SFML.Graphics.Color)">
            <summary>
            Add a point to the shape
            </summary>
            <param name="position">Position of the point</param>
            <param name="color">Color of the point</param>
            <param name="outlineColor">Outline color of the point</param>
        </member>
        <member name="M:SFML.Graphics.Shape.EnableFill(System.Boolean)">
            <summary>
            Enable or disable filling the shape.
            Fill is enabled by default
            </summary>
            <param name="enable">True to enable, false to disable</param>
        </member>
        <member name="M:SFML.Graphics.Shape.EnableOutline(System.Boolean)">
            <summary>
            Enable or disable drawing the shape outline.
            Outline is enabled by default
            </summary>
            <param name="enable">True to enable, false to disable</param>
        </member>
        <member name="M:SFML.Graphics.Shape.SetPointPosition(System.UInt32,SFML.Graphics.Vector2)">
            <summary>
            Set the position of a point
            </summary>
            <param name="index">Index of the point, in range [0, NbPoints - 1]</param>
            <param name="position">New position of the index-th point</param>
        </member>
        <member name="M:SFML.Graphics.Shape.GetPointPosition(System.UInt32)">
            <summary>
            Get the position of a point
            </summary>
            <param name="index">Index of the point, in range [0, NbPoints - 1]</param>
            <returns>Position of the index-th point</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.SetPointColor(System.UInt32,SFML.Graphics.Color)">
            <summary>
            Set the color of a point
            </summary>
            <param name="index">Index of the point, in range [0, NbPoints - 1]</param>
            <param name="color">New color of the index-th point</param>
        </member>
        <member name="M:SFML.Graphics.Shape.GetPointColor(System.UInt32)">
            <summary>
            Get the color of a point
            </summary>
            <param name="index">Index of the point, in range [0, NbPoints - 1]</param>
            <returns>Color of the index-th point</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.SetPointOutlineColor(System.UInt32,SFML.Graphics.Color)">
            <summary>
            Set the outline color of a point
            </summary>
            <param name="index">Index of the point, in range [0, NbPoints - 1]</param>
            <param name="color">New outline color of the index-th point</param>
        </member>
        <member name="M:SFML.Graphics.Shape.GetPointOutlineColor(System.UInt32)">
            <summary>
            Get the outline color of a point
            </summary>
            <param name="index">Index of the point, in range [0, NbPoints - 1]</param>
            <returns>Outline color of the index-th point</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.Line(SFML.Graphics.Vector2,SFML.Graphics.Vector2,System.Single,SFML.Graphics.Color)">
            <summary>
            Create a shape made of a single line
            </summary>
            <param name="p1">Position of the first point</param>
            <param name="p2">Position of the second point</param>
            <param name="thickness">Line thickness</param>
            <param name="color">Color used to draw the line</param>
            <returns>New line shape built with the given parameters</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.Line(SFML.Graphics.Vector2,SFML.Graphics.Vector2,System.Single,SFML.Graphics.Color,System.Single,SFML.Graphics.Color)">
            <summary>
            Create a shape made of a single line
            </summary>
            <param name="p1">Position of the first point</param>
            <param name="p2">Position of the second point</param>
            <param name="thickness">Line thickness</param>
            <param name="color">Color used to draw the line</param>
            <param name="outline">Outline width</param>
            <param name="outlineColor">Color used to draw the outline</param>
            <returns>New line shape built with the given parameters</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.Rectangle(SFML.Graphics.Vector2,SFML.Graphics.Vector2,SFML.Graphics.Color)">
            <summary>
            Create a shape made of a single rectangle
            </summary>
            <param name="p1">Position of the top-left corner</param>
            <param name="p2">Position of the bottom-right corner</param>
            <param name="color">Color used to fill the rectangle</param>
            <returns>New rectangle shape built with the given parameters</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.Rectangle(SFML.Graphics.Vector2,SFML.Graphics.Vector2,SFML.Graphics.Color,System.Single,SFML.Graphics.Color)">
            <summary>
            Create a shape made of a single rectangle
            </summary>
            <param name="p1">Position of the top-left corner</param>
            <param name="p2">Position of the bottom-right corner</param>
            <param name="color">Color used to fill the rectangle</param>
            <param name="outline">Outline width</param>
            <param name="outlineColor">Color used to draw the outline</param>
            <returns>New rectangle shape built with the given parameters</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.Circle(SFML.Graphics.Vector2,System.Single,SFML.Graphics.Color)">
            <summary>
            Create a shape made of a single circle
            </summary>
            <param name="center">Position of the center</param>
            <param name="radius">Radius of the circle</param>
            <param name="color">Color used to fill the circle</param>
            <returns>New circle shape built with the given parameters</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.Circle(SFML.Graphics.Vector2,System.Single,SFML.Graphics.Color,System.Single,SFML.Graphics.Color)">
            <summary>
            Create a shape made of a single circle
            </summary>
            <param name="center">Position of the center</param>
            <param name="radius">Radius of the circle</param>
            <param name="color">Color used to fill the circle</param>
            <param name="outline">Outline width</param>
            <param name="outlineColor">Color used to draw the outline</param>
            <returns>New circle shape built with the given parameters</returns>
        </member>
        <member name="M:SFML.Graphics.Shape.Render(SFML.Graphics.RenderWindow)">
            <summary>
            Render the object into the given render window
            </summary>
            <param name="window">Target window</param>
        </member>
        <member name="M:SFML.Graphics.Shape.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:SFML.Graphics.Shape.#ctor(System.IntPtr)">
            <summary>
            Internal constructor
            </summary>
            <param name="thisPtr">Pointer to the internal object in C library</param>
        </member>
        <member name="P:SFML.Graphics.Shape.Position">
            <summary>
            Position of the object on screen
            </summary>
        </member>
        <member name="P:SFML.Graphics.Shape.Rotation">
            <summary>
            Rotation of the object, defined in degrees
            </summary>
        </member>
        <member name="P:SFML.Graphics.Shape.Scale">
            <summary>
            Vertical and horizontal scale of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.Shape.Center">
            <summary>
            Center of the transformation of the object
            (center of translation, rotation and scale)
            </summary>
        </member>
        <member name="P:SFML.Graphics.Shape.Color">
            <summary>
            Global color of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.Shape.BlendMode">
            <summary>
            Blending mode of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.Shape.OutlineWidth">
            <summary>
            Width of the shape outline
            </summary>
        </member>
        <member name="P:SFML.Graphics.Shape.NbPoints">
            <summary>
            Totla number of points of the shape
            </summary>
        </member>
        <member name="T:SFML.Graphics.Quaternion">
            <summary>Defines a four-dimensional vector (x,y,z,w), which is used to efficiently rotate an object about the (x, y, z) vector by the angle theta, where w = cos(theta/2).</summary>
        </member>
        <member name="F:SFML.Graphics.Quaternion.X">
            <summary>Specifies the x-value of the vector component of the quaternion.</summary>
        </member>
        <member name="F:SFML.Graphics.Quaternion.Y">
            <summary>Specifies the y-value of the vector component of the quaternion.</summary>
        </member>
        <member name="F:SFML.Graphics.Quaternion.Z">
            <summary>Specifies the z-value of the vector component of the quaternion.</summary>
        </member>
        <member name="F:SFML.Graphics.Quaternion.W">
            <summary>Specifies the rotation component of the quaternion.</summary>
        </member>
        <member name="M:SFML.Graphics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>Initializes a new instance of Quaternion.</summary>
            <param name="x">The x-value of the quaternion.</param>
            <param name="y">The y-value of the quaternion.</param>
            <param name="z">The z-value of the quaternion.</param>
            <param name="w">The w-value of the quaternion.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.#ctor(SFML.Graphics.Vector3,System.Single)">
            <summary>Initializes a new instance of Quaternion.</summary>
            <param name="vectorPart">The vector component of the quaternion.</param>
            <param name="scalarPart">The rotation component of the quaternion.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.ToString">
            <summary>Retireves a string representation of the current object.</summary>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Equals(SFML.Graphics.Quaternion)">
            <summary>Determines whether the specified Object is equal to the Quaternion.</summary>
            <param name="other">The Quaternion to compare with the current Quaternion.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Equals(System.Object)">
            <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
            <param name="obj">Object to make the comparison with.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.GetHashCode">
            <summary>Get the hash code of this object.</summary>
        </member>
        <member name="M:SFML.Graphics.Quaternion.LengthSquared">
            <summary>Calculates the length squared of a Quaternion.</summary>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Length">
            <summary>Calculates the length of a Quaternion.</summary>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Normalize">
            <summary>Divides each component of the quaternion by the length of the quaternion.</summary>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Normalize(SFML.Graphics.Quaternion)">
            <summary>Divides each component of the quaternion by the length of the quaternion.</summary>
            <param name="quaternion">Source quaternion.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Normalize(SFML.Graphics.Quaternion@,SFML.Graphics.Quaternion@)">
            <summary>Divides each component of the quaternion by the length of the quaternion.</summary>
            <param name="quaternion">Source quaternion.</param>
            <param name="result">[OutAttribute] Normalized quaternion.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Conjugate">
            <summary>Transforms this Quaternion into its conjugate.</summary>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Conjugate(SFML.Graphics.Quaternion)">
            <summary>Returns the conjugate of a specified Quaternion.</summary>
            <param name="value">The Quaternion of which to return the conjugate.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Conjugate(SFML.Graphics.Quaternion@,SFML.Graphics.Quaternion@)">
            <summary>Returns the conjugate of a specified Quaternion.</summary>
            <param name="value">The Quaternion of which to return the conjugate.</param>
            <param name="result">[OutAttribute] An existing Quaternion filled in to be the conjugate of the specified one.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Inverse(SFML.Graphics.Quaternion)">
            <summary>Returns the inverse of a Quaternion.</summary>
            <param name="quaternion">Source Quaternion.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Inverse(SFML.Graphics.Quaternion@,SFML.Graphics.Quaternion@)">
            <summary>Returns the inverse of a Quaternion.</summary>
            <param name="quaternion">Source Quaternion.</param>
            <param name="result">[OutAttribute] The inverse of the Quaternion.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.CreateFromAxisAngle(SFML.Graphics.Vector3,System.Single)">
            <summary>Creates a Quaternion from a vector and an angle to rotate about the vector.</summary>
            <param name="axis">The vector to rotate around.</param>
            <param name="angle">The angle to rotate around the vector.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.CreateFromAxisAngle(SFML.Graphics.Vector3@,System.Single,SFML.Graphics.Quaternion@)">
            <summary>Creates a Quaternion from a vector and an angle to rotate about the vector.</summary>
            <param name="axis">The vector to rotate around.</param>
            <param name="angle">The angle to rotate around the vector.</param>
            <param name="result">[OutAttribute] The created Quaternion.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>Creates a new Quaternion from specified yaw, pitch, and roll angles.</summary>
            <param name="yaw">The yaw angle, in radians, around the y-axis.</param>
            <param name="pitch">The pitch angle, in radians, around the x-axis.</param>
            <param name="roll">The roll angle, in radians, around the z-axis.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,SFML.Graphics.Quaternion@)">
            <summary>Creates a new Quaternion from specified yaw, pitch, and roll angles.</summary>
            <param name="yaw">The yaw angle, in radians, around the y-axis.</param>
            <param name="pitch">The pitch angle, in radians, around the x-axis.</param>
            <param name="roll">The roll angle, in radians, around the z-axis.</param>
            <param name="result">[OutAttribute] An existing Quaternion filled in to express the specified yaw, pitch, and roll angles.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.CreateFromRotationMatrix(SFML.Graphics.Matrix)">
            <summary>Creates a Quaternion from a rotation Matrix.</summary>
            <param name="matrix">The rotation Matrix to create the Quaternion from.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.CreateFromRotationMatrix(SFML.Graphics.Matrix@,SFML.Graphics.Quaternion@)">
            <summary>Creates a Quaternion from a rotation Matrix.</summary>
            <param name="matrix">The rotation Matrix to create the Quaternion from.</param>
            <param name="result">[OutAttribute] The created Quaternion.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Dot(SFML.Graphics.Quaternion,SFML.Graphics.Quaternion)">
            <summary>Calculates the dot product of two Quaternions.</summary>
            <param name="quaternion1">Source Quaternion.</param>
            <param name="quaternion2">Source Quaternion.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Dot(SFML.Graphics.Quaternion@,SFML.Graphics.Quaternion@,System.Single@)">
            <summary>Calculates the dot product of two Quaternions.</summary>
            <param name="quaternion1">Source Quaternion.</param>
            <param name="quaternion2">Source Quaternion.</param>
            <param name="result">[OutAttribute] Dot product of the Quaternions.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Slerp(SFML.Graphics.Quaternion,SFML.Graphics.Quaternion,System.Single)">
            <summary>Interpolates between two quaternions, using spherical linear interpolation.</summary>
            <param name="quaternion1">Source quaternion.</param>
            <param name="quaternion2">Source quaternion.</param>
            <param name="amount">Value that indicates how far to interpolate between the quaternions.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Slerp(SFML.Graphics.Quaternion@,SFML.Graphics.Quaternion@,System.Single,SFML.Graphics.Quaternion@)">
            <summary>Interpolates between two quaternions, using spherical linear interpolation.</summary>
            <param name="quaternion1">Source quaternion.</param>
            <param name="quaternion2">Source quaternion.</param>
            <param name="amount">Value that indicates how far to interpolate between the quaternions.</param>
            <param name="result">[OutAttribute] Result of the interpolation.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Lerp(SFML.Graphics.Quaternion,SFML.Graphics.Quaternion,System.Single)">
            <summary>Linearly interpolates between two quaternions.</summary>
            <param name="quaternion1">Source quaternion.</param>
            <param name="quaternion2">Source quaternion.</param>
            <param name="amount">Value indicating how far to interpolate between the quaternions.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Lerp(SFML.Graphics.Quaternion@,SFML.Graphics.Quaternion@,System.Single,SFML.Graphics.Quaternion@)">
            <summary>Linearly interpolates between two quaternions.</summary>
            <param name="quaternion1">Source quaternion.</param>
            <param name="quaternion2">Source quaternion.</param>
            <param name="amount">Value indicating how far to interpolate between the quaternions.</param>
            <param name="result">[OutAttribute] The resulting quaternion.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Concatenate(SFML.Graphics.Quaternion,SFML.Graphics.Quaternion)">
            <summary>Concatenates two Quaternions; the result represents the value1 rotation followed by the value2 rotation.</summary>
            <param name="value1">The first Quaternion rotation in the series.</param>
            <param name="value2">The second Quaternion rotation in the series.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Concatenate(SFML.Graphics.Quaternion@,SFML.Graphics.Quaternion@,SFML.Graphics.Quaternion@)">
            <summary>Concatenates two Quaternions; the result represents the value1 rotation followed by the value2 rotation.</summary>
            <param name="value1">The first Quaternion rotation in the series.</param>
            <param name="value2">The second Quaternion rotation in the series.</param>
            <param name="result">[OutAttribute] The Quaternion rotation representing the concatenation of value1 followed by value2.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Negate(SFML.Graphics.Quaternion)">
            <summary>Flips the sign of each component of the quaternion.</summary>
            <param name="quaternion">Source quaternion.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Negate(SFML.Graphics.Quaternion@,SFML.Graphics.Quaternion@)">
            <summary>Flips the sign of each component of the quaternion.</summary>
            <param name="quaternion">Source quaternion.</param>
            <param name="result">[OutAttribute] Negated quaternion.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Add(SFML.Graphics.Quaternion,SFML.Graphics.Quaternion)">
            <summary>Adds two Quaternions.</summary>
            <param name="quaternion1">Quaternion to add.</param>
            <param name="quaternion2">Quaternion to add.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Add(SFML.Graphics.Quaternion@,SFML.Graphics.Quaternion@,SFML.Graphics.Quaternion@)">
            <summary>Adds two Quaternions.</summary>
            <param name="quaternion1">Quaternion to add.</param>
            <param name="quaternion2">Quaternion to add.</param>
            <param name="result">[OutAttribute] Result of adding the Quaternions.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Subtract(SFML.Graphics.Quaternion,SFML.Graphics.Quaternion)">
            <summary>Subtracts a quaternion from another quaternion.</summary>
            <param name="quaternion1">Source quaternion.</param>
            <param name="quaternion2">Source quaternion.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Subtract(SFML.Graphics.Quaternion@,SFML.Graphics.Quaternion@,SFML.Graphics.Quaternion@)">
            <summary>Subtracts a quaternion from another quaternion.</summary>
            <param name="quaternion1">Source quaternion.</param>
            <param name="quaternion2">Source quaternion.</param>
            <param name="result">[OutAttribute] Result of the subtraction.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Multiply(SFML.Graphics.Quaternion,SFML.Graphics.Quaternion)">
            <summary>Multiplies two quaternions.</summary>
            <param name="quaternion1">The quaternion on the left of the multiplication.</param>
            <param name="quaternion2">The quaternion on the right of the multiplication.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Multiply(SFML.Graphics.Quaternion@,SFML.Graphics.Quaternion@,SFML.Graphics.Quaternion@)">
            <summary>Multiplies two quaternions.</summary>
            <param name="quaternion1">The quaternion on the left of the multiplication.</param>
            <param name="quaternion2">The quaternion on the right of the multiplication.</param>
            <param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Multiply(SFML.Graphics.Quaternion,System.Single)">
            <summary>Multiplies a quaternion by a scalar value.</summary>
            <param name="quaternion1">Source quaternion.</param>
            <param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Multiply(SFML.Graphics.Quaternion@,System.Single,SFML.Graphics.Quaternion@)">
            <summary>Multiplies a quaternion by a scalar value.</summary>
            <param name="quaternion1">Source quaternion.</param>
            <param name="scaleFactor">Scalar value.</param>
            <param name="result">[OutAttribute] The result of the multiplication.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Divide(SFML.Graphics.Quaternion,SFML.Graphics.Quaternion)">
            <summary>Divides a Quaternion by another Quaternion.</summary>
            <param name="quaternion1">Source Quaternion.</param>
            <param name="quaternion2">The divisor.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.Divide(SFML.Graphics.Quaternion@,SFML.Graphics.Quaternion@,SFML.Graphics.Quaternion@)">
            <summary>Divides a Quaternion by another Quaternion.</summary>
            <param name="quaternion1">Source Quaternion.</param>
            <param name="quaternion2">The divisor.</param>
            <param name="result">[OutAttribute] Result of the division.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.op_UnaryNegation(SFML.Graphics.Quaternion)">
            <summary>Flips the sign of each component of the quaternion.</summary>
            <param name="quaternion">Source quaternion.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.op_Equality(SFML.Graphics.Quaternion,SFML.Graphics.Quaternion)">
            <summary>Compares two Quaternions for equality.</summary>
            <param name="quaternion1">Source Quaternion.</param>
            <param name="quaternion2">Source Quaternion.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.op_Inequality(SFML.Graphics.Quaternion,SFML.Graphics.Quaternion)">
            <summary>Compare two Quaternions for inequality.</summary>
            <param name="quaternion1">Source Quaternion.</param>
            <param name="quaternion2">Source Quaternion.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.op_Addition(SFML.Graphics.Quaternion,SFML.Graphics.Quaternion)">
            <summary>Adds two Quaternions.</summary>
            <param name="quaternion1">Quaternion to add.</param>
            <param name="quaternion2">Quaternion to add.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.op_Subtraction(SFML.Graphics.Quaternion,SFML.Graphics.Quaternion)">
            <summary>Subtracts a quaternion from another quaternion.</summary>
            <param name="quaternion1">Source quaternion.</param>
            <param name="quaternion2">Source quaternion.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.op_Multiply(SFML.Graphics.Quaternion,SFML.Graphics.Quaternion)">
            <summary>Multiplies two quaternions.</summary>
            <param name="quaternion1">Source quaternion.</param>
            <param name="quaternion2">Source quaternion.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.op_Multiply(SFML.Graphics.Quaternion,System.Single)">
            <summary>Multiplies a quaternion by a scalar value.</summary>
            <param name="quaternion1">Source quaternion.</param>
            <param name="scaleFactor">Scalar value.</param>
        </member>
        <member name="M:SFML.Graphics.Quaternion.op_Division(SFML.Graphics.Quaternion,SFML.Graphics.Quaternion)">
            <summary>Divides a Quaternion by another Quaternion.</summary>
            <param name="quaternion1">Source Quaternion.</param>
            <param name="quaternion2">The divisor.</param>
        </member>
        <member name="P:SFML.Graphics.Quaternion.Identity">
            <summary>Returns a Quaternion representing no rotation.</summary>
        </member>
        <member name="T:SFML.Graphics.Design.Vector4Converter">
            <summary>Provides a unified way of converting Vector4 values to other types, as well as for accessing standard values and subproperties.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.Vector4Converter.#ctor">
            <summary>Initializes a new instance of the Vector4Converter class.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.Vector4Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
        </member>
        <member name="M:SFML.Graphics.Design.Vector4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
        </member>
        <member name="M:SFML.Graphics.Design.Vector4Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>Creates an instance of the type that this Vector4Converter is associated with, using the specified context, given a set of property values for the object.</summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
        </member>
        <member name="T:SFML.Graphics.RenderWindow">
            <summary>
            Simple wrapper for Window that allows easy
            2D rendering
            </summary>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.#ctor(SFML.Window.VideoMode,System.String)">
            <summary>
            Create the window with default style and creation settings
            </summary>
            <param name="mode">Video mode to use</param>
            <param name="title">Title of the window</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.#ctor(SFML.Window.VideoMode,System.String,SFML.Window.Styles)">
            <summary>
            Create the window with default creation settings
            </summary>
            <param name="mode">Video mode to use</param>
            <param name="title">Title of the window</param>
            <param name="style">Window style (Resize | Close by default)</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.#ctor(SFML.Window.VideoMode,System.String,SFML.Window.Styles,SFML.Window.WindowSettings)">
            <summary>
            Create the window
            </summary>
            <param name="mode">Video mode to use</param>
            <param name="title">Title of the window</param>
            <param name="style">Window style (Resize | Close by default)</param>
            <param name="settings">Creation parameters</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.#ctor(System.IntPtr)">
            <summary>
            Create the window from an existing control with default creation settings
            </summary>
            <param name="handle">Platform-specific handle of the control</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.#ctor(System.IntPtr,SFML.Window.WindowSettings)">
            <summary>
            Create the window from an existing control
            </summary>
            <param name="handle">Platform-specific handle of the control</param>
            <param name="settings">Creation parameters</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.IsOpened">
            <summary>
            Tell whether or not the window is opened (ie. has been created).
            Note that a hidden window (Show(false))
            will still return true
            </summary>
            <returns>True if the window is opened</returns>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.Close">
            <summary>
            Close (destroy) the window.
            The Window instance remains valid and you can call
            Create to recreate the window
            </summary>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.Display">
            <summary>
            Display the window on screen
            </summary>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.UseVerticalSync(System.Boolean)">
            <summary>
            Enable / disable vertical synchronization
            </summary>
            <param name="enable">True to enable v-sync, false to deactivate</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.ShowMouseCursor(System.Boolean)">
            <summary>
            Show or hide the mouse cursor
            </summary>
            <param name="show">True to show, false to hide</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.SetCursorPosition(System.UInt32,System.UInt32)">
            <summary>
            Change the position of the mouse cursor
            </summary>
            <param name="x">Left coordinate of the cursor, relative to the window</param>
            <param name="y">Top coordinate of the cursor, relative to the window</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.SetPosition(System.Int32,System.Int32)">
            <summary>
            Change the position of the window on screen.
            Only works for top-level windows
            </summary>
            <param name="x">Left position</param>
            <param name="y">Top position</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.SetSize(System.UInt32,System.UInt32)">
            <summary>
            Change the size of the rendering region of the window
            </summary>
            <param name="width">New width</param>
            <param name="height">New height</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.Show(System.Boolean)">
            <summary>
            Show or hide the window
            </summary>
            <param name="show">True to show, false to hide</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.EnableKeyRepeat(System.Boolean)">
            <summary>
            Enable or disable automatic key-repeat.
            Automatic key-repeat is enabled by default
            </summary>
            <param name="enable">True to enable, false to disable</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.SetIcon(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Change the window's icon
            </summary>
            <param name="width">Icon's width, in pixels</param>
            <param name="height">Icon's height, in pixels</param>
            <param name="pixels">Array of pixels, format must be RGBA 32 bits</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.SetActive(System.Boolean)">
            <summary>
            Activate of deactivate the window as the current target
            for rendering
            </summary>
            <param name="active">True to activate, false to deactivate (true by default)</param>
            <returns>True if operation was successful, false otherwise</returns>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.SetFramerateLimit(System.UInt32)">
            <summary>
            Limit the framerate to a maximum fixed frequency
            </summary>
            <param name="limit">Framerate limit, in frames per seconds (use 0 to disable limit)</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.GetFrameTime">
            <summary>
            Get time elapsed since last frame
            </summary>
            <returns>Time elapsed, in seconds</returns>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.SetJoystickThreshold(System.Single)">
            <summary>
            Change the joystick threshold, ie. the value below which
            no move event will be generated
            </summary>
            <param name="threshold">New threshold, in range [0, 100]</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.ConvertCoords(System.UInt32,System.UInt32)">
            <summary>
            Convert a point in window coordinates into view coordinates
            using the current view of the window
            </summary>
            <param name="windowX">X coordinate of the point to convert, relative to the window</param>
            <param name="windowY">Y coordinate of the point to convert, relative to the window</param>
            <returns>Converted point</returns>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.ConvertCoords(System.UInt32,System.UInt32,SFML.Graphics.View)">
            <summary>
            Convert a point in window coordinates into view coordinates
            </summary>
            <param name="windowX">X coordinate of the point to convert, relative to the window</param>
            <param name="windowY">Y coordinate of the point to convert, relative to the window</param>
            <param name="targetView">Target view to convert the point to</param>
            <returns>Converted point</returns>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.PreserveOpenGLStates(System.Boolean)">
            <summary>
            Tell SFML to preserve external OpenGL states, at the expense of
            more CPU charge. Use this function if you don't want SFML
            to mess up your own OpenGL states (if any).
            Don't enable state preservation if not needed, as it will allow
            SFML to do internal optimizations and improve performances.
            This parameter is false by default
            </summary>
            <param name="preserve">True to preserve OpenGL states, false to let SFML optimize</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.Clear">
            <summary>
            Clear the entire window with black color
            </summary>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.Clear(SFML.Graphics.Color)">
            <summary>
            Clear the entire window with a single color
            </summary>
            <param name="color">Color to use to clear the window</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.Capture">
            <summary>
            Save the content of the window to an image
            </summary>
            <returns>Image instance containing the contents of the screen</returns>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.Draw(SFML.Graphics.Drawable)">
            <summary>
            Draw something into the window
            </summary>
            <param name="objectToDraw">Object to draw</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.Draw(SFML.Graphics.PostFx)">
            <summary>
            Apply a post-fx to the window
            </summary>
            <param name="postFx">PostFx to apply</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.GetEvent(SFML.Window.Event@)">
            <summary>
            Internal function to get the next event
            </summary>
            <param name="eventToFill">Variable to fill with the raw pointer to the event structure</param>
            <returns>True if there was an event, false otherwise</returns>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:SFML.Graphics.RenderWindow.Initialize">
            <summary>
            Do common initializations
            </summary>
        </member>
        <member name="P:SFML.Graphics.RenderWindow.Width">
            <summary>
            Width of the rendering region of the window
            </summary>
        </member>
        <member name="P:SFML.Graphics.RenderWindow.Height">
            <summary>
            Height of the rendering region of the window
            </summary>
        </member>
        <member name="P:SFML.Graphics.RenderWindow.Settings">
            <summary>
            Creation settings of the window
            </summary>
        </member>
        <member name="P:SFML.Graphics.RenderWindow.DefaultView">
            <summary>
            Default view of the window
            </summary>
        </member>
        <member name="P:SFML.Graphics.RenderWindow.CurrentView">
            <summary>
            Current view active in the window
            </summary>
        </member>
        <member name="T:SFML.Graphics.BlendMode">
            <summary>
            Enumerate the blending modes available for drawable objects
            </summary>
        </member>
        <member name="F:SFML.Graphics.BlendMode.Alpha">
            <summary>Pixel = Src * a + Dest * (1 - a)</summary>
        </member>
        <member name="F:SFML.Graphics.BlendMode.Add">
            <summary>Pixel = Src + Dest</summary>
        </member>
        <member name="F:SFML.Graphics.BlendMode.Multiply">
            <summary>Pixel = Src * Dest</summary>
        </member>
        <member name="F:SFML.Graphics.BlendMode.None">
            <summary>No blending</summary>
        </member>
        <member name="T:SFML.Graphics.LazyImage">
            <summary>
            An implementation of <see cref="T:SFML.Graphics.Image"/> that will load on-demand.
            </summary>
        </member>
        <member name="M:SFML.Graphics.LazyImage.OnReload">
            <summary>
            When overridden in the derived class, handles when the <see cref="T:SFML.Graphics.LazyImage"/> is reloaded.
            </summary>
        </member>
        <member name="M:SFML.Graphics.LazyImage.Dispose">
            <summary>
            Explicitely dispose the object
            </summary>
        </member>
        <member name="M:SFML.Graphics.LazyImage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SFML.Graphics.LazyImage"/> class.
            </summary>
            <param name="filename">The file name.</param>
        </member>
        <member name="P:SFML.Graphics.LazyImage.FileName">
            <summary>
            Gets the file name that this image uses to load.
            </summary>
        </member>
        <member name="P:SFML.Graphics.LazyImage.This">
            <summary>
            Access to the internal pointer of the object.
            For internal use only
            </summary>
        </member>
        <member name="T:SFML.Graphics.BoundingFrustum">
            <summary>Defines a frustum and helps determine whether forms intersect with it.</summary>
        </member>
        <member name="F:SFML.Graphics.BoundingFrustum.CornerCount">
            <summary>Specifies the total number of corners (8) in the BoundingFrustum.</summary>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.#ctor(SFML.Graphics.Matrix)">
            <summary>Creates a new instance of BoundingFrustum. Reference page contains links to related conceptual articles.</summary>
            <param name="value">Combined matrix that usually takes view × projection matrix.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.Contains(SFML.Graphics.BoundingBox)">
            <summary>Checks whether the current BoundingFrustum contains the specified BoundingBox.</summary>
            <param name="box">The BoundingBox to check against the current BoundingFrustum.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.Contains(SFML.Graphics.BoundingFrustum)">
            <summary>Checks whether the current BoundingFrustum contains the specified BoundingFrustum.</summary>
            <param name="frustum">The BoundingFrustum to check against the current BoundingFrustum.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.Contains(SFML.Graphics.BoundingSphere)">
            <summary>Checks whether the current BoundingFrustum contains the specified BoundingSphere.</summary>
            <param name="sphere">The BoundingSphere to check against the current BoundingFrustum.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.Contains(SFML.Graphics.Vector3)">
            <summary>Checks whether the current BoundingFrustum contains the specified point.</summary>
            <param name="point">The point to check against the current BoundingFrustum.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.Contains(SFML.Graphics.BoundingBox@,SFML.Graphics.ContainmentType@)">
            <summary>Checks whether the current BoundingFrustum contains the specified BoundingBox.</summary>
            <param name="box">The BoundingBox to test for overlap.</param>
            <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.Contains(SFML.Graphics.BoundingSphere@,SFML.Graphics.ContainmentType@)">
            <summary>Checks whether the current BoundingFrustum contains the specified BoundingSphere.</summary>
            <param name="sphere">The BoundingSphere to test for overlap.</param>
            <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.Contains(SFML.Graphics.Vector3@,SFML.Graphics.ContainmentType@)">
            <summary>Checks whether the current BoundingFrustum contains the specified point.</summary>
            <param name="point">The point to test for overlap.</param>
            <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.Equals(System.Object)">
            <summary>Determines whether the specified Object is equal to the BoundingFrustum.</summary>
            <param name="obj">The Object to compare with the current BoundingFrustum.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.GetCorners">
            <summary>Gets an array of points that make up the corners of the BoundingFrustum.</summary>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.GetCorners(SFML.Graphics.Vector3[])">
            <summary>Gets an array of points that make up the corners of the BoundingFrustum.</summary>
            <param name="corners">An existing array of at least 8 Vector3 points where the corners of the BoundingFrustum are written.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.GetHashCode">
            <summary>Gets the hash code for this instance.</summary>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.Intersects(SFML.Graphics.BoundingBox)">
            <summary>Checks whether the current BoundingFrustum intersects the specified BoundingBox.</summary>
            <param name="box">The BoundingBox to check for intersection.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.Intersects(SFML.Graphics.BoundingFrustum)">
            <summary>Checks whether the current BoundingFrustum intersects the specified BoundingFrustum.</summary>
            <param name="frustum">The BoundingFrustum to check for intersection.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.Intersects(SFML.Graphics.BoundingSphere)">
            <summary>Checks whether the current BoundingFrustum intersects the specified BoundingSphere.</summary>
            <param name="sphere">The BoundingSphere to check for intersection.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.Intersects(SFML.Graphics.Plane)">
            <summary>Checks whether the current BoundingFrustum intersects the specified Plane.</summary>
            <param name="plane">The Plane to check for intersection.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.Intersects(SFML.Graphics.Ray)">
            <summary>Checks whether the current BoundingFrustum intersects the specified Ray.</summary>
            <param name="ray">The Ray to check for intersection.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.Intersects(SFML.Graphics.BoundingBox@,System.Boolean@)">
            <summary>Checks whether the current BoundingFrustum intersects a BoundingBox.</summary>
            <param name="box">The BoundingBox to check for intersection with.</param>
            <param name="result">[OutAttribute] true if the BoundingFrustum and BoundingBox intersect; false otherwise.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.Intersects(SFML.Graphics.BoundingSphere@,System.Boolean@)">
            <summary>Checks whether the current BoundingFrustum intersects a BoundingSphere.</summary>
            <param name="sphere">The BoundingSphere to check for intersection with.</param>
            <param name="result">[OutAttribute] true if the BoundingFrustum and BoundingSphere intersect; false otherwise.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.Intersects(SFML.Graphics.Plane@,SFML.Graphics.PlaneIntersectionType@)">
            <summary>Checks whether the current BoundingFrustum intersects a Plane.</summary>
            <param name="plane">The Plane to check for intersection with.</param>
            <param name="result">[OutAttribute] An enumeration indicating whether the BoundingFrustum intersects the Plane.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.Intersects(SFML.Graphics.Ray@,System.Nullable{System.Single}@)">
            <summary>Checks whether the current BoundingFrustum intersects a Ray.</summary>
            <param name="ray">The Ray to check for intersection with.</param>
            <param name="result">[OutAttribute] Distance at which the ray intersects the BoundingFrustum or null if there is no intersection.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.ToString">
            <summary>Returns a String that represents the current BoundingFrustum.</summary>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.Equals(SFML.Graphics.BoundingFrustum)">
            <summary>Determines whether the specified BoundingFrustum is equal to the current BoundingFrustum.</summary>
            <param name="other">The BoundingFrustum to compare with the current BoundingFrustum.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.op_Equality(SFML.Graphics.BoundingFrustum,SFML.Graphics.BoundingFrustum)">
            <summary>Determines whether two instances of BoundingFrustum are equal.</summary>
            <param name="a">The BoundingFrustum to the left of the equality operator.</param>
            <param name="b">The BoundingFrustum to the right of the equality operator.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingFrustum.op_Inequality(SFML.Graphics.BoundingFrustum,SFML.Graphics.BoundingFrustum)">
            <summary>Determines whether two instances of BoundingFrustum are not equal.</summary>
            <param name="a">The BoundingFrustum to the left of the inequality operator.</param>
            <param name="b">The BoundingFrustum to the right of the inequality operator.</param>
        </member>
        <member name="P:SFML.Graphics.BoundingFrustum.Bottom">
            <summary>Gets the bottom plane of the BoundingFrustum.</summary>
        </member>
        <member name="P:SFML.Graphics.BoundingFrustum.Far">
            <summary>Gets the far plane of the BoundingFrustum.</summary>
        </member>
        <member name="P:SFML.Graphics.BoundingFrustum.Left">
            <summary>Gets the left plane of the BoundingFrustum.</summary>
        </member>
        <member name="P:SFML.Graphics.BoundingFrustum.Matrix">
            <summary>Gets or sets the Matrix that describes this bounding frustum.</summary>
        </member>
        <member name="P:SFML.Graphics.BoundingFrustum.Near">
            <summary>Gets the near plane of the BoundingFrustum.</summary>
        </member>
        <member name="P:SFML.Graphics.BoundingFrustum.Right">
            <summary>Gets the right plane of the BoundingFrustum.</summary>
        </member>
        <member name="P:SFML.Graphics.BoundingFrustum.Top">
            <summary>Gets the top plane of the BoundingFrustum.</summary>
        </member>
        <member name="T:SFML.Graphics.View">
            <summary>
            This class defines a view (position, size, etc.) ;
            you can consider it as a 2D camera
            </summary>
        </member>
        <member name="M:SFML.Graphics.View.#ctor">
            <summary>
            Create a default view (1000x1000, centered on origin)
            </summary>
        </member>
        <member name="M:SFML.Graphics.View.#ctor(SFML.Graphics.FloatRect)">
            <summary>
            Construct the view from a rectangle
            </summary>
            <param name="viewRect">Rectangle defining the position and size of the view</param>
        </member>
        <member name="M:SFML.Graphics.View.#ctor(SFML.Graphics.Vector2,SFML.Graphics.Vector2)">
            <summary>
            Construct the view from its center and half-size
            </summary>
            <param name="center">Center of the view</param>
            <param name="halfSize">Half-size of the view (from center to corner)</param>
        </member>
        <member name="M:SFML.Graphics.View.SetFromRect(SFML.Graphics.FloatRect)">
            <summary>
            Rebuild the view from a rectangle
            </summary>
            <param name="viewRect">Rectangle defining the position and size of the view</param>
        </member>
        <member name="M:SFML.Graphics.View.GetRect">
            <summary>
            Get the rectangle defining the view
            </summary>
            <returns>Rectangle of the view</returns>
        </member>
        <member name="M:SFML.Graphics.View.Move(SFML.Graphics.Vector2)">
            <summary>
            Move the view
            </summary>
            <param name="offset">Offset to move the view</param>
        </member>
        <member name="M:SFML.Graphics.View.Zoom(System.Single)">
            <summary>
            Resize the view rectangle to simulate a zoom / unzoom effect
            </summary>
            <param name="factor">Zoom factor to apply, relative to the current zoom</param>
        </member>
        <member name="M:SFML.Graphics.View.#ctor(System.IntPtr)">
            <summary>
            Internal constructor for other classes which need to manipulate raw views
            </summary>
            <param name="thisPtr">Direct pointer to the view object in the C library</param>
        </member>
        <member name="M:SFML.Graphics.View.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="P:SFML.Graphics.View.Center">
            <summary>
            Center of the view
            </summary>
        </member>
        <member name="P:SFML.Graphics.View.HalfSize">
            <summary>
            Half-size of the view
            </summary>
        </member>
        <member name="T:SFML.Graphics.String2D">
            <summary>
            This class defines a graphical 2D text, that can be drawn on screen
            </summary>
        </member>
        <member name="M:SFML.Graphics.String2D.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SFML.Graphics.String2D.#ctor(System.String)">
            <summary>
            Construct the string from a text
            </summary>
            <param name="text">Text to display</param>
        </member>
        <member name="M:SFML.Graphics.String2D.#ctor(System.String,SFML.Graphics.Font)">
            <summary>
            Construct the string from a text and a font
            </summary>
            <param name="text">Text to display</param>
            <param name="font">Font to use</param>
        </member>
        <member name="M:SFML.Graphics.String2D.#ctor(System.String,SFML.Graphics.Font,System.UInt32)">
            <summary>
            Construct the string from a text, font and size
            </summary>
            <param name="text">Text to display</param>
            <param name="font">Font to use</param>
            <param name="size">Base characters size</param>
        </member>
        <member name="M:SFML.Graphics.String2D.TransformToLocal(SFML.Graphics.Vector2)">
            <summary>
            Transform a point from global coordinates into local coordinates
            (ie it applies the inverse of object's center, translation, rotation and scale to the point)
            </summary>
            <param name="point">Point to transform</param>
            <returns>Transformed point</returns>
        </member>
        <member name="M:SFML.Graphics.String2D.TransformToGlobal(SFML.Graphics.Vector2)">
            <summary>
            Transform a point from local coordinates into global coordinates
            (ie it applies the object's center, translation, rotation and scale to the point)
            </summary>
            <param name="point">Point to transform</param>
            <returns>Transformed point</returns>
        </member>
        <member name="M:SFML.Graphics.String2D.GetRect">
            <summary>
            Get the string rectangle on screen
            </summary>
            <returns>String rectangle in global coordinates (doesn't include rotation)</returns>
        </member>
        <member name="M:SFML.Graphics.String2D.GetCharacterPos(System.UInt32)">
            <summary>
            Return the visual position of the Index-th character of the string,
            in coordinates relative to the string
            (note : translation, center, rotation and scale are not applied)
            </summary>
            <param name="index">Index of the character</param>
            <returns>Position of the Index-th character (end of string if Index is out of range)</returns>
        </member>
        <member name="M:SFML.Graphics.String2D.Render(SFML.Graphics.RenderWindow)">
            <summary>
            Render the object into the given render window
            </summary>
            <param name="window">Target window</param>
        </member>
        <member name="M:SFML.Graphics.String2D.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="P:SFML.Graphics.String2D.Position">
            <summary>
            Position of the object on screen
            </summary>
        </member>
        <member name="P:SFML.Graphics.String2D.Rotation">
            <summary>
            Rotation of the object, defined in degrees
            </summary>
        </member>
        <member name="P:SFML.Graphics.String2D.Scale">
            <summary>
            Vertical and horizontal scale of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.String2D.Center">
            <summary>
            Center of the transformation of the object
            (center of translation, rotation and scale)
            </summary>
        </member>
        <member name="P:SFML.Graphics.String2D.Color">
            <summary>
            Global color of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.String2D.BlendMode">
            <summary>
            Blending mode of the object
            </summary>
        </member>
        <member name="P:SFML.Graphics.String2D.Text">
            <summary>
            Text displayed
            </summary>
        </member>
        <member name="P:SFML.Graphics.String2D.Font">
            <summary>
            Font used to display the text
            </summary>
        </member>
        <member name="P:SFML.Graphics.String2D.Size">
            <summary>
            Base size of characters
            </summary>
        </member>
        <member name="P:SFML.Graphics.String2D.Style">
            <summary>
            Style of the text (see Styles enum)
            </summary>
        </member>
        <member name="T:SFML.Graphics.String2D.Styles">
            <summary>
            Enumerate the string drawing styles
            </summary>
        </member>
        <member name="F:SFML.Graphics.String2D.Styles.Regular">
            <summary>Regular characters, no style</summary>
        </member>
        <member name="F:SFML.Graphics.String2D.Styles.Bold">
            <summary> Characters are bold</summary>
        </member>
        <member name="F:SFML.Graphics.String2D.Styles.Italic">
            <summary>Characters are in italic</summary>
        </member>
        <member name="F:SFML.Graphics.String2D.Styles.Underlined">
            <summary>Characters are underlined</summary>
        </member>
        <member name="T:SFML.Graphics.BoundingBox">
            <summary>Defines an axis-aligned box-shaped 3D volume. Reference page contains links to related code samples.</summary>
        </member>
        <member name="F:SFML.Graphics.BoundingBox.CornerCount">
            <summary>Specifies the total number of corners (8) in the BoundingBox.</summary>
        </member>
        <member name="F:SFML.Graphics.BoundingBox.Min">
            <summary>The minimum point the BoundingBox contains.</summary>
        </member>
        <member name="F:SFML.Graphics.BoundingBox.Max">
            <summary>The maximum point the BoundingBox contains.</summary>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.GetCorners">
            <summary>Gets an array of points that make up the corners of the BoundingBox.</summary>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.GetCorners(SFML.Graphics.Vector3[])">
            <summary>Gets the array of points that make up the corners of the BoundingBox.</summary>
            <param name="corners">An existing array of at least 8 Vector3 points where the corners of the BoundingBox are written.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.#ctor(SFML.Graphics.Vector3,SFML.Graphics.Vector3)">
            <summary>Creates an instance of BoundingBox. Reference page contains links to related code samples.</summary>
            <param name="min">The minimum point the BoundingBox includes.</param>
            <param name="max">The maximum point the BoundingBox includes.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.Equals(SFML.Graphics.BoundingBox)">
            <summary>Determines whether two instances of BoundingBox are equal.</summary>
            <param name="other">The BoundingBox to compare with the current BoundingBox.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.Equals(System.Object)">
            <summary>Determines whether two instances of BoundingBox are equal.</summary>
            <param name="obj">The Object to compare with the current BoundingBox.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.GetHashCode">
            <summary>Gets the hash code for this instance.</summary>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.ToString">
            <summary>Returns a String that represents the current BoundingBox.</summary>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.CreateMerged(SFML.Graphics.BoundingBox,SFML.Graphics.BoundingBox)">
            <summary>Creates the smallest BoundingBox that contains the two specified BoundingBox instances.</summary>
            <param name="original">One of the BoundingBoxs to contain.</param>
            <param name="additional">One of the BoundingBoxs to contain.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.CreateMerged(SFML.Graphics.BoundingBox@,SFML.Graphics.BoundingBox@,SFML.Graphics.BoundingBox@)">
            <summary>Creates the smallest BoundingBox that contains the two specified BoundingBox instances.</summary>
            <param name="original">One of the BoundingBox instances to contain.</param>
            <param name="additional">One of the BoundingBox instances to contain.</param>
            <param name="result">[OutAttribute] The created BoundingBox.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.CreateFromSphere(SFML.Graphics.BoundingSphere)">
            <summary>Creates the smallest BoundingBox that will contain the specified BoundingSphere.</summary>
            <param name="sphere">The BoundingSphere to contain.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.CreateFromSphere(SFML.Graphics.BoundingSphere@,SFML.Graphics.BoundingBox@)">
            <summary>Creates the smallest BoundingBox that will contain the specified BoundingSphere.</summary>
            <param name="sphere">The BoundingSphere to contain.</param>
            <param name="result">[OutAttribute] The created BoundingBox.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.CreateFromPoints(System.Collections.Generic.IEnumerable{SFML.Graphics.Vector3})">
            <summary>Creates the smallest BoundingBox that will contain a group of points.</summary>
            <param name="points">A list of points the BoundingBox should contain.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.Intersects(SFML.Graphics.BoundingBox)">
            <summary>Checks whether the current BoundingBox intersects another BoundingBox. Reference page contains links to related code samples.</summary>
            <param name="box">The BoundingBox to check for intersection with.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.Intersects(SFML.Graphics.BoundingBox@,System.Boolean@)">
            <summary>Checks whether the current BoundingBox intersects another BoundingBox. Reference page contains links to related code samples.</summary>
            <param name="box">The BoundingBox to check for intersection with.</param>
            <param name="result">[OutAttribute] true if the BoundingBox instances intersect; false otherwise.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.Intersects(SFML.Graphics.BoundingFrustum)">
            <summary>Checks whether the current BoundingBox intersects a BoundingFrustum. Reference page contains links to related code samples.</summary>
            <param name="frustum">The BoundingFrustum to check for intersection with.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.Intersects(SFML.Graphics.Plane)">
            <summary>Checks whether the current BoundingBox intersects a Plane. Reference page contains links to related code samples.</summary>
            <param name="plane">The Plane to check for intersection with.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.Intersects(SFML.Graphics.Plane@,SFML.Graphics.PlaneIntersectionType@)">
            <summary>Checks whether the current BoundingBox intersects a Plane. Reference page contains links to related code samples.</summary>
            <param name="plane">The Plane to check for intersection with.</param>
            <param name="result">[OutAttribute] An enumeration indicating whether the BoundingBox intersects the Plane.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.Intersects(SFML.Graphics.Ray)">
            <summary>Checks whether the current BoundingBox intersects a Ray. Reference page contains links to related code samples.</summary>
            <param name="ray">The Ray to check for intersection with.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.Intersects(SFML.Graphics.Ray@,System.Nullable{System.Single}@)">
            <summary>Checks whether the current BoundingBox intersects a Ray. Reference page contains links to related code samples.</summary>
            <param name="ray">The Ray to check for intersection with.</param>
            <param name="result">[OutAttribute] Distance at which the ray intersects the BoundingBox, or null if there is no intersection.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.Intersects(SFML.Graphics.BoundingSphere)">
            <summary>Checks whether the current BoundingBox intersects a BoundingSphere. Reference page contains links to related code samples.</summary>
            <param name="sphere">The BoundingSphere to check for intersection with.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.Intersects(SFML.Graphics.BoundingSphere@,System.Boolean@)">
            <summary>Checks whether the current BoundingBox intersects a BoundingSphere. Reference page contains links to related code samples.</summary>
            <param name="sphere">The BoundingSphere to check for intersection with.</param>
            <param name="result">[OutAttribute] true if the BoundingBox and BoundingSphere intersect; false otherwise.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.Contains(SFML.Graphics.BoundingBox)">
            <summary>Tests whether the BoundingBox contains another BoundingBox.</summary>
            <param name="box">The BoundingBox to test for overlap.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.Contains(SFML.Graphics.BoundingBox@,SFML.Graphics.ContainmentType@)">
            <summary>Tests whether the BoundingBox contains a BoundingBox.</summary>
            <param name="box">The BoundingBox to test for overlap.</param>
            <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.Contains(SFML.Graphics.BoundingFrustum)">
            <summary>Tests whether the BoundingBox contains a BoundingFrustum.</summary>
            <param name="frustum">The BoundingFrustum to test for overlap.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.Contains(SFML.Graphics.Vector3)">
            <summary>Tests whether the BoundingBox contains a point.</summary>
            <param name="point">The point to test for overlap.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.Contains(SFML.Graphics.Vector3@,SFML.Graphics.ContainmentType@)">
            <summary>Tests whether the BoundingBox contains a point.</summary>
            <param name="point">The point to test for overlap.</param>
            <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.Contains(SFML.Graphics.BoundingSphere)">
            <summary>Tests whether the BoundingBox contains a BoundingSphere.</summary>
            <param name="sphere">The BoundingSphere to test for overlap.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.Contains(SFML.Graphics.BoundingSphere@,SFML.Graphics.ContainmentType@)">
            <summary>Tests whether the BoundingBox contains a BoundingSphere.</summary>
            <param name="sphere">The BoundingSphere to test for overlap.</param>
            <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.op_Equality(SFML.Graphics.BoundingBox,SFML.Graphics.BoundingBox)">
            <summary>Determines whether two instances of BoundingBox are equal.</summary>
            <param name="a">BoundingBox to compare.</param>
            <param name="b">BoundingBox to compare.</param>
        </member>
        <member name="M:SFML.Graphics.BoundingBox.op_Inequality(SFML.Graphics.BoundingBox,SFML.Graphics.BoundingBox)">
            <summary>Determines whether two instances of BoundingBox are not equal.</summary>
            <param name="a">The object to the left of the inequality operator.</param>
            <param name="b">The object to the right of the inequality operator.</param>
        </member>
        <member name="T:SFML.Graphics.Point">
            <summary>Defines a point in 2D space.</summary>
        </member>
        <member name="F:SFML.Graphics.Point.X">
            <summary>Specifies the x-coordinate of the Point.</summary>
        </member>
        <member name="F:SFML.Graphics.Point.Y">
            <summary>Specifies the y-coordinate of the Point.</summary>
        </member>
        <member name="M:SFML.Graphics.Point.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of Point.</summary>
            <param name="x">The x-coordinate of the Point.</param>
            <param name="y">The y-coordinate of the Point.</param>
        </member>
        <member name="M:SFML.Graphics.Point.Equals(SFML.Graphics.Point)">
            <summary>Determines whether two Point instances are equal.</summary>
            <param name="other">The Point to compare this instance to.</param>
        </member>
        <member name="M:SFML.Graphics.Point.Equals(System.Object)">
            <summary>Determines whether two Point instances are equal.</summary>
            <param name="obj">The object to compare this instance to.</param>
        </member>
        <member name="M:SFML.Graphics.Point.GetHashCode">
            <summary>Gets the hash code for this object.</summary>
        </member>
        <member name="M:SFML.Graphics.Point.ToString">
            <summary>Returns a String that represents the current Point.</summary>
        </member>
        <member name="M:SFML.Graphics.Point.op_Equality(SFML.Graphics.Point,SFML.Graphics.Point)">
            <summary>Determines whether two Point instances are equal.</summary>
            <param name="a">Point on the left side of the equal sign.</param>
            <param name="b">Point on the right side of the equal sign.</param>
        </member>
        <member name="M:SFML.Graphics.Point.op_Inequality(SFML.Graphics.Point,SFML.Graphics.Point)">
            <summary>Determines whether two Point instances are not equal.</summary>
            <param name="a">The Point on the left side of the equal sign.</param>
            <param name="b">The Point on the right side of the equal sign.</param>
        </member>
        <member name="P:SFML.Graphics.Point.Zero">
            <summary>Returns the point (0,0).</summary>
        </member>
        <member name="T:SFML.Graphics.Design.BoundingSphereConverter">
            <summary>Provides a unified way of converting BoundingSphere values to other types, as well as for accessing standard values and subproperties.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.BoundingSphereConverter.#ctor">
            <summary>Initializes a new instance of the BoundingSphereConverter class.</summary>
        </member>
        <member name="M:SFML.Graphics.Design.BoundingSphereConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
            <param name="context">The format context.</param>
            <param name="culture">The current culture.</param>
            <param name="value">The object to convert.</param>
        </member>
        <member name="M:SFML.Graphics.Design.BoundingSphereConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
            <param name="context">The format context.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The destination type.</param>
        </member>
        <member name="M:SFML.Graphics.Design.BoundingSphereConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>Creates an instance of the type that this BoundingSphereConverter is associated with, using the specified context, given a set of property values for the object.</summary>
            <param name="context">The format context.</param>
            <param name="propertyValues">The new property values.</param>
        </member>
    </members>
</doc>
