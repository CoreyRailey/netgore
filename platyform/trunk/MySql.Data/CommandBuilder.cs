using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.Globalization;
using System.Text;
using MySql.Data.MySqlClient.Properties;
using MySql.Data.Types;

namespace MySql.Data.MySqlClient
{
    /// <include file='docs/MySqlCommandBuilder.xml' path='docs/class/*'/>
    [ToolboxItem(false)]
    [DesignerCategory("Code")]
    public sealed class MySqlCommandBuilder : DbCommandBuilder
    {
        string finalSelect;
        bool returnGeneratedIds;

        /// <include file='docs/mysqlcommandBuilder.xml' path='docs/DataAdapter/*'/>
        public new MySqlDataAdapter DataAdapter
        {
            get { return (MySqlDataAdapter)base.DataAdapter; }
            set { base.DataAdapter = value; }
        }

        /// <summary>
        /// Indicates whether the command builder should generate a SELECT statement
        /// to populate any autogenerated fields.  We provide this property rather
        /// than rely on the MySqlCommand.UpdatedRowSource property since a user should
        /// still be able to write a custom insert command and not have our work interfere.
        /// </summary>
        public bool ReturnGeneratedIdentifiers
        {
            get { return returnGeneratedIds; }
            set { returnGeneratedIds = value; }
        }

        /// <include file='docs/MySqlCommandBuilder.xml' path='docs/Ctor/*'/>
        public MySqlCommandBuilder()
        {
            QuotePrefix = QuoteSuffix = "`";
            ReturnGeneratedIdentifiers = true;
        }

        /// <include file='docs/MySqlCommandBuilder.xml' path='docs/Ctor2/*'/>
        public MySqlCommandBuilder(MySqlDataAdapter adapter) : this()
        {
            DataAdapter = adapter;
        }

        ///<summary>
        ///
        ///                    Allows the provider implementation of the <see cref="T:System.Data.Common.DbCommandBuilder" /> class to handle additional parameter properties.
        ///                
        ///</summary>
        ///
        ///<param name="parameter">
        ///                    A <see cref="T:System.Data.Common.DbParameter" /> to which the additional modifications are applied. 
        ///                </param>
        ///<param name="row">
        ///                    The <see cref="T:System.Data.DataRow" /> from the schema table provided by <see cref="M:System.Data.Common.DbDataReader.GetSchemaTable" />. 
        ///                </param>
        ///<param name="statementType">
        ///                    The type of command being generated; INSERT, UPDATE or DELETE. 
        ///                </param>
        ///<param name="whereClause">true if the parameter is part of the update or delete WHERE clause, false if it is part of the insert or update values. 
        ///                </param>
        protected override void ApplyParameterInfo(DbParameter parameter, DataRow row, StatementType statementType,
                                                   bool whereClause)
        {
            ((MySqlParameter)parameter).MySqlDbType = (MySqlDbType)row["ProviderType"];
        }

        /// <summary>
        /// We only need to return the single auto generated column since the base
        /// ADO.Net classes will take care of mapping it onto the datarow for us.
        /// </summary>
        void CreateFinalSelect()
        {
            StringBuilder select = new StringBuilder();

            DataTable dt = GetSchemaTable(DataAdapter.SelectCommand);

            foreach (DataRow row in dt.Rows)
            {
                if (!(bool)row["IsAutoIncrement"])
                    continue;

                select.AppendFormat(CultureInfo.InvariantCulture, "; SELECT last_insert_id() AS `{0}`", row["ColumnName"]);
                break;
            }

            finalSelect = select.ToString();
        }

        /// <summary>
        /// Retrieves parameter information from the stored procedure specified 
        /// in the MySqlCommand and populates the Parameters collection of the 
        /// specified MySqlCommand object.
        /// This method is not currently supported since stored procedures are 
        /// not available in MySql.
        /// </summary>
        /// <param name="command">The MySqlCommand referencing the stored 
        /// procedure from which the parameter information is to be derived. 
        /// The derived parameters are added to the Parameters collection of the 
        /// MySqlCommand.</param>
        /// <exception cref="InvalidOperationException">The command text is not 
        /// a valid stored procedure name.</exception>
        public static void DeriveParameters(MySqlCommand command)
        {
            if (!command.Connection.driver.Version.isAtLeast(5, 0, 0))
                throw new MySqlException("DeriveParameters is not supported on MySQL versions " + "prior to 5.0");

            // retrieve the proc definitino from the cache.
            string spName = command.CommandText;
            if (spName.IndexOf(".") == -1)
                spName = command.Connection.Database + "." + spName;
            DataSet ds = command.Connection.ProcedureCache.GetProcedure(command.Connection, spName);

            DataTable parameters = ds.Tables["Procedure Parameters"];
            DataTable procTable = ds.Tables["Procedures"];
            command.Parameters.Clear();
            foreach (DataRow row in parameters.Rows)
            {
                MySqlParameter p = new MySqlParameter
                                   { ParameterName = String.Format("@{0}", row["PARAMETER_NAME"]), Direction = GetDirection(row) };
                bool unsigned = StoredProcedure.GetFlags(row["DTD_IDENTIFIER"].ToString()).IndexOf("UNSIGNED") != -1;
                bool real_as_float = procTable.Rows[0]["SQL_MODE"].ToString().IndexOf("REAL_AS_FLOAT") != -1;
                p.MySqlDbType = MetaData.NameToType(row["DATA_TYPE"].ToString(), unsigned, real_as_float, command.Connection);
                if (!row["CHARACTER_MAXIMUM_LENGTH"].Equals(DBNull.Value))
                    p.Size = (int)row["CHARACTER_MAXIMUM_LENGTH"];
                if (!row["NUMERIC_PRECISION"].Equals(DBNull.Value))
                    p.Precision = (byte)row["NUMERIC_PRECISION"];
                if (!row["NUMERIC_SCALE"].Equals(DBNull.Value))
                    p.Scale = (byte)(int)row["NUMERIC_SCALE"];
                command.Parameters.Add(p);
            }
        }

        /// <summary>
        /// Gets the delete command.
        /// </summary>
        /// <returns></returns>
        public new MySqlCommand GetDeleteCommand()
        {
            return (MySqlCommand)base.GetDeleteCommand();
        }

        static ParameterDirection GetDirection(DataRow row)
        {
            string mode = row["PARAMETER_MODE"].ToString();
            int ordinal = Convert.ToInt32(row["ORDINAL_POSITION"]);

            if (0 == ordinal)
                return ParameterDirection.ReturnValue;
            else if (mode == "IN")
                return ParameterDirection.Input;
            else if (mode == "OUT")
                return ParameterDirection.Output;
            return ParameterDirection.InputOutput;
        }

        /// <summary>
        /// Gets the insert command.
        /// </summary>
        /// <returns></returns>
        public new MySqlCommand GetInsertCommand()
        {
            return (MySqlCommand)GetInsertCommand(false);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="parameterName"></param>
        /// <returns></returns>
        protected override string GetParameterName(string parameterName)
        {
            StringBuilder sb = new StringBuilder(parameterName);
            sb.Replace(" ", "");
            sb.Replace("/", "_per_");
            sb.Replace("-", "_");
            sb.Replace(")", "_cb_");
            sb.Replace("(", "_ob_");
            sb.Replace("%", "_pct_");
            sb.Replace("<", "_lt_");
            sb.Replace(">", "_gt_");
            sb.Replace(".", "_pt_");
            return String.Format("@{0}", sb);
        }

        ///<summary>
        ///
        ///                    Returns the name of the specified parameter in the format of @p#. Use when building a custom command builder.
        ///                
        ///</summary>
        ///
        ///<returns>
        ///
        ///                    The name of the parameter with the specified number appended as part of the parameter name.
        ///                
        ///</returns>
        ///
        ///<param name="parameterOrdinal">
        ///                    The number to be included as part of the parameter's name..
        ///                </param>
        protected override string GetParameterName(int parameterOrdinal)
        {
            return String.Format("@p{0}", parameterOrdinal.ToString(CultureInfo.InvariantCulture));
        }

        ///<summary>
        ///
        ///                    Returns the placeholder for the parameter in the associated SQL statement.
        ///                
        ///</summary>
        ///
        ///<returns>
        ///
        ///                    The name of the parameter with the specified number appended.
        ///                
        ///</returns>
        ///
        ///<param name="parameterOrdinal">
        ///                    The number to be included as part of the parameter's name.
        ///                </param>
        protected override string GetParameterPlaceholder(int parameterOrdinal)
        {
            return String.Format("@p{0}", parameterOrdinal.ToString(CultureInfo.InvariantCulture));
        }

        /// <summary>
        /// Gets the update command.
        /// </summary>
        /// <returns></returns>
        public new MySqlCommand GetUpdateCommand()
        {
            return (MySqlCommand)base.GetUpdateCommand();
        }

        ///<summary>
        ///
        ///                    Given an unquoted identifier in the correct catalog case, returns the correct quoted form of that identifier, including properly escaping any embedded quotes in the identifier.
        ///                
        ///</summary>
        ///
        ///<returns>
        ///
        ///                    The quoted version of the identifier. Embedded quotes within the identifier are properly escaped.
        ///                
        ///</returns>
        ///
        ///<param name="unquotedIdentifier">
        ///                    The original unquoted identifier.
        ///                </param><filterpriority>2</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" /></PermissionSet>
        public override string QuoteIdentifier(string unquotedIdentifier)
        {
            if (unquotedIdentifier == null)
                throw new ArgumentNullException("unquotedIdentifier");

            // don't quote again if it is already quoted
            if (unquotedIdentifier.StartsWith(QuotePrefix) && unquotedIdentifier.EndsWith(QuoteSuffix))
                return unquotedIdentifier;

            unquotedIdentifier = unquotedIdentifier.Replace(QuotePrefix, QuotePrefix + QuotePrefix);

            return String.Format("{0}{1}{2}", QuotePrefix, unquotedIdentifier, QuoteSuffix);
        }

        /// <include file='docs/MySqlCommandBuilder.xml' path='docs/RefreshSchema/*'/>
        public override void RefreshSchema()
        {
            base.RefreshSchema();
            finalSelect = null;
        }

        void RowUpdating(object sender, MySqlRowUpdatingEventArgs args)
        {
            RowUpdatingHandler(args);

            if (args.StatementType != StatementType.Insert)
                return;

            if (ReturnGeneratedIdentifiers)
            {
                if (args.Command.UpdatedRowSource != UpdateRowSource.None)
                    throw new InvalidOperationException(Resources.MixingUpdatedRowSource);
                args.Command.UpdatedRowSource = UpdateRowSource.FirstReturnedRecord;
                if (finalSelect == null)
                    CreateFinalSelect();
            }

            if (!string.IsNullOrEmpty(finalSelect))
                args.Command.CommandText += finalSelect;
        }

        ///<summary>
        ///
        ///                    Registers the <see cref="T:System.Data.Common.DbCommandBuilder" /> to handle the <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /> event for a <see cref="T:System.Data.Common.DbDataAdapter" />. 
        ///                
        ///</summary>
        ///
        ///<param name="adapter">
        ///                    The <see cref="T:System.Data.Common.DbDataAdapter" /> to be used for the update.
        ///                </param>
        protected override void SetRowUpdatingHandler(DbDataAdapter adapter)
        {
            if (adapter != base.DataAdapter)
                ((MySqlDataAdapter)adapter).RowUpdating += RowUpdating;
            else
                ((MySqlDataAdapter)adapter).RowUpdating -= RowUpdating;
        }

        ///<summary>
        ///
        ///                    Given a quoted identifier, returns the correct unquoted form of that identifier, including properly un-escaping any embedded quotes in the identifier.
        ///                
        ///</summary>
        ///
        ///<returns>
        ///
        ///                    The unquoted identifier, with embedded quotes properly un-escaped.
        ///                
        ///</returns>
        ///
        ///<param name="quotedIdentifier">
        ///                    The identifier that will have its embedded quotes removed.
        ///                </param><filterpriority>2</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" /></PermissionSet>
        public override string UnquoteIdentifier(string quotedIdentifier)
        {
            if (quotedIdentifier == null)
                throw new ArgumentNullException("quotedIdentifier");

            // don't unquote again if it is already unquoted
            if (!quotedIdentifier.StartsWith(QuotePrefix) || !quotedIdentifier.EndsWith(QuoteSuffix))
                return quotedIdentifier;

            if (quotedIdentifier.StartsWith(QuotePrefix))
                quotedIdentifier = quotedIdentifier.Substring(1);
            if (quotedIdentifier.EndsWith(QuoteSuffix))
                quotedIdentifier = quotedIdentifier.Substring(0, quotedIdentifier.Length - 1);

            quotedIdentifier = quotedIdentifier.Replace(QuotePrefix + QuotePrefix, QuotePrefix);

            return quotedIdentifier;
        }
    }
}